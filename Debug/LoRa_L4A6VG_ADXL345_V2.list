
LoRa_L4A6VG_ADXL345_V2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dae8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006444  0800dc98  0800dc98  0001dc98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080140dc  080140dc  00030208  2**0
                  CONTENTS
  4 .ARM          00000008  080140dc  080140dc  000240dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080140e4  080140e4  00030208  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080140e4  080140e4  000240e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080140e8  080140e8  000240e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000208  20000000  080140ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001a778  20000220  080142f4  00030220  2**5
                  ALLOC
 10 ._user_heap_stack 00000600  2001a998  080142f4  0003a998  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030208  2**0
                  CONTENTS, READONLY
 12 .debug_info   00029b44  00000000  00000000  00030238  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004bbe  00000000  00000000  00059d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000018e0  00000000  00000000  0005e940  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macro  0002d11e  00000000  00000000  00060220  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000186e3  00000000  00000000  0008d33e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    001103ab  00000000  00000000  000a5a21  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  001b5dcc  2**0
                  CONTENTS, READONLY
 19 .debug_ranges 00001658  00000000  00000000  001b5e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_frame  00007068  00000000  00000000  001b74a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000220 	.word	0x20000220
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800dc80 	.word	0x0800dc80

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000224 	.word	0x20000224
 80001ec:	0800dc80 	.word	0x0800dc80

080001f0 <arm_bitreversal_32>:
	ENDP

#else

arm_bitreversal_32 PROC
	ADDS     r3,r1,#1
 80001f0:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 80001f2:	2b01      	cmp	r3, #1
	IT       LS
 80001f4:	bf98      	it	ls
	BXLS     lr
 80001f6:	4770      	bxls	lr
	PUSH     {r4-r9}
 80001f8:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 80001fc:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 80001fe:	089b      	lsrs	r3, r3, #2

08000200 <arm_bitreversal_32_0>:
arm_bitreversal_32_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 8000200:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 8000204:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000208:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 800020a:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8
 800020e:	4480      	add	r8, r0
	ADD      r9,r0,r9
 8000210:	4481      	add	r9, r0
	ADD      r2,r0,r2
 8000212:	4402      	add	r2, r0
	ADD      r12,r0,r12
 8000214:	4484      	add	ip, r0
	LDR      r7,[r9,#0]
 8000216:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800021a:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 800021e:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000220:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000224:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 8000228:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800022c:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 8000230:	6014      	str	r4, [r2, #0]
	LDR      r7,[r9,#4]
 8000232:	f8d9 7004 	ldr.w	r7, [r9, #4]
	LDR      r6,[r8,#4]
 8000236:	f8d8 6004 	ldr.w	r6, [r8, #4]
	LDR      r5,[r2,#4]
 800023a:	6855      	ldr	r5, [r2, #4]
	LDR      r4,[r12,#4]
 800023c:	f8dc 4004 	ldr.w	r4, [ip, #4]
	STR      r6,[r9,#4]
 8000240:	f8c9 6004 	str.w	r6, [r9, #4]
	STR      r7,[r8,#4]
 8000244:	f8c8 7004 	str.w	r7, [r8, #4]
	STR      r5,[r12,#4]
 8000248:	f8cc 5004 	str.w	r5, [ip, #4]
	STR      r4,[r2,#4]
 800024c:	6054      	str	r4, [r2, #4]
	ADDS     r1,r1,#8
 800024e:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 8000250:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_32_0
 8000252:	d1d5      	bne.n	8000200 <arm_bitreversal_32_0>
	POP      {r4-r9}
 8000254:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 8000258:	4770      	bx	lr

0800025a <arm_bitreversal_16>:
	ENDP

arm_bitreversal_16 PROC
	ADDS     r3,r1,#1
 800025a:	1c4b      	adds	r3, r1, #1
	CMP      r3,#1
 800025c:	2b01      	cmp	r3, #1
	IT       LS
 800025e:	bf98      	it	ls
	BXLS     lr
 8000260:	4770      	bxls	lr
	PUSH     {r4-r9}
 8000262:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
	ADDS     r1,r2,#2
 8000266:	1c91      	adds	r1, r2, #2
	LSRS     r3,r3,#2
 8000268:	089b      	lsrs	r3, r3, #2

0800026a <arm_bitreversal_16_0>:
arm_bitreversal_16_0 LABEL       ;/* loop unrolled by 2 */
	LDRH     r8,[r1,#4]
 800026a:	f8b1 8004 	ldrh.w	r8, [r1, #4]
	LDRH     r9,[r1,#2]
 800026e:	f8b1 9002 	ldrh.w	r9, [r1, #2]
	LDRH     r2,[r1,#0]
 8000272:	880a      	ldrh	r2, [r1, #0]
	LDRH     r12,[r1,#-2]
 8000274:	f831 cc02 	ldrh.w	ip, [r1, #-2]
	ADD      r8,r0,r8,LSR #1
 8000278:	eb00 0858 	add.w	r8, r0, r8, lsr #1
	ADD      r9,r0,r9,LSR #1
 800027c:	eb00 0959 	add.w	r9, r0, r9, lsr #1
	ADD      r2,r0,r2,LSR #1
 8000280:	eb00 0252 	add.w	r2, r0, r2, lsr #1
	ADD      r12,r0,r12,LSR #1
 8000284:	eb00 0c5c 	add.w	ip, r0, ip, lsr #1
	LDR      r7,[r9,#0]
 8000288:	f8d9 7000 	ldr.w	r7, [r9]
	LDR      r6,[r8,#0]
 800028c:	f8d8 6000 	ldr.w	r6, [r8]
	LDR      r5,[r2,#0]
 8000290:	6815      	ldr	r5, [r2, #0]
	LDR      r4,[r12,#0]
 8000292:	f8dc 4000 	ldr.w	r4, [ip]
	STR      r6,[r9,#0]
 8000296:	f8c9 6000 	str.w	r6, [r9]
	STR      r7,[r8,#0]
 800029a:	f8c8 7000 	str.w	r7, [r8]
	STR      r5,[r12,#0]
 800029e:	f8cc 5000 	str.w	r5, [ip]
	STR      r4,[r2,#0]
 80002a2:	6014      	str	r4, [r2, #0]
	ADDS     r1,r1,#8
 80002a4:	3108      	adds	r1, #8
	SUBS     r3,r3,#1
 80002a6:	3b01      	subs	r3, #1
	BNE      arm_bitreversal_16_0
 80002a8:	d1df      	bne.n	800026a <arm_bitreversal_16_0>
	POP      {r4-r9}
 80002aa:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
	BX       lr
 80002ae:	4770      	bx	lr

080002b0 <strcmp>:
 80002b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002b8:	2a01      	cmp	r2, #1
 80002ba:	bf28      	it	cs
 80002bc:	429a      	cmpcs	r2, r3
 80002be:	d0f7      	beq.n	80002b0 <strcmp>
 80002c0:	1ad0      	subs	r0, r2, r3
 80002c2:	4770      	bx	lr

080002c4 <strlen>:
 80002c4:	4603      	mov	r3, r0
 80002c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d1fb      	bne.n	80002c6 <strlen+0x2>
 80002ce:	1a18      	subs	r0, r3, r0
 80002d0:	3801      	subs	r0, #1
 80002d2:	4770      	bx	lr
	...

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	; 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80004be:	f1a4 0401 	sub.w	r4, r4, #1
 80004c2:	d1e9      	bne.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_dmul>:
 80006f8:	b570      	push	{r4, r5, r6, lr}
 80006fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80006fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000702:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000706:	bf1d      	ittte	ne
 8000708:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800070c:	ea94 0f0c 	teqne	r4, ip
 8000710:	ea95 0f0c 	teqne	r5, ip
 8000714:	f000 f8de 	bleq	80008d4 <__aeabi_dmul+0x1dc>
 8000718:	442c      	add	r4, r5
 800071a:	ea81 0603 	eor.w	r6, r1, r3
 800071e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000722:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000726:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800072a:	bf18      	it	ne
 800072c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000730:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000734:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000738:	d038      	beq.n	80007ac <__aeabi_dmul+0xb4>
 800073a:	fba0 ce02 	umull	ip, lr, r0, r2
 800073e:	f04f 0500 	mov.w	r5, #0
 8000742:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000746:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800074a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800074e:	f04f 0600 	mov.w	r6, #0
 8000752:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000756:	f09c 0f00 	teq	ip, #0
 800075a:	bf18      	it	ne
 800075c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000760:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000764:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000768:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800076c:	d204      	bcs.n	8000778 <__aeabi_dmul+0x80>
 800076e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000772:	416d      	adcs	r5, r5
 8000774:	eb46 0606 	adc.w	r6, r6, r6
 8000778:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800077c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000780:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000784:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000788:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800078c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000790:	bf88      	it	hi
 8000792:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000796:	d81e      	bhi.n	80007d6 <__aeabi_dmul+0xde>
 8000798:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800079c:	bf08      	it	eq
 800079e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80007a2:	f150 0000 	adcs.w	r0, r0, #0
 80007a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80007b0:	ea46 0101 	orr.w	r1, r6, r1
 80007b4:	ea40 0002 	orr.w	r0, r0, r2
 80007b8:	ea81 0103 	eor.w	r1, r1, r3
 80007bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80007c0:	bfc2      	ittt	gt
 80007c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80007c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80007ca:	bd70      	popgt	{r4, r5, r6, pc}
 80007cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007d0:	f04f 0e00 	mov.w	lr, #0
 80007d4:	3c01      	subs	r4, #1
 80007d6:	f300 80ab 	bgt.w	8000930 <__aeabi_dmul+0x238>
 80007da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80007de:	bfde      	ittt	le
 80007e0:	2000      	movle	r0, #0
 80007e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80007e6:	bd70      	pople	{r4, r5, r6, pc}
 80007e8:	f1c4 0400 	rsb	r4, r4, #0
 80007ec:	3c20      	subs	r4, #32
 80007ee:	da35      	bge.n	800085c <__aeabi_dmul+0x164>
 80007f0:	340c      	adds	r4, #12
 80007f2:	dc1b      	bgt.n	800082c <__aeabi_dmul+0x134>
 80007f4:	f104 0414 	add.w	r4, r4, #20
 80007f8:	f1c4 0520 	rsb	r5, r4, #32
 80007fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000800:	fa20 f004 	lsr.w	r0, r0, r4
 8000804:	fa01 f205 	lsl.w	r2, r1, r5
 8000808:	ea40 0002 	orr.w	r0, r0, r2
 800080c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000810:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000814:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000818:	fa21 f604 	lsr.w	r6, r1, r4
 800081c:	eb42 0106 	adc.w	r1, r2, r6
 8000820:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000824:	bf08      	it	eq
 8000826:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800082a:	bd70      	pop	{r4, r5, r6, pc}
 800082c:	f1c4 040c 	rsb	r4, r4, #12
 8000830:	f1c4 0520 	rsb	r5, r4, #32
 8000834:	fa00 f304 	lsl.w	r3, r0, r4
 8000838:	fa20 f005 	lsr.w	r0, r0, r5
 800083c:	fa01 f204 	lsl.w	r2, r1, r4
 8000840:	ea40 0002 	orr.w	r0, r0, r2
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800084c:	f141 0100 	adc.w	r1, r1, #0
 8000850:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000854:	bf08      	it	eq
 8000856:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f1c4 0520 	rsb	r5, r4, #32
 8000860:	fa00 f205 	lsl.w	r2, r0, r5
 8000864:	ea4e 0e02 	orr.w	lr, lr, r2
 8000868:	fa20 f304 	lsr.w	r3, r0, r4
 800086c:	fa01 f205 	lsl.w	r2, r1, r5
 8000870:	ea43 0302 	orr.w	r3, r3, r2
 8000874:	fa21 f004 	lsr.w	r0, r1, r4
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	fa21 f204 	lsr.w	r2, r1, r4
 8000880:	ea20 0002 	bic.w	r0, r0, r2
 8000884:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000888:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800088c:	bf08      	it	eq
 800088e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000892:	bd70      	pop	{r4, r5, r6, pc}
 8000894:	f094 0f00 	teq	r4, #0
 8000898:	d10f      	bne.n	80008ba <__aeabi_dmul+0x1c2>
 800089a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800089e:	0040      	lsls	r0, r0, #1
 80008a0:	eb41 0101 	adc.w	r1, r1, r1
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	bf08      	it	eq
 80008aa:	3c01      	subeq	r4, #1
 80008ac:	d0f7      	beq.n	800089e <__aeabi_dmul+0x1a6>
 80008ae:	ea41 0106 	orr.w	r1, r1, r6
 80008b2:	f095 0f00 	teq	r5, #0
 80008b6:	bf18      	it	ne
 80008b8:	4770      	bxne	lr
 80008ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80008be:	0052      	lsls	r2, r2, #1
 80008c0:	eb43 0303 	adc.w	r3, r3, r3
 80008c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80008c8:	bf08      	it	eq
 80008ca:	3d01      	subeq	r5, #1
 80008cc:	d0f7      	beq.n	80008be <__aeabi_dmul+0x1c6>
 80008ce:	ea43 0306 	orr.w	r3, r3, r6
 80008d2:	4770      	bx	lr
 80008d4:	ea94 0f0c 	teq	r4, ip
 80008d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008dc:	bf18      	it	ne
 80008de:	ea95 0f0c 	teqne	r5, ip
 80008e2:	d00c      	beq.n	80008fe <__aeabi_dmul+0x206>
 80008e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e8:	bf18      	it	ne
 80008ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ee:	d1d1      	bne.n	8000894 <__aeabi_dmul+0x19c>
 80008f0:	ea81 0103 	eor.w	r1, r1, r3
 80008f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008f8:	f04f 0000 	mov.w	r0, #0
 80008fc:	bd70      	pop	{r4, r5, r6, pc}
 80008fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000902:	bf06      	itte	eq
 8000904:	4610      	moveq	r0, r2
 8000906:	4619      	moveq	r1, r3
 8000908:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800090c:	d019      	beq.n	8000942 <__aeabi_dmul+0x24a>
 800090e:	ea94 0f0c 	teq	r4, ip
 8000912:	d102      	bne.n	800091a <__aeabi_dmul+0x222>
 8000914:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000918:	d113      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	d105      	bne.n	800092c <__aeabi_dmul+0x234>
 8000920:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000924:	bf1c      	itt	ne
 8000926:	4610      	movne	r0, r2
 8000928:	4619      	movne	r1, r3
 800092a:	d10a      	bne.n	8000942 <__aeabi_dmul+0x24a>
 800092c:	ea81 0103 	eor.w	r1, r1, r3
 8000930:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000934:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000938:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800093c:	f04f 0000 	mov.w	r0, #0
 8000940:	bd70      	pop	{r4, r5, r6, pc}
 8000942:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000946:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800094a:	bd70      	pop	{r4, r5, r6, pc}

0800094c <__aeabi_ddiv>:
 800094c:	b570      	push	{r4, r5, r6, lr}
 800094e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000952:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000956:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800095a:	bf1d      	ittte	ne
 800095c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000960:	ea94 0f0c 	teqne	r4, ip
 8000964:	ea95 0f0c 	teqne	r5, ip
 8000968:	f000 f8a7 	bleq	8000aba <__aeabi_ddiv+0x16e>
 800096c:	eba4 0405 	sub.w	r4, r4, r5
 8000970:	ea81 0e03 	eor.w	lr, r1, r3
 8000974:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000978:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800097c:	f000 8088 	beq.w	8000a90 <__aeabi_ddiv+0x144>
 8000980:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000984:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000988:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800098c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000990:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000994:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000998:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800099c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80009a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80009a4:	429d      	cmp	r5, r3
 80009a6:	bf08      	it	eq
 80009a8:	4296      	cmpeq	r6, r2
 80009aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80009ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80009b2:	d202      	bcs.n	80009ba <__aeabi_ddiv+0x6e>
 80009b4:	085b      	lsrs	r3, r3, #1
 80009b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ba:	1ab6      	subs	r6, r6, r2
 80009bc:	eb65 0503 	sbc.w	r5, r5, r3
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80009ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80009ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80009d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009d6:	bf22      	ittt	cs
 80009d8:	1ab6      	subcs	r6, r6, r2
 80009da:	4675      	movcs	r5, lr
 80009dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80009e0:	085b      	lsrs	r3, r3, #1
 80009e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ee:	bf22      	ittt	cs
 80009f0:	1ab6      	subcs	r6, r6, r2
 80009f2:	4675      	movcs	r5, lr
 80009f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a02:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a06:	bf22      	ittt	cs
 8000a08:	1ab6      	subcs	r6, r6, r2
 8000a0a:	4675      	movcs	r5, lr
 8000a0c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a10:	085b      	lsrs	r3, r3, #1
 8000a12:	ea4f 0232 	mov.w	r2, r2, rrx
 8000a16:	ebb6 0e02 	subs.w	lr, r6, r2
 8000a1a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000a1e:	bf22      	ittt	cs
 8000a20:	1ab6      	subcs	r6, r6, r2
 8000a22:	4675      	movcs	r5, lr
 8000a24:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a28:	ea55 0e06 	orrs.w	lr, r5, r6
 8000a2c:	d018      	beq.n	8000a60 <__aeabi_ddiv+0x114>
 8000a2e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000a32:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000a36:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000a3a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000a3e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000a42:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000a46:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000a4a:	d1c0      	bne.n	80009ce <__aeabi_ddiv+0x82>
 8000a4c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a50:	d10b      	bne.n	8000a6a <__aeabi_ddiv+0x11e>
 8000a52:	ea41 0100 	orr.w	r1, r1, r0
 8000a56:	f04f 0000 	mov.w	r0, #0
 8000a5a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000a5e:	e7b6      	b.n	80009ce <__aeabi_ddiv+0x82>
 8000a60:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a64:	bf04      	itt	eq
 8000a66:	4301      	orreq	r1, r0
 8000a68:	2000      	moveq	r0, #0
 8000a6a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000a6e:	bf88      	it	hi
 8000a70:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000a74:	f63f aeaf 	bhi.w	80007d6 <__aeabi_dmul+0xde>
 8000a78:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a7c:	bf04      	itt	eq
 8000a7e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a82:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a86:	f150 0000 	adcs.w	r0, r0, #0
 8000a8a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a8e:	bd70      	pop	{r4, r5, r6, pc}
 8000a90:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a94:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a98:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a9c:	bfc2      	ittt	gt
 8000a9e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000aa2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000aa6:	bd70      	popgt	{r4, r5, r6, pc}
 8000aa8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000aac:	f04f 0e00 	mov.w	lr, #0
 8000ab0:	3c01      	subs	r4, #1
 8000ab2:	e690      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000ab4:	ea45 0e06 	orr.w	lr, r5, r6
 8000ab8:	e68d      	b.n	80007d6 <__aeabi_dmul+0xde>
 8000aba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000abe:	ea94 0f0c 	teq	r4, ip
 8000ac2:	bf08      	it	eq
 8000ac4:	ea95 0f0c 	teqeq	r5, ip
 8000ac8:	f43f af3b 	beq.w	8000942 <__aeabi_dmul+0x24a>
 8000acc:	ea94 0f0c 	teq	r4, ip
 8000ad0:	d10a      	bne.n	8000ae8 <__aeabi_ddiv+0x19c>
 8000ad2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000ad6:	f47f af34 	bne.w	8000942 <__aeabi_dmul+0x24a>
 8000ada:	ea95 0f0c 	teq	r5, ip
 8000ade:	f47f af25 	bne.w	800092c <__aeabi_dmul+0x234>
 8000ae2:	4610      	mov	r0, r2
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	e72c      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000ae8:	ea95 0f0c 	teq	r5, ip
 8000aec:	d106      	bne.n	8000afc <__aeabi_ddiv+0x1b0>
 8000aee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000af2:	f43f aefd 	beq.w	80008f0 <__aeabi_dmul+0x1f8>
 8000af6:	4610      	mov	r0, r2
 8000af8:	4619      	mov	r1, r3
 8000afa:	e722      	b.n	8000942 <__aeabi_dmul+0x24a>
 8000afc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000b00:	bf18      	it	ne
 8000b02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000b06:	f47f aec5 	bne.w	8000894 <__aeabi_dmul+0x19c>
 8000b0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000b0e:	f47f af0d 	bne.w	800092c <__aeabi_dmul+0x234>
 8000b12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000b16:	f47f aeeb 	bne.w	80008f0 <__aeabi_dmul+0x1f8>
 8000b1a:	e712      	b.n	8000942 <__aeabi_dmul+0x24a>

08000b1c <__gedf2>:
 8000b1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000b20:	e006      	b.n	8000b30 <__cmpdf2+0x4>
 8000b22:	bf00      	nop

08000b24 <__ledf2>:
 8000b24:	f04f 0c01 	mov.w	ip, #1
 8000b28:	e002      	b.n	8000b30 <__cmpdf2+0x4>
 8000b2a:	bf00      	nop

08000b2c <__cmpdf2>:
 8000b2c:	f04f 0c01 	mov.w	ip, #1
 8000b30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	bf18      	it	ne
 8000b42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000b46:	d01b      	beq.n	8000b80 <__cmpdf2+0x54>
 8000b48:	b001      	add	sp, #4
 8000b4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000b4e:	bf0c      	ite	eq
 8000b50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b54:	ea91 0f03 	teqne	r1, r3
 8000b58:	bf02      	ittt	eq
 8000b5a:	ea90 0f02 	teqeq	r0, r2
 8000b5e:	2000      	moveq	r0, #0
 8000b60:	4770      	bxeq	lr
 8000b62:	f110 0f00 	cmn.w	r0, #0
 8000b66:	ea91 0f03 	teq	r1, r3
 8000b6a:	bf58      	it	pl
 8000b6c:	4299      	cmppl	r1, r3
 8000b6e:	bf08      	it	eq
 8000b70:	4290      	cmpeq	r0, r2
 8000b72:	bf2c      	ite	cs
 8000b74:	17d8      	asrcs	r0, r3, #31
 8000b76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b7a:	f040 0001 	orr.w	r0, r0, #1
 8000b7e:	4770      	bx	lr
 8000b80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b88:	d102      	bne.n	8000b90 <__cmpdf2+0x64>
 8000b8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8e:	d107      	bne.n	8000ba0 <__cmpdf2+0x74>
 8000b90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b98:	d1d6      	bne.n	8000b48 <__cmpdf2+0x1c>
 8000b9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9e:	d0d3      	beq.n	8000b48 <__cmpdf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cdrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4610      	mov	r0, r2
 8000bac:	4662      	mov	r2, ip
 8000bae:	468c      	mov	ip, r1
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	4663      	mov	r3, ip
 8000bb4:	e000      	b.n	8000bb8 <__aeabi_cdcmpeq>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_cdcmpeq>:
 8000bb8:	b501      	push	{r0, lr}
 8000bba:	f7ff ffb7 	bl	8000b2c <__cmpdf2>
 8000bbe:	2800      	cmp	r0, #0
 8000bc0:	bf48      	it	mi
 8000bc2:	f110 0f00 	cmnmi.w	r0, #0
 8000bc6:	bd01      	pop	{r0, pc}

08000bc8 <__aeabi_dcmpeq>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff fff4 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bd0:	bf0c      	ite	eq
 8000bd2:	2001      	moveq	r0, #1
 8000bd4:	2000      	movne	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmplt>:
 8000bdc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000be0:	f7ff ffea 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000be4:	bf34      	ite	cc
 8000be6:	2001      	movcc	r0, #1
 8000be8:	2000      	movcs	r0, #0
 8000bea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bee:	bf00      	nop

08000bf0 <__aeabi_dcmple>:
 8000bf0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bf4:	f7ff ffe0 	bl	8000bb8 <__aeabi_cdcmpeq>
 8000bf8:	bf94      	ite	ls
 8000bfa:	2001      	movls	r0, #1
 8000bfc:	2000      	movhi	r0, #0
 8000bfe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c02:	bf00      	nop

08000c04 <__aeabi_dcmpge>:
 8000c04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c08:	f7ff ffce 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c0c:	bf94      	ite	ls
 8000c0e:	2001      	movls	r0, #1
 8000c10:	2000      	movhi	r0, #0
 8000c12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c16:	bf00      	nop

08000c18 <__aeabi_dcmpgt>:
 8000c18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c1c:	f7ff ffc4 	bl	8000ba8 <__aeabi_cdrcmple>
 8000c20:	bf34      	ite	cc
 8000c22:	2001      	movcc	r0, #1
 8000c24:	2000      	movcs	r0, #0
 8000c26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c2a:	bf00      	nop

08000c2c <__aeabi_dcmpun>:
 8000c2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c34:	d102      	bne.n	8000c3c <__aeabi_dcmpun+0x10>
 8000c36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000c3a:	d10a      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c44:	d102      	bne.n	8000c4c <__aeabi_dcmpun+0x20>
 8000c46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000c4a:	d102      	bne.n	8000c52 <__aeabi_dcmpun+0x26>
 8000c4c:	f04f 0000 	mov.w	r0, #0
 8000c50:	4770      	bx	lr
 8000c52:	f04f 0001 	mov.w	r0, #1
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_d2iz>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c60:	d215      	bcs.n	8000c8e <__aeabi_d2iz+0x36>
 8000c62:	d511      	bpl.n	8000c88 <__aeabi_d2iz+0x30>
 8000c64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c6c:	d912      	bls.n	8000c94 <__aeabi_d2iz+0x3c>
 8000c6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c82:	bf18      	it	ne
 8000c84:	4240      	negne	r0, r0
 8000c86:	4770      	bx	lr
 8000c88:	f04f 0000 	mov.w	r0, #0
 8000c8c:	4770      	bx	lr
 8000c8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c92:	d105      	bne.n	8000ca0 <__aeabi_d2iz+0x48>
 8000c94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c98:	bf08      	it	eq
 8000c9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c9e:	4770      	bx	lr
 8000ca0:	f04f 0000 	mov.w	r0, #0
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_d2f>:
 8000ca8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000cac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000cb0:	bf24      	itt	cs
 8000cb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000cb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000cba:	d90d      	bls.n	8000cd8 <__aeabi_d2f+0x30>
 8000cbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000cc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000cc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ccc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000cd0:	bf08      	it	eq
 8000cd2:	f020 0001 	biceq.w	r0, r0, #1
 8000cd6:	4770      	bx	lr
 8000cd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000cdc:	d121      	bne.n	8000d22 <__aeabi_d2f+0x7a>
 8000cde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ce2:	bfbc      	itt	lt
 8000ce4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000ce8:	4770      	bxlt	lr
 8000cea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000cee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000cf2:	f1c2 0218 	rsb	r2, r2, #24
 8000cf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000cfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000d02:	bf18      	it	ne
 8000d04:	f040 0001 	orrne.w	r0, r0, #1
 8000d08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000d10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000d14:	ea40 000c 	orr.w	r0, r0, ip
 8000d18:	fa23 f302 	lsr.w	r3, r3, r2
 8000d1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000d20:	e7cc      	b.n	8000cbc <__aeabi_d2f+0x14>
 8000d22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000d26:	d107      	bne.n	8000d38 <__aeabi_d2f+0x90>
 8000d28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000d2c:	bf1e      	ittt	ne
 8000d2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000d32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000d36:	4770      	bxne	lr
 8000d38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d44:	4770      	bx	lr
 8000d46:	bf00      	nop

08000d48 <__aeabi_uldivmod>:
 8000d48:	b953      	cbnz	r3, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4a:	b94a      	cbnz	r2, 8000d60 <__aeabi_uldivmod+0x18>
 8000d4c:	2900      	cmp	r1, #0
 8000d4e:	bf08      	it	eq
 8000d50:	2800      	cmpeq	r0, #0
 8000d52:	bf1c      	itt	ne
 8000d54:	f04f 31ff 	movne.w	r1, #4294967295
 8000d58:	f04f 30ff 	movne.w	r0, #4294967295
 8000d5c:	f000 b972 	b.w	8001044 <__aeabi_idiv0>
 8000d60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d68:	f000 f806 	bl	8000d78 <__udivmoddi4>
 8000d6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d74:	b004      	add	sp, #16
 8000d76:	4770      	bx	lr

08000d78 <__udivmoddi4>:
 8000d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d7c:	9e08      	ldr	r6, [sp, #32]
 8000d7e:	4604      	mov	r4, r0
 8000d80:	4688      	mov	r8, r1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d14b      	bne.n	8000e1e <__udivmoddi4+0xa6>
 8000d86:	428a      	cmp	r2, r1
 8000d88:	4615      	mov	r5, r2
 8000d8a:	d967      	bls.n	8000e5c <__udivmoddi4+0xe4>
 8000d8c:	fab2 f282 	clz	r2, r2
 8000d90:	b14a      	cbz	r2, 8000da6 <__udivmoddi4+0x2e>
 8000d92:	f1c2 0720 	rsb	r7, r2, #32
 8000d96:	fa01 f302 	lsl.w	r3, r1, r2
 8000d9a:	fa20 f707 	lsr.w	r7, r0, r7
 8000d9e:	4095      	lsls	r5, r2
 8000da0:	ea47 0803 	orr.w	r8, r7, r3
 8000da4:	4094      	lsls	r4, r2
 8000da6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000daa:	0c23      	lsrs	r3, r4, #16
 8000dac:	fbb8 f7fe 	udiv	r7, r8, lr
 8000db0:	fa1f fc85 	uxth.w	ip, r5
 8000db4:	fb0e 8817 	mls	r8, lr, r7, r8
 8000db8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dbc:	fb07 f10c 	mul.w	r1, r7, ip
 8000dc0:	4299      	cmp	r1, r3
 8000dc2:	d909      	bls.n	8000dd8 <__udivmoddi4+0x60>
 8000dc4:	18eb      	adds	r3, r5, r3
 8000dc6:	f107 30ff 	add.w	r0, r7, #4294967295
 8000dca:	f080 811b 	bcs.w	8001004 <__udivmoddi4+0x28c>
 8000dce:	4299      	cmp	r1, r3
 8000dd0:	f240 8118 	bls.w	8001004 <__udivmoddi4+0x28c>
 8000dd4:	3f02      	subs	r7, #2
 8000dd6:	442b      	add	r3, r5
 8000dd8:	1a5b      	subs	r3, r3, r1
 8000dda:	b2a4      	uxth	r4, r4
 8000ddc:	fbb3 f0fe 	udiv	r0, r3, lr
 8000de0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000de4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000de8:	fb00 fc0c 	mul.w	ip, r0, ip
 8000dec:	45a4      	cmp	ip, r4
 8000dee:	d909      	bls.n	8000e04 <__udivmoddi4+0x8c>
 8000df0:	192c      	adds	r4, r5, r4
 8000df2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x290>
 8000dfa:	45a4      	cmp	ip, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x290>
 8000e00:	3802      	subs	r0, #2
 8000e02:	442c      	add	r4, r5
 8000e04:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000e08:	eba4 040c 	sub.w	r4, r4, ip
 8000e0c:	2700      	movs	r7, #0
 8000e0e:	b11e      	cbz	r6, 8000e18 <__udivmoddi4+0xa0>
 8000e10:	40d4      	lsrs	r4, r2
 8000e12:	2300      	movs	r3, #0
 8000e14:	e9c6 4300 	strd	r4, r3, [r6]
 8000e18:	4639      	mov	r1, r7
 8000e1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0xbe>
 8000e22:	2e00      	cmp	r6, #0
 8000e24:	f000 80eb 	beq.w	8000ffe <__udivmoddi4+0x286>
 8000e28:	2700      	movs	r7, #0
 8000e2a:	e9c6 0100 	strd	r0, r1, [r6]
 8000e2e:	4638      	mov	r0, r7
 8000e30:	4639      	mov	r1, r7
 8000e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e36:	fab3 f783 	clz	r7, r3
 8000e3a:	2f00      	cmp	r7, #0
 8000e3c:	d147      	bne.n	8000ece <__udivmoddi4+0x156>
 8000e3e:	428b      	cmp	r3, r1
 8000e40:	d302      	bcc.n	8000e48 <__udivmoddi4+0xd0>
 8000e42:	4282      	cmp	r2, r0
 8000e44:	f200 80fa 	bhi.w	800103c <__udivmoddi4+0x2c4>
 8000e48:	1a84      	subs	r4, r0, r2
 8000e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e4e:	2001      	movs	r0, #1
 8000e50:	4698      	mov	r8, r3
 8000e52:	2e00      	cmp	r6, #0
 8000e54:	d0e0      	beq.n	8000e18 <__udivmoddi4+0xa0>
 8000e56:	e9c6 4800 	strd	r4, r8, [r6]
 8000e5a:	e7dd      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000e5c:	b902      	cbnz	r2, 8000e60 <__udivmoddi4+0xe8>
 8000e5e:	deff      	udf	#255	; 0xff
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	2a00      	cmp	r2, #0
 8000e66:	f040 808f 	bne.w	8000f88 <__udivmoddi4+0x210>
 8000e6a:	1b49      	subs	r1, r1, r5
 8000e6c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e70:	fa1f f885 	uxth.w	r8, r5
 8000e74:	2701      	movs	r7, #1
 8000e76:	fbb1 fcfe 	udiv	ip, r1, lr
 8000e7a:	0c23      	lsrs	r3, r4, #16
 8000e7c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000e80:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e84:	fb08 f10c 	mul.w	r1, r8, ip
 8000e88:	4299      	cmp	r1, r3
 8000e8a:	d907      	bls.n	8000e9c <__udivmoddi4+0x124>
 8000e8c:	18eb      	adds	r3, r5, r3
 8000e8e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x122>
 8000e94:	4299      	cmp	r1, r3
 8000e96:	f200 80cd 	bhi.w	8001034 <__udivmoddi4+0x2bc>
 8000e9a:	4684      	mov	ip, r0
 8000e9c:	1a59      	subs	r1, r3, r1
 8000e9e:	b2a3      	uxth	r3, r4
 8000ea0:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea4:	fb0e 1410 	mls	r4, lr, r0, r1
 8000ea8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000eac:	fb08 f800 	mul.w	r8, r8, r0
 8000eb0:	45a0      	cmp	r8, r4
 8000eb2:	d907      	bls.n	8000ec4 <__udivmoddi4+0x14c>
 8000eb4:	192c      	adds	r4, r5, r4
 8000eb6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000eba:	d202      	bcs.n	8000ec2 <__udivmoddi4+0x14a>
 8000ebc:	45a0      	cmp	r8, r4
 8000ebe:	f200 80b6 	bhi.w	800102e <__udivmoddi4+0x2b6>
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	eba4 0408 	sub.w	r4, r4, r8
 8000ec8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ecc:	e79f      	b.n	8000e0e <__udivmoddi4+0x96>
 8000ece:	f1c7 0c20 	rsb	ip, r7, #32
 8000ed2:	40bb      	lsls	r3, r7
 8000ed4:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ed8:	ea4e 0e03 	orr.w	lr, lr, r3
 8000edc:	fa01 f407 	lsl.w	r4, r1, r7
 8000ee0:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ee4:	fa21 f30c 	lsr.w	r3, r1, ip
 8000ee8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000eec:	4325      	orrs	r5, r4
 8000eee:	fbb3 f9f8 	udiv	r9, r3, r8
 8000ef2:	0c2c      	lsrs	r4, r5, #16
 8000ef4:	fb08 3319 	mls	r3, r8, r9, r3
 8000ef8:	fa1f fa8e 	uxth.w	sl, lr
 8000efc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000f00:	fb09 f40a 	mul.w	r4, r9, sl
 8000f04:	429c      	cmp	r4, r3
 8000f06:	fa02 f207 	lsl.w	r2, r2, r7
 8000f0a:	fa00 f107 	lsl.w	r1, r0, r7
 8000f0e:	d90b      	bls.n	8000f28 <__udivmoddi4+0x1b0>
 8000f10:	eb1e 0303 	adds.w	r3, lr, r3
 8000f14:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f18:	f080 8087 	bcs.w	800102a <__udivmoddi4+0x2b2>
 8000f1c:	429c      	cmp	r4, r3
 8000f1e:	f240 8084 	bls.w	800102a <__udivmoddi4+0x2b2>
 8000f22:	f1a9 0902 	sub.w	r9, r9, #2
 8000f26:	4473      	add	r3, lr
 8000f28:	1b1b      	subs	r3, r3, r4
 8000f2a:	b2ad      	uxth	r5, r5
 8000f2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f30:	fb08 3310 	mls	r3, r8, r0, r3
 8000f34:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000f38:	fb00 fa0a 	mul.w	sl, r0, sl
 8000f3c:	45a2      	cmp	sl, r4
 8000f3e:	d908      	bls.n	8000f52 <__udivmoddi4+0x1da>
 8000f40:	eb1e 0404 	adds.w	r4, lr, r4
 8000f44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000f48:	d26b      	bcs.n	8001022 <__udivmoddi4+0x2aa>
 8000f4a:	45a2      	cmp	sl, r4
 8000f4c:	d969      	bls.n	8001022 <__udivmoddi4+0x2aa>
 8000f4e:	3802      	subs	r0, #2
 8000f50:	4474      	add	r4, lr
 8000f52:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f56:	fba0 8902 	umull	r8, r9, r0, r2
 8000f5a:	eba4 040a 	sub.w	r4, r4, sl
 8000f5e:	454c      	cmp	r4, r9
 8000f60:	46c2      	mov	sl, r8
 8000f62:	464b      	mov	r3, r9
 8000f64:	d354      	bcc.n	8001010 <__udivmoddi4+0x298>
 8000f66:	d051      	beq.n	800100c <__udivmoddi4+0x294>
 8000f68:	2e00      	cmp	r6, #0
 8000f6a:	d069      	beq.n	8001040 <__udivmoddi4+0x2c8>
 8000f6c:	ebb1 050a 	subs.w	r5, r1, sl
 8000f70:	eb64 0403 	sbc.w	r4, r4, r3
 8000f74:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000f78:	40fd      	lsrs	r5, r7
 8000f7a:	40fc      	lsrs	r4, r7
 8000f7c:	ea4c 0505 	orr.w	r5, ip, r5
 8000f80:	e9c6 5400 	strd	r5, r4, [r6]
 8000f84:	2700      	movs	r7, #0
 8000f86:	e747      	b.n	8000e18 <__udivmoddi4+0xa0>
 8000f88:	f1c2 0320 	rsb	r3, r2, #32
 8000f8c:	fa20 f703 	lsr.w	r7, r0, r3
 8000f90:	4095      	lsls	r5, r2
 8000f92:	fa01 f002 	lsl.w	r0, r1, r2
 8000f96:	fa21 f303 	lsr.w	r3, r1, r3
 8000f9a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000f9e:	4338      	orrs	r0, r7
 8000fa0:	0c01      	lsrs	r1, r0, #16
 8000fa2:	fbb3 f7fe 	udiv	r7, r3, lr
 8000fa6:	fa1f f885 	uxth.w	r8, r5
 8000faa:	fb0e 3317 	mls	r3, lr, r7, r3
 8000fae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb2:	fb07 f308 	mul.w	r3, r7, r8
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	fa04 f402 	lsl.w	r4, r4, r2
 8000fbc:	d907      	bls.n	8000fce <__udivmoddi4+0x256>
 8000fbe:	1869      	adds	r1, r5, r1
 8000fc0:	f107 3cff 	add.w	ip, r7, #4294967295
 8000fc4:	d22f      	bcs.n	8001026 <__udivmoddi4+0x2ae>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d92d      	bls.n	8001026 <__udivmoddi4+0x2ae>
 8000fca:	3f02      	subs	r7, #2
 8000fcc:	4429      	add	r1, r5
 8000fce:	1acb      	subs	r3, r1, r3
 8000fd0:	b281      	uxth	r1, r0
 8000fd2:	fbb3 f0fe 	udiv	r0, r3, lr
 8000fd6:	fb0e 3310 	mls	r3, lr, r0, r3
 8000fda:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fde:	fb00 f308 	mul.w	r3, r0, r8
 8000fe2:	428b      	cmp	r3, r1
 8000fe4:	d907      	bls.n	8000ff6 <__udivmoddi4+0x27e>
 8000fe6:	1869      	adds	r1, r5, r1
 8000fe8:	f100 3cff 	add.w	ip, r0, #4294967295
 8000fec:	d217      	bcs.n	800101e <__udivmoddi4+0x2a6>
 8000fee:	428b      	cmp	r3, r1
 8000ff0:	d915      	bls.n	800101e <__udivmoddi4+0x2a6>
 8000ff2:	3802      	subs	r0, #2
 8000ff4:	4429      	add	r1, r5
 8000ff6:	1ac9      	subs	r1, r1, r3
 8000ff8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000ffc:	e73b      	b.n	8000e76 <__udivmoddi4+0xfe>
 8000ffe:	4637      	mov	r7, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e709      	b.n	8000e18 <__udivmoddi4+0xa0>
 8001004:	4607      	mov	r7, r0
 8001006:	e6e7      	b.n	8000dd8 <__udivmoddi4+0x60>
 8001008:	4618      	mov	r0, r3
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x8c>
 800100c:	4541      	cmp	r1, r8
 800100e:	d2ab      	bcs.n	8000f68 <__udivmoddi4+0x1f0>
 8001010:	ebb8 0a02 	subs.w	sl, r8, r2
 8001014:	eb69 020e 	sbc.w	r2, r9, lr
 8001018:	3801      	subs	r0, #1
 800101a:	4613      	mov	r3, r2
 800101c:	e7a4      	b.n	8000f68 <__udivmoddi4+0x1f0>
 800101e:	4660      	mov	r0, ip
 8001020:	e7e9      	b.n	8000ff6 <__udivmoddi4+0x27e>
 8001022:	4618      	mov	r0, r3
 8001024:	e795      	b.n	8000f52 <__udivmoddi4+0x1da>
 8001026:	4667      	mov	r7, ip
 8001028:	e7d1      	b.n	8000fce <__udivmoddi4+0x256>
 800102a:	4681      	mov	r9, r0
 800102c:	e77c      	b.n	8000f28 <__udivmoddi4+0x1b0>
 800102e:	3802      	subs	r0, #2
 8001030:	442c      	add	r4, r5
 8001032:	e747      	b.n	8000ec4 <__udivmoddi4+0x14c>
 8001034:	f1ac 0c02 	sub.w	ip, ip, #2
 8001038:	442b      	add	r3, r5
 800103a:	e72f      	b.n	8000e9c <__udivmoddi4+0x124>
 800103c:	4638      	mov	r0, r7
 800103e:	e708      	b.n	8000e52 <__udivmoddi4+0xda>
 8001040:	4637      	mov	r7, r6
 8001042:	e6e9      	b.n	8000e18 <__udivmoddi4+0xa0>

08001044 <__aeabi_idiv0>:
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop

08001048 <arm_sqrt_f32>:
   * <code>in</code> is negative value and returns zero output for negative values.
   */
  static __INLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001052:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001054:	edd7 7a01 	vldr	s15, [r7, #4]
 8001058:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800105c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001060:	db0a      	blt.n	8001078 <arm_sqrt_f32+0x30>
#if   (__FPU_USED == 1) && defined ( __CC_ARM   )
      *pOut = __sqrtf(in);
#elif (__FPU_USED == 1) && (defined(__ARMCC_VERSION) && (__ARMCC_VERSION >= 6010050))
      *pOut = __builtin_sqrtf(in);
#elif (__FPU_USED == 1) && defined(__GNUC__)
      *pOut = __builtin_sqrtf(in);
 8001062:	ed97 0a01 	vldr	s0, [r7, #4]
 8001066:	f00c fd05 	bl	800da74 <sqrtf>
 800106a:	eef0 7a40 	vmov.f32	s15, s0
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	edc3 7a00 	vstr	s15, [r3]
      __ASM("VSQRT.F32 %0,%1" : "=t"(*pOut) : "t"(in));
#else
      *pOut = sqrtf(in);
#endif

      return (ARM_MATH_SUCCESS);
 8001074:	2300      	movs	r3, #0
 8001076:	e005      	b.n	8001084 <arm_sqrt_f32+0x3c>
    }
    else
    {
      *pOut = 0.0f;
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8001080:	f04f 33ff 	mov.w	r3, #4294967295
    }
  }
 8001084:	4618      	mov	r0, r3
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <arm_cmplx_mag_f32>:

void arm_cmplx_mag_f32(
  float32_t * pSrc,
  float32_t * pDst,
  uint32_t numSamples)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b088      	sub	sp, #32
 8001090:	af00      	add	r7, sp, #0
 8001092:	60f8      	str	r0, [r7, #12]
 8001094:	60b9      	str	r1, [r7, #8]
 8001096:	607a      	str	r2, [r7, #4]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  uint32_t blkCnt;                               /* loop counter */

  /*loop Unrolling */
  blkCnt = numSamples >> 2u;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	61fb      	str	r3, [r7, #28]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 800109e:	e082      	b.n	80011a6 <arm_cmplx_mag_f32+0x11a>
  {

    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	1d1a      	adds	r2, r3, #4
 80010a4:	60fa      	str	r2, [r7, #12]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	1d1a      	adds	r2, r3, #4
 80010ae:	60fa      	str	r2, [r7, #12]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010b8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c0:	edd7 6a05 	vldr	s13, [r7, #20]
 80010c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80010c8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1d1a      	adds	r2, r3, #4
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	4618      	mov	r0, r3
 80010d8:	eeb0 0a67 	vmov.f32	s0, s15
 80010dc:	f7ff ffb4 	bl	8001048 <arm_sqrt_f32>

    realIn = *pSrc++;
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	1d1a      	adds	r2, r3, #4
 80010e4:	60fa      	str	r2, [r7, #12]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	1d1a      	adds	r2, r3, #4
 80010ee:	60fa      	str	r2, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80010f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80010f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	edd7 6a05 	vldr	s13, [r7, #20]
 8001104:	edd7 7a05 	vldr	s15, [r7, #20]
 8001108:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800110c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	1d1a      	adds	r2, r3, #4
 8001114:	60ba      	str	r2, [r7, #8]
 8001116:	4618      	mov	r0, r3
 8001118:	eeb0 0a67 	vmov.f32	s0, s15
 800111c:	f7ff ff94 	bl	8001048 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	1d1a      	adds	r2, r3, #4
 8001124:	60fa      	str	r2, [r7, #12]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	1d1a      	adds	r2, r3, #4
 800112e:	60fa      	str	r2, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001134:	ed97 7a06 	vldr	s14, [r7, #24]
 8001138:	edd7 7a06 	vldr	s15, [r7, #24]
 800113c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001140:	edd7 6a05 	vldr	s13, [r7, #20]
 8001144:	edd7 7a05 	vldr	s15, [r7, #20]
 8001148:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800114c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	1d1a      	adds	r2, r3, #4
 8001154:	60ba      	str	r2, [r7, #8]
 8001156:	4618      	mov	r0, r3
 8001158:	eeb0 0a67 	vmov.f32	s0, s15
 800115c:	f7ff ff74 	bl	8001048 <arm_sqrt_f32>

    realIn = *pSrc++;
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	1d1a      	adds	r2, r3, #4
 8001164:	60fa      	str	r2, [r7, #12]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	1d1a      	adds	r2, r3, #4
 800116e:	60fa      	str	r2, [r7, #12]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	617b      	str	r3, [r7, #20]
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 8001174:	ed97 7a06 	vldr	s14, [r7, #24]
 8001178:	edd7 7a06 	vldr	s15, [r7, #24]
 800117c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001180:	edd7 6a05 	vldr	s13, [r7, #20]
 8001184:	edd7 7a05 	vldr	s15, [r7, #20]
 8001188:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800118c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	1d1a      	adds	r2, r3, #4
 8001194:	60ba      	str	r2, [r7, #8]
 8001196:	4618      	mov	r0, r3
 8001198:	eeb0 0a67 	vmov.f32	s0, s15
 800119c:	f7ff ff54 	bl	8001048 <arm_sqrt_f32>


    /* Decrement the loop counter */
    blkCnt--;
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f47f af79 	bne.w	80010a0 <arm_cmplx_mag_f32+0x14>
  }

  /* If the numSamples is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = numSamples % 0x4u;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f003 0303 	and.w	r3, r3, #3
 80011b4:	61fb      	str	r3, [r7, #28]

  while(blkCnt > 0u)
 80011b6:	e022      	b.n	80011fe <arm_cmplx_mag_f32+0x172>
  {
    /* C[0] = sqrt(A[0] * A[0] + A[1] * A[1]) */
    realIn = *pSrc++;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	1d1a      	adds	r2, r3, #4
 80011bc:	60fa      	str	r2, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
    imagIn = *pSrc++;
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	1d1a      	adds	r2, r3, #4
 80011c6:	60fa      	str	r2, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	617b      	str	r3, [r7, #20]
    /* store the result in the destination buffer. */
    arm_sqrt_f32((realIn * realIn) + (imagIn * imagIn), pDst++);
 80011cc:	ed97 7a06 	vldr	s14, [r7, #24]
 80011d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80011d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80011dc:	edd7 7a05 	vldr	s15, [r7, #20]
 80011e0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1d1a      	adds	r2, r3, #4
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	4618      	mov	r0, r3
 80011f0:	eeb0 0a67 	vmov.f32	s0, s15
 80011f4:	f7ff ff28 	bl	8001048 <arm_sqrt_f32>

    /* Decrement the loop counter */
    blkCnt--;
 80011f8:	69fb      	ldr	r3, [r7, #28]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	61fb      	str	r3, [r7, #28]
  while(blkCnt > 0u)
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d1d9      	bne.n	80011b8 <arm_cmplx_mag_f32+0x12c>
    numSamples--;
  }

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

}
 8001204:	bf00      	nop
 8001206:	3720      	adds	r7, #32
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}

0800120c <arm_max_f32>:
void arm_max_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 800120c:	b480      	push	{r7}
 800120e:	b08b      	sub	sp, #44	; 0x2c
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	603b      	str	r3, [r7, #0]
  /* Run the below code for Cortex-M4 and Cortex-M3 */
  float32_t maxVal1, maxVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 800121a:	2300      	movs	r3, #0
 800121c:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	1d1a      	adds	r2, r3, #4
 8001226:	60fa      	str	r2, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	3b01      	subs	r3, #1
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	623b      	str	r3, [r7, #32]

  /* Run the below code for Cortex-M4 and Cortex-M3 */
  while(blkCnt > 0u)
 8001234:	e051      	b.n	80012da <arm_max_f32+0xce>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	1d1a      	adds	r2, r3, #4
 800123a:	60fa      	str	r2, [r7, #12]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	617b      	str	r3, [r7, #20]

    maxVal2 = *pSrc++;
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	1d1a      	adds	r2, r3, #4
 8001244:	60fa      	str	r2, [r7, #12]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 800124a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800124e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001252:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800125a:	d504      	bpl.n	8001266 <arm_max_f32+0x5a>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	3301      	adds	r3, #1
 8001264:	61fb      	str	r3, [r7, #28]
    }

    maxVal1 = *pSrc++;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	1d1a      	adds	r2, r3, #4
 800126a:	60fa      	str	r2, [r7, #12]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal2)
 8001270:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001274:	edd7 7a04 	vldr	s15, [r7, #16]
 8001278:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001280:	d504      	bpl.n	800128c <arm_max_f32+0x80>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	3302      	adds	r3, #2
 800128a:	61fb      	str	r3, [r7, #28]
    }

    maxVal2 = *pSrc++;
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	1d1a      	adds	r2, r3, #4
 8001290:	60fa      	str	r2, [r7, #12]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	613b      	str	r3, [r7, #16]

    /* compare for the maximum value */
    if(out < maxVal1)
 8001296:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800129a:	edd7 7a05 	vldr	s15, [r7, #20]
 800129e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a6:	d504      	bpl.n	80012b2 <arm_max_f32+0xa6>
    {
      /* Update the maximum value and its index */
      out = maxVal1;
 80012a8:	697b      	ldr	r3, [r7, #20]
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80012ac:	69bb      	ldr	r3, [r7, #24]
 80012ae:	3303      	adds	r3, #3
 80012b0:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the maximum value */
    if(out < maxVal2)
 80012b2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012b6:	edd7 7a04 	vldr	s15, [r7, #16]
 80012ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80012be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012c2:	d504      	bpl.n	80012ce <arm_max_f32+0xc2>
    {
      /* Update the maximum value and its index */
      out = maxVal2;
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	3304      	adds	r3, #4
 80012cc:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80012ce:	69bb      	ldr	r3, [r7, #24]
 80012d0:	3304      	adds	r3, #4
 80012d2:	61bb      	str	r3, [r7, #24]

    /* Decrement the loop counter */
    blkCnt--;
 80012d4:	6a3b      	ldr	r3, [r7, #32]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 80012da:	6a3b      	ldr	r3, [r7, #32]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1aa      	bne.n	8001236 <arm_max_f32+0x2a>
  }

  /* if (blockSize - 1u) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	3b01      	subs	r3, #1
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 80012ea:	e016      	b.n	800131a <arm_max_f32+0x10e>
  {
    /* Initialize maxVal to the next consecutive values one by one */
    maxVal1 = *pSrc++;
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	1d1a      	adds	r2, r3, #4
 80012f0:	60fa      	str	r2, [r7, #12]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	617b      	str	r3, [r7, #20]

    /* compare for the maximum value */
    if(out < maxVal1)
 80012f6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80012fa:	edd7 7a05 	vldr	s15, [r7, #20]
 80012fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001306:	d505      	bpl.n	8001314 <arm_max_f32+0x108>
    {
      /* Update the maximum value and it's index */
      out = maxVal1;
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 800130c:	68ba      	ldr	r2, [r7, #8]
 800130e:	6a3b      	ldr	r3, [r7, #32]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	61fb      	str	r3, [r7, #28]
    }


    /* Decrement the loop counter */
    blkCnt--;
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3b01      	subs	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0u)
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e5      	bne.n	80012ec <arm_max_f32+0xe0>

  }

  /* Store the maximum value and it's index into destination pointers */
  *pResult = out;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001324:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	69fa      	ldr	r2, [r7, #28]
 800132a:	601a      	str	r2, [r3, #0]
}
 800132c:	bf00      	nop
 800132e:	372c      	adds	r7, #44	; 0x2c
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr

08001338 <arm_min_f32>:
void arm_min_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult,
  uint32_t * pIndex)
{
 8001338:	b480      	push	{r7}
 800133a:	b08b      	sub	sp, #44	; 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
 8001344:	603b      	str	r3, [r7, #0]

  float32_t minVal1, minVal2, out;               /* Temporary variables to store the output value. */
  uint32_t blkCnt, outIndex, count;              /* loop counter */

  /* Initialise the count value. */
  count = 0u;
 8001346:	2300      	movs	r3, #0
 8001348:	61bb      	str	r3, [r7, #24]
  /* Initialise the index value to zero. */
  outIndex = 0u;
 800134a:	2300      	movs	r3, #0
 800134c:	61fb      	str	r3, [r7, #28]
  /* Load first input value that act as reference value for comparision */
  out = *pSrc++;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1d1a      	adds	r2, r3, #4
 8001352:	60fa      	str	r2, [r7, #12]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	627b      	str	r3, [r7, #36]	; 0x24

  /* Loop unrolling */
  blkCnt = (blockSize - 1u) >> 2u;
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	3b01      	subs	r3, #1
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	623b      	str	r3, [r7, #32]

  while(blkCnt > 0)
 8001360:	e051      	b.n	8001406 <arm_min_f32+0xce>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001362:	68fb      	ldr	r3, [r7, #12]
 8001364:	1d1a      	adds	r2, r3, #4
 8001366:	60fa      	str	r2, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	617b      	str	r3, [r7, #20]
    minVal2 = *pSrc++;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	1d1a      	adds	r2, r3, #4
 8001370:	60fa      	str	r2, [r7, #12]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 8001376:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800137a:	edd7 7a05 	vldr	s15, [r7, #20]
 800137e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001386:	dd04      	ble.n	8001392 <arm_min_f32+0x5a>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 1u;
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	3301      	adds	r3, #1
 8001390:	61fb      	str	r3, [r7, #28]
    }

    minVal1 = *pSrc++;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	1d1a      	adds	r2, r3, #4
 8001396:	60fa      	str	r2, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal2)
 800139c:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013a0:	edd7 7a04 	vldr	s15, [r7, #16]
 80013a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ac:	dd04      	ble.n	80013b8 <arm_min_f32+0x80>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 2u;
 80013b2:	69bb      	ldr	r3, [r7, #24]
 80013b4:	3302      	adds	r3, #2
 80013b6:	61fb      	str	r3, [r7, #28]
    }

    minVal2 = *pSrc++;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	1d1a      	adds	r2, r3, #4
 80013bc:	60fa      	str	r2, [r7, #12]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	613b      	str	r3, [r7, #16]

    /* compare for the minimum value */
    if(out > minVal1)
 80013c2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013c6:	edd7 7a05 	vldr	s15, [r7, #20]
 80013ca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	dd04      	ble.n	80013de <arm_min_f32+0xa6>
    {
      /* Update the minimum value and its index */
      out = minVal1;
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 3u;
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	3303      	adds	r3, #3
 80013dc:	61fb      	str	r3, [r7, #28]
    }

    /* compare for the minimum value */
    if(out > minVal2)
 80013de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80013e2:	edd7 7a04 	vldr	s15, [r7, #16]
 80013e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80013ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013ee:	dd04      	ble.n	80013fa <arm_min_f32+0xc2>
    {
      /* Update the minimum value and its index */
      out = minVal2;
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = count + 4u;
 80013f4:	69bb      	ldr	r3, [r7, #24]
 80013f6:	3304      	adds	r3, #4
 80013f8:	61fb      	str	r3, [r7, #28]
    }

    count += 4u;
 80013fa:	69bb      	ldr	r3, [r7, #24]
 80013fc:	3304      	adds	r3, #4
 80013fe:	61bb      	str	r3, [r7, #24]

    blkCnt--;
 8001400:	6a3b      	ldr	r3, [r7, #32]
 8001402:	3b01      	subs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8001406:	6a3b      	ldr	r3, [r7, #32]
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1aa      	bne.n	8001362 <arm_min_f32+0x2a>
  }

  /* if (blockSize - 1u ) is not multiple of 4 */
  blkCnt = (blockSize - 1u) % 4u;
 800140c:	68bb      	ldr	r3, [r7, #8]
 800140e:	3b01      	subs	r3, #1
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	623b      	str	r3, [r7, #32]

  blkCnt = (blockSize - 1u);

#endif //      #ifndef ARM_MATH_CM0_FAMILY

  while(blkCnt > 0)
 8001416:	e016      	b.n	8001446 <arm_min_f32+0x10e>
  {
    /* Initialize minVal to the next consecutive values one by one */
    minVal1 = *pSrc++;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	1d1a      	adds	r2, r3, #4
 800141c:	60fa      	str	r2, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	617b      	str	r3, [r7, #20]

    /* compare for the minimum value */
    if(out > minVal1)
 8001422:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001426:	edd7 7a05 	vldr	s15, [r7, #20]
 800142a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800142e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001432:	dd05      	ble.n	8001440 <arm_min_f32+0x108>
    {
      /* Update the minimum value and it's index */
      out = minVal1;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	627b      	str	r3, [r7, #36]	; 0x24
      outIndex = blockSize - blkCnt;
 8001438:	68ba      	ldr	r2, [r7, #8]
 800143a:	6a3b      	ldr	r3, [r7, #32]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	61fb      	str	r3, [r7, #28]
    }

    blkCnt--;
 8001440:	6a3b      	ldr	r3, [r7, #32]
 8001442:	3b01      	subs	r3, #1
 8001444:	623b      	str	r3, [r7, #32]
  while(blkCnt > 0)
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d1e5      	bne.n	8001418 <arm_min_f32+0xe0>

  }

  /* Store the minimum value and it's index into destination pointers */
  *pResult = out;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001450:	601a      	str	r2, [r3, #0]
  *pIndex = outIndex;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	69fa      	ldr	r2, [r7, #28]
 8001456:	601a      	str	r2, [r3, #0]
}
 8001458:	bf00      	nop
 800145a:	372c      	adds	r7, #44	; 0x2c
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <arm_sqrt_f32>:
  {
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	ed87 0a01 	vstr	s0, [r7, #4]
 800146e:	6038      	str	r0, [r7, #0]
    if(in >= 0.0f)
 8001470:	edd7 7a01 	vldr	s15, [r7, #4]
 8001474:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001478:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800147c:	db0a      	blt.n	8001494 <arm_sqrt_f32+0x30>
      *pOut = __builtin_sqrtf(in);
 800147e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001482:	f00c faf7 	bl	800da74 <sqrtf>
 8001486:	eef0 7a40 	vmov.f32	s15, s0
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8001490:	2300      	movs	r3, #0
 8001492:	e005      	b.n	80014a0 <arm_sqrt_f32+0x3c>
      *pOut = 0.0f;
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	f04f 0200 	mov.w	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 800149c:	f04f 33ff 	mov.w	r3, #4294967295
  }
 80014a0:	4618      	mov	r0, r3
 80014a2:	3708      	adds	r7, #8
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}

080014a8 <arm_rms_f32>:

void arm_rms_f32(
  float32_t * pSrc,
  uint32_t blockSize,
  float32_t * pResult)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	60f8      	str	r0, [r7, #12]
 80014b0:	60b9      	str	r1, [r7, #8]
 80014b2:	607a      	str	r2, [r7, #4]
  float32_t sum = 0.0f;                          /* Accumulator */
 80014b4:	f04f 0300 	mov.w	r3, #0
 80014b8:	61fb      	str	r3, [r7, #28]
#ifndef ARM_MATH_CM0_FAMILY

  /* Run the below code for Cortex-M4 and Cortex-M3 */

  /* loop Unrolling */
  blkCnt = blockSize >> 2u;
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	089b      	lsrs	r3, r3, #2
 80014be:	61bb      	str	r3, [r7, #24]

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.    
   ** a second loop below computes the remaining 1 to 3 samples. */
  while(blkCnt > 0u)
 80014c0:	e046      	b.n	8001550 <arm_rms_f32+0xa8>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the result in a temporary variable, sum  */
    in = *pSrc++;
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	1d1a      	adds	r2, r3, #4
 80014c6:	60fa      	str	r2, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80014d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	1d1a      	adds	r2, r3, #4
 80014e8:	60fa      	str	r2, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	617b      	str	r3, [r7, #20]
    sum += in * in;
 80014ee:	ed97 7a05 	vldr	s14, [r7, #20]
 80014f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80014f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014fa:	ed97 7a07 	vldr	s14, [r7, #28]
 80014fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001502:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1d1a      	adds	r2, r3, #4
 800150a:	60fa      	str	r2, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001510:	ed97 7a05 	vldr	s14, [r7, #20]
 8001514:	edd7 7a05 	vldr	s15, [r7, #20]
 8001518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800151c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001520:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001524:	edc7 7a07 	vstr	s15, [r7, #28]
    in = *pSrc++;
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	60fa      	str	r2, [r7, #12]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	617b      	str	r3, [r7, #20]
    sum += in * in;
 8001532:	ed97 7a05 	vldr	s14, [r7, #20]
 8001536:	edd7 7a05 	vldr	s15, [r7, #20]
 800153a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800153e:	ed97 7a07 	vldr	s14, [r7, #28]
 8001542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001546:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 800154a:	69bb      	ldr	r3, [r7, #24]
 800154c:	3b01      	subs	r3, #1
 800154e:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d1b5      	bne.n	80014c2 <arm_rms_f32+0x1a>
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.    
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4u;
 8001556:	68bb      	ldr	r3, [r7, #8]
 8001558:	f003 0303 	and.w	r3, r3, #3
 800155c:	61bb      	str	r3, [r7, #24]
  /* Loop over blockSize number of values */
  blkCnt = blockSize;

#endif /* #ifndef ARM_MATH_CM0_FAMILY */

  while(blkCnt > 0u)
 800155e:	e013      	b.n	8001588 <arm_rms_f32+0xe0>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + A[2] * A[2] + ... + A[blockSize-1] * A[blockSize-1] */
    /* Compute sum of the squares and then store the results in a temporary variable, sum  */
    in = *pSrc++;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	1d1a      	adds	r2, r3, #4
 8001564:	60fa      	str	r2, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	617b      	str	r3, [r7, #20]
    sum += in * in;
 800156a:	ed97 7a05 	vldr	s14, [r7, #20]
 800156e:	edd7 7a05 	vldr	s15, [r7, #20]
 8001572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001576:	ed97 7a07 	vldr	s14, [r7, #28]
 800157a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800157e:	edc7 7a07 	vstr	s15, [r7, #28]

    /* Decrement the loop counter */
    blkCnt--;
 8001582:	69bb      	ldr	r3, [r7, #24]
 8001584:	3b01      	subs	r3, #1
 8001586:	61bb      	str	r3, [r7, #24]
  while(blkCnt > 0u)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d1e8      	bne.n	8001560 <arm_rms_f32+0xb8>
  }

  /* Compute Rms and store the result in the destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	ee07 3a90 	vmov	s15, r3
 8001594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001598:	ed97 7a07 	vldr	s14, [r7, #28]
 800159c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	eeb0 0a66 	vmov.f32	s0, s13
 80015a6:	f7ff ff5d 	bl	8001464 <arm_sqrt_f32>
}
 80015aa:	bf00      	nop
 80015ac:	3720      	adds	r7, #32
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <arm_cfft_radix8by2_f32>:
* \endcode
* 
*/

void arm_cfft_radix8by2_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 80015b2:	b580      	push	{r7, lr}
 80015b4:	b0a0      	sub	sp, #128	; 0x80
 80015b6:	af00      	add	r7, sp, #0
 80015b8:	6078      	str	r0, [r7, #4]
 80015ba:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	881b      	ldrh	r3, [r3, #0]
 80015c0:	66bb      	str	r3, [r7, #104]	; 0x68
    float32_t * pCol1, * pCol2, * pMid1, * pMid2;
    float32_t * p2 = p1 + L;
 80015c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015c4:	009b      	lsls	r3, r3, #2
 80015c6:	683a      	ldr	r2, [r7, #0]
 80015c8:	4413      	add	r3, r2
 80015ca:	677b      	str	r3, [r7, #116]	; 0x74
    const float32_t * tw = (float32_t *) S->pTwiddle;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	673b      	str	r3, [r7, #112]	; 0x70
    float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
    float32_t m0, m1, m2, m3;
    uint32_t l;

    pCol1 = p1;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	667b      	str	r3, [r7, #100]	; 0x64
    pCol2 = p2;
 80015d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80015d8:	663b      	str	r3, [r7, #96]	; 0x60

    //    Define new length
    L >>= 1;
 80015da:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015dc:	085b      	lsrs	r3, r3, #1
 80015de:	66bb      	str	r3, [r7, #104]	; 0x68
    //    Initialize mid pointers
    pMid1 = p1 + L;
 80015e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015e2:	009b      	lsls	r3, r3, #2
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	67fb      	str	r3, [r7, #124]	; 0x7c
    pMid2 = p2 + L;
 80015ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80015f0:	4413      	add	r3, r2
 80015f2:	67bb      	str	r3, [r7, #120]	; 0x78

    // do two dot Fourier transform
    for ( l = L >> 2; l > 0; l-- ) 
 80015f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80015f6:	089b      	lsrs	r3, r3, #2
 80015f8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80015fa:	e1b6      	b.n	800196a <arm_cfft_radix8by2_f32+0x3b8>
    {
        t1[0] = p1[0];
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	63bb      	str	r3, [r7, #56]	; 0x38
        t1[1] = p1[1];
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	63fb      	str	r3, [r7, #60]	; 0x3c
        t1[2] = p1[2];
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	643b      	str	r3, [r7, #64]	; 0x40
        t1[3] = p1[3];
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	647b      	str	r3, [r7, #68]	; 0x44

        t2[0] = p2[0];
 8001614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	62bb      	str	r3, [r7, #40]	; 0x28
        t2[1] = p2[1];
 800161a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
        t2[2] = p2[2];
 8001620:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	633b      	str	r3, [r7, #48]	; 0x30
        t2[3] = p2[3];
 8001626:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001628:	68db      	ldr	r3, [r3, #12]
 800162a:	637b      	str	r3, [r7, #52]	; 0x34

        t3[0] = pMid1[0];
 800162c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	61bb      	str	r3, [r7, #24]
        t3[1] = pMid1[1];
 8001632:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	61fb      	str	r3, [r7, #28]
        t3[2] = pMid1[2];
 8001638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	623b      	str	r3, [r7, #32]
        t3[3] = pMid1[3];
 800163e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001640:	68db      	ldr	r3, [r3, #12]
 8001642:	627b      	str	r3, [r7, #36]	; 0x24

        t4[0] = pMid2[0];
 8001644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60bb      	str	r3, [r7, #8]
        t4[1] = pMid2[1];
 800164a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	60fb      	str	r3, [r7, #12]
        t4[2] = pMid2[2];
 8001650:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	613b      	str	r3, [r7, #16]
        t4[3] = pMid2[3];
 8001656:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001658:	68db      	ldr	r3, [r3, #12]
 800165a:	617b      	str	r3, [r7, #20]

        *p1++ = t1[0] + t2[0];
 800165c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001660:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	1d1a      	adds	r2, r3, #4
 8001668:	603a      	str	r2, [r7, #0]
 800166a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800166e:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[1] + t2[1];
 8001672:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8001676:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	1d1a      	adds	r2, r3, #4
 800167e:	603a      	str	r2, [r7, #0]
 8001680:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001684:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[2] + t2[2];
 8001688:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800168c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	1d1a      	adds	r2, r3, #4
 8001694:	603a      	str	r2, [r7, #0]
 8001696:	ee77 7a27 	vadd.f32	s15, s14, s15
 800169a:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = t1[3] + t2[3];    // col 1
 800169e:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80016a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	1d1a      	adds	r2, r3, #4
 80016aa:	603a      	str	r2, [r7, #0]
 80016ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b0:	edc3 7a00 	vstr	s15, [r3]

        t2[0] = t1[0] - t2[0];
 80016b4:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80016b8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80016bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016c0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        t2[1] = t1[1] - t2[1];
 80016c4:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80016c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80016cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[2] = t1[2] - t2[2];
 80016d4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80016d8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80016dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        t2[3] = t1[3] - t2[3];    // for col 2
 80016e4:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 80016e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80016ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

        *pMid1++ = t3[0] + t4[0];
 80016f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80016f8:	edd7 7a02 	vldr	s15, [r7, #8]
 80016fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016fe:	1d1a      	adds	r2, r3, #4
 8001700:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001706:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[1] + t4[1];
 800170a:	ed97 7a07 	vldr	s14, [r7, #28]
 800170e:	edd7 7a03 	vldr	s15, [r7, #12]
 8001712:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001714:	1d1a      	adds	r2, r3, #4
 8001716:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800171c:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[2] + t4[2];
 8001720:	ed97 7a08 	vldr	s14, [r7, #32]
 8001724:	edd7 7a04 	vldr	s15, [r7, #16]
 8001728:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800172a:	1d1a      	adds	r2, r3, #4
 800172c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800172e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001732:	edc3 7a00 	vstr	s15, [r3]
        *pMid1++ = t3[3] + t4[3]; // col 1
 8001736:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800173a:	edd7 7a05 	vldr	s15, [r7, #20]
 800173e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001740:	1d1a      	adds	r2, r3, #4
 8001742:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001748:	edc3 7a00 	vstr	s15, [r3]

        t4[0] = t4[0] - t3[0];
 800174c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001750:	edd7 7a06 	vldr	s15, [r7, #24]
 8001754:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001758:	edc7 7a02 	vstr	s15, [r7, #8]
        t4[1] = t4[1] - t3[1];
 800175c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001760:	edd7 7a07 	vldr	s15, [r7, #28]
 8001764:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001768:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[2] = t4[2] - t3[2];
 800176c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001770:	edd7 7a08 	vldr	s15, [r7, #32]
 8001774:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001778:	edc7 7a04 	vstr	s15, [r7, #16]
        t4[3] = t4[3] - t3[3];    // for col 2
 800177c:	ed97 7a05 	vldr	s14, [r7, #20]
 8001780:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	edc7 7a05 	vstr	s15, [r7, #20]

        twR = *tw++;
 800178c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800178e:	1d1a      	adds	r2, r3, #4
 8001790:	673a      	str	r2, [r7, #112]	; 0x70
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001796:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001798:	1d1a      	adds	r2, r3, #4
 800179a:	673a      	str	r2, [r7, #112]	; 0x70
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	65bb      	str	r3, [r7, #88]	; 0x58

        // multiply by twiddle factors
        m0 = t2[0] * twR;
 80017a0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017a4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[1] * twI;
 80017b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017b4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017bc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[1] * twR;
 80017c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80017c4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80017c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017cc:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[0] * twI;
 80017d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80017d4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80017d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017dc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        // R  =  R  *  Tr - I * Ti
        *p2++ = m0 + m1;
 80017e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017e2:	1d1a      	adds	r2, r3, #4
 80017e4:	677a      	str	r2, [r7, #116]	; 0x74
 80017e6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80017ea:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80017ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017f2:	edc3 7a00 	vstr	s15, [r3]
        // I  =  I  *  Tr + R * Ti
        *p2++ = m2 - m3;
 80017f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017f8:	1d1a      	adds	r2, r3, #4
 80017fa:	677a      	str	r2, [r7, #116]	; 0x74
 80017fc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001800:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001804:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001808:	edc3 7a00 	vstr	s15, [r3]
        
        // use vertical symmetry
        //  0.9988 - 0.0491i <==> -0.0491 - 0.9988i
        m0 = t4[0] * twI;
 800180c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001810:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001814:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001818:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[1] * twR;
 800181c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001820:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[1] * twI;
 800182c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001830:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001838:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[0] * twR;
 800183c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001840:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001848:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 800184c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800184e:	1d1a      	adds	r2, r3, #4
 8001850:	67ba      	str	r2, [r7, #120]	; 0x78
 8001852:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001856:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800185a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185e:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 8001862:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001864:	1d1a      	adds	r2, r3, #4
 8001866:	67ba      	str	r2, [r7, #120]	; 0x78
 8001868:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800186c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8001870:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001874:	edc3 7a00 	vstr	s15, [r3]

        twR = *tw++;
 8001878:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800187a:	1d1a      	adds	r2, r3, #4
 800187c:	673a      	str	r2, [r7, #112]	; 0x70
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	65fb      	str	r3, [r7, #92]	; 0x5c
        twI = *tw++;
 8001882:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001884:	1d1a      	adds	r2, r3, #4
 8001886:	673a      	str	r2, [r7, #112]	; 0x70
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	65bb      	str	r3, [r7, #88]	; 0x58
        
        m0 = t2[2] * twR;
 800188c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001890:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001894:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001898:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t2[3] * twI;
 800189c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018a0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018a8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t2[3] * twR;
 80018ac:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80018b0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80018b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018b8:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t2[2] * twI;
 80018bc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 80018c0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 80018c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018c8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *p2++ = m0 + m1;
 80018cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018ce:	1d1a      	adds	r2, r3, #4
 80018d0:	677a      	str	r2, [r7, #116]	; 0x74
 80018d2:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80018d6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80018da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018de:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 80018e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80018e4:	1d1a      	adds	r2, r3, #4
 80018e6:	677a      	str	r2, [r7, #116]	; 0x74
 80018e8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80018ec:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80018f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f4:	edc3 7a00 	vstr	s15, [r3]
        
        m0 = t4[2] * twI;
 80018f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80018fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001900:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001904:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        m1 = t4[3] * twR;
 8001908:	edd7 7a05 	vldr	s15, [r7, #20]
 800190c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001910:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001914:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        m2 = t4[3] * twI;
 8001918:	edd7 7a05 	vldr	s15, [r7, #20]
 800191c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
        m3 = t4[2] * twR;
 8001928:	edd7 7a04 	vldr	s15, [r7, #16]
 800192c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001934:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        
        *pMid2++ = m0 - m1;
 8001938:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800193a:	1d1a      	adds	r2, r3, #4
 800193c:	67ba      	str	r2, [r7, #120]	; 0x78
 800193e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001942:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8001946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194a:	edc3 7a00 	vstr	s15, [r3]
        *pMid2++ = m2 + m3;
 800194e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001950:	1d1a      	adds	r2, r3, #4
 8001952:	67ba      	str	r2, [r7, #120]	; 0x78
 8001954:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001958:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800195c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001960:	edc3 7a00 	vstr	s15, [r3]
    for ( l = L >> 2; l > 0; l-- ) 
 8001964:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001966:	3b01      	subs	r3, #1
 8001968:	66fb      	str	r3, [r7, #108]	; 0x6c
 800196a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800196c:	2b00      	cmp	r3, #0
 800196e:	f47f ae45 	bne.w	80015fc <arm_cfft_radix8by2_f32+0x4a>
    }

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 2u);
 8001972:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001974:	b299      	uxth	r1, r3
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	685a      	ldr	r2, [r3, #4]
 800197a:	2302      	movs	r3, #2
 800197c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800197e:	f000 fedb 	bl	8002738 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 2u);
 8001982:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001984:	b299      	uxth	r1, r3
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	2302      	movs	r3, #2
 800198c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800198e:	f000 fed3 	bl	8002738 <arm_radix8_butterfly_f32>
}
 8001992:	bf00      	nop
 8001994:	3780      	adds	r7, #128	; 0x80
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32( arm_cfft_instance_f32 * S, float32_t * p1) 
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b0ac      	sub	sp, #176	; 0xb0
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	881b      	ldrh	r3, [r3, #0]
 80019a8:	085b      	lsrs	r3, r3, #1
 80019aa:	b29b      	uxth	r3, r3
 80019ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 80019b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	683a      	ldr	r2, [r7, #0]
 80019b8:	4413      	add	r3, r2
 80019ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 80019be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80019c8:	4413      	add	r3, r2
 80019ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 80019ce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80019d8:	4413      	add	r3, r2
 80019da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         // points to real values by default
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 80019e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019e6:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 80019e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80019ec:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 80019ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80019f2:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     // points to imaginary values by default
 80019f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019f8:	3b04      	subs	r3, #4
 80019fa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 80019fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a02:	3b04      	subs	r3, #4
 8001a04:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 8001a08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001a0c:	3b04      	subs	r3, #4
 8001a0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 8001a12:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8001a1c:	4413      	add	r3, r2
 8001a1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001a2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001a2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001a36:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 8001a3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001a3e:	085b      	lsrs	r3, r3, #1
 8001a40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    // do four dot Fourier transform

    twMod2 = 2;
 8001a44:	2302      	movs	r3, #2
 8001a46:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 8001a48:	2304      	movs	r3, #4
 8001a4a:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 8001a4c:	2306      	movs	r3, #6
 8001a4e:	667b      	str	r3, [r7, #100]	; 0x64

    // TOP
    p1ap3_0 = p1[0] + p3[0];
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	ed93 7a00 	vldr	s14, [r3]
 8001a56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a5a:	edd3 7a00 	vldr	s15, [r3]
 8001a5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a62:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	ed93 7a00 	vldr	s14, [r3]
 8001a6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a78:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	3304      	adds	r3, #4
 8001a80:	ed93 7a00 	vldr	s14, [r3]
 8001a84:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001a88:	3304      	adds	r3, #4
 8001a8a:	edd3 7a00 	vldr	s15, [r3]
 8001a8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a92:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	ed93 7a00 	vldr	s14, [r3]
 8001a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001aa2:	3304      	adds	r3, #4
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001aac:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001ab0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ab4:	3304      	adds	r3, #4
 8001ab6:	ed93 7a00 	vldr	s14, [r3]
 8001aba:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ac6:	3304      	adds	r3, #4
 8001ac8:	edd3 7a00 	vldr	s15, [r3]
 8001acc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ad0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ad8:	edd3 7a00 	vldr	s15, [r3]
 8001adc:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ae4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001ae8:	edd3 7a00 	vldr	s15, [r3]
 8001aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001af0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001af8:	edd3 7a00 	vldr	s15, [r3]
 8001afc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b10:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001b14:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b18:	3304      	adds	r3, #4
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001b22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b26:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b2a:	3304      	adds	r3, #4
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b34:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001b38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	edd3 7a00 	vldr	s15, [r3]
 8001b42:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001b46:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b4e:	3304      	adds	r3, #4
 8001b50:	edd3 7a00 	vldr	s15, [r3]
 8001b54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b58:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001b5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b60:	ed93 7a00 	vldr	s14, [r3]
 8001b64:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001b68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b70:	edd3 7a00 	vldr	s15, [r3]
 8001b74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b78:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001b7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001b80:	ed93 7a00 	vldr	s14, [r3]
 8001b84:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001b88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001b8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001b90:	edd3 7a00 	vldr	s15, [r3]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	1d1a      	adds	r2, r3, #4
 8001b98:	603a      	str	r2, [r7, #0]
 8001b9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001ba2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ba6:	3304      	adds	r3, #4
 8001ba8:	ed93 7a00 	vldr	s14, [r3]
 8001bac:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001bb0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001bb8:	3304      	adds	r3, #4
 8001bba:	edd3 7a00 	vldr	s15, [r3]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	1d1a      	adds	r2, r3, #4
 8001bc2:	603a      	str	r2, [r7, #0]
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	edc3 7a00 	vstr	s15, [r3]

    // Twiddle factors are ones
    *p2++ = t2[0];
 8001bcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bd0:	1d1a      	adds	r2, r3, #4
 8001bd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001bd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd8:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8001bda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001bde:	1d1a      	adds	r2, r3, #4
 8001be0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001be4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001be6:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8001be8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bec:	1d1a      	adds	r2, r3, #4
 8001bee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001bf2:	69fa      	ldr	r2, [r7, #28]
 8001bf4:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8001bf6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001bfa:	1d1a      	adds	r2, r3, #4
 8001bfc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001c00:	6a3a      	ldr	r2, [r7, #32]
 8001c02:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8001c04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c08:	1d1a      	adds	r2, r3, #4
 8001c0a:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8001c12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001c16:	1d1a      	adds	r2, r3, #4
 8001c18:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8001c1c:	693a      	ldr	r2, [r7, #16]
 8001c1e:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8001c20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8001c28:	4413      	add	r3, r2
 8001c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 8001c2e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8001c36:	4413      	add	r3, r2
 8001c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 8001c3c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8001c44:	4413      	add	r3, r2
 8001c46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8001c4a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001c4e:	3b02      	subs	r3, #2
 8001c50:	085b      	lsrs	r3, r3, #1
 8001c52:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001c56:	e31a      	b.n	800228e <arm_cfft_radix8by4_f32+0x8f4>
    {
        // TOP
        p1ap3_0 = p1[0] + p3[0];
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	ed93 7a00 	vldr	s14, [r3]
 8001c5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c6a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = p1[0] - p3[0];
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	ed93 7a00 	vldr	s14, [r3]
 8001c74:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c78:	edd3 7a00 	vldr	s15, [r3]
 8001c7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c80:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        p1ap3_1 = p1[1] + p3[1];
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	3304      	adds	r3, #4
 8001c88:	ed93 7a00 	vldr	s14, [r3]
 8001c8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001c90:	3304      	adds	r3, #4
 8001c92:	edd3 7a00 	vldr	s15, [r3]
 8001c96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9a:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = p1[1] - p3[1];
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	3304      	adds	r3, #4
 8001ca2:	ed93 7a00 	vldr	s14, [r3]
 8001ca6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001caa:	3304      	adds	r3, #4
 8001cac:	edd3 7a00 	vldr	s15, [r3]
 8001cb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cb4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        // col 2
        t2[0] = p1sp3_0 + p2[1] - p4[1];
 8001cb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	ed93 7a00 	vldr	s14, [r3]
 8001cc2:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001cc6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001cca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cce:	3304      	adds	r3, #4
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cd8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        t2[1] = p1sp3_1 - p2[0] + p4[0];
 8001cdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001ce0:	edd3 7a00 	vldr	s15, [r3]
 8001ce4:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8001ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001cf0:	edd3 7a00 	vldr	s15, [r3]
 8001cf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cf8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
        // col 3
        t3[0] = p1ap3_0 - p2[0] - p4[0];
 8001cfc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001d08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d10:	edd3 7a00 	vldr	s15, [r3]
 8001d14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d18:	edc7 7a07 	vstr	s15, [r7, #28]
        t3[1] = p1ap3_1 - p2[1] - p4[1];
 8001d1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d20:	3304      	adds	r3, #4
 8001d22:	edd3 7a00 	vldr	s15, [r3]
 8001d26:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001d2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d32:	3304      	adds	r3, #4
 8001d34:	edd3 7a00 	vldr	s15, [r3]
 8001d38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d3c:	edc7 7a08 	vstr	s15, [r7, #32]
        // col 4
        t4[0] = p1sp3_0 - p2[1] + p4[1];
 8001d40:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d44:	3304      	adds	r3, #4
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8001d4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d52:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d56:	3304      	adds	r3, #4
 8001d58:	edd3 7a00 	vldr	s15, [r3]
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	edc7 7a03 	vstr	s15, [r7, #12]
        t4[1] = p1sp3_1 + p2[0] - p4[0];
 8001d64:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d68:	ed93 7a00 	vldr	s14, [r3]
 8001d6c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001d70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d74:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d78:	edd3 7a00 	vldr	s15, [r3]
 8001d7c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d80:	edc7 7a04 	vstr	s15, [r7, #16]
        // col 1 - top
        *p1++ = p1ap3_0 + p2[0] + p4[0];
 8001d84:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d88:	ed93 7a00 	vldr	s14, [r3]
 8001d8c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001d90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d94:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	1d1a      	adds	r2, r3, #4
 8001da0:	603a      	str	r2, [r7, #0]
 8001da2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da6:	edc3 7a00 	vstr	s15, [r3]
        *p1++ = p1ap3_1 + p2[1] + p4[1];
 8001daa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001dae:	3304      	adds	r3, #4
 8001db0:	ed93 7a00 	vldr	s14, [r3]
 8001db4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001db8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dc0:	3304      	adds	r3, #4
 8001dc2:	edd3 7a00 	vldr	s15, [r3]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	1d1a      	adds	r2, r3, #4
 8001dca:	603a      	str	r2, [r7, #0]
 8001dcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd0:	edc3 7a00 	vstr	s15, [r3]

        // BOTTOM
        p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8001dd4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001dd8:	3b04      	subs	r3, #4
 8001dda:	ed93 7a00 	vldr	s14, [r3]
 8001dde:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001de2:	3b04      	subs	r3, #4
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dec:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8001df0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001df4:	3b04      	subs	r3, #4
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	edd3 7a00 	vldr	s15, [r3]
 8001e04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e08:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        p1ap3_0 = pEnd1[0] + pEnd3[0];
 8001e0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e10:	ed93 7a00 	vldr	s14, [r3]
 8001e14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e18:	edd3 7a00 	vldr	s15, [r3]
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
        p1sp3_0 = pEnd1[0] - pEnd3[0];
 8001e24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e28:	ed93 7a00 	vldr	s14, [r3]
 8001e2c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e38:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        // col 2
        t2[2] = pEnd2[0]  - pEnd4[0] + p1sp3_1;
 8001e3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e40:	ed93 7a00 	vldr	s14, [r3]
 8001e44:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e48:	edd3 7a00 	vldr	s15, [r3]
 8001e4c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e50:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e58:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8001e5c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e60:	ed93 7a00 	vldr	s14, [r3]
 8001e64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001e68:	edd3 7a00 	vldr	s15, [r3]
 8001e6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e74:	3b04      	subs	r3, #4
 8001e76:	edd3 7a00 	vldr	s15, [r3]
 8001e7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001e82:	3b04      	subs	r3, #4
 8001e84:	edd3 7a00 	vldr	s15, [r3]
 8001e88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e8c:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
        // col 3
        t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8001e90:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001e94:	3b04      	subs	r3, #4
 8001e96:	edd3 7a00 	vldr	s15, [r3]
 8001e9a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 8001e9e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ea2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ea6:	3b04      	subs	r3, #4
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001eb0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        t3[3] = p1ap3_0 - pEnd2[0]  - pEnd4[0];
 8001eb4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001eb8:	edd3 7a00 	vldr	s15, [r3]
 8001ebc:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8001ec0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ec4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ec8:	edd3 7a00 	vldr	s15, [r3]
 8001ecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ed0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
        // col 4
        t4[2] = pEnd2[0]  - pEnd4[0]  - p1sp3_1;
 8001ed4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ed8:	ed93 7a00 	vldr	s14, [r3]
 8001edc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ee8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8001eec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ef0:	edc7 7a05 	vstr	s15, [r7, #20]
        t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8001ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ef8:	3b04      	subs	r3, #4
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f02:	3b04      	subs	r3, #4
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f0c:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8001f10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f14:	edc7 7a06 	vstr	s15, [r7, #24]
        // col 1 - Bottom
        *pEnd1-- = p1ap3_0 + pEnd2[0] + pEnd4[0];
 8001f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f1c:	ed93 7a00 	vldr	s14, [r3]
 8001f20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8001f24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f2c:	edd3 7a00 	vldr	s15, [r3]
 8001f30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f34:	1f1a      	subs	r2, r3, #4
 8001f36:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f3e:	edc3 7a00 	vstr	s15, [r3]
        *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8001f42:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001f46:	3b04      	subs	r3, #4
 8001f48:	ed93 7a00 	vldr	s14, [r3]
 8001f4c:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8001f50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001f58:	3b04      	subs	r3, #4
 8001f5a:	edd3 7a00 	vldr	s15, [r3]
 8001f5e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001f62:	1f1a      	subs	r2, r3, #4
 8001f64:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001f68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f6c:	edc3 7a00 	vstr	s15, [r3]

        // COL 2
        // read twiddle factors
        twR = *tw2++;
 8001f70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f74:	1d1a      	adds	r2, r3, #4
 8001f76:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	653b      	str	r3, [r7, #80]	; 0x50
        twI = *tw2++;
 8001f7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f82:	1d1a      	adds	r2, r3, #4
 8001f84:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
        // multiply by twiddle factors
        //  let    Z1 = a + i(b),   Z2 = c + i(d)
        //   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d)
        
        // Top
        m0 = t2[0] * twR;
 8001f8c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001f90:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f98:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[1] * twI;
 8001f9c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fa0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fa8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[1] * twR;
 8001fac:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8001fb0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001fb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fb8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[0] * twI;
 8001fbc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001fc0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8001fc4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001fc8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p2++ = m0 + m1;
 8001fcc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fd0:	1d1a      	adds	r2, r3, #4
 8001fd2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001fd6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8001fda:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8001fde:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe2:	edc3 7a00 	vstr	s15, [r3]
        *p2++ = m2 - m3;
 8001fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001fea:	1d1a      	adds	r2, r3, #4
 8001fec:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8001ff0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8001ff4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8001ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ffc:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 2
        // 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i
        // Bottom
        m0 = t2[3] * twI;
 8002000:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002004:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800200c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t2[2] * twR;
 8002010:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002014:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800201c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t2[2] * twI;
 8002020:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8002024:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800202c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t2[3] * twR;
 8002030:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8002034:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800203c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd2-- = m0 - m1;
 8002040:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002044:	1f1a      	subs	r2, r3, #4
 8002046:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800204a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800204e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002052:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002056:	edc3 7a00 	vstr	s15, [r3]
        *pEnd2-- = m2 + m3;
 800205a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800205e:	1f1a      	subs	r2, r3, #4
 8002060:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002064:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002068:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800206c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002070:	edc3 7a00 	vstr	s15, [r3]

        // COL 3
        twR = tw3[0];
 8002074:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw3[1];
 800207c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw3 += twMod3;
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800208c:	4413      	add	r3, r2
 800208e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        // Top
        m0 = t3[0] * twR;
 8002092:	edd7 7a07 	vldr	s15, [r7, #28]
 8002096:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800209a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800209e:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[1] * twI;
 80020a2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020a6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ae:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[1] * twR;
 80020b2:	edd7 7a08 	vldr	s15, [r7, #32]
 80020b6:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80020ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020be:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[0] * twI;
 80020c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80020c6:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80020ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80020ce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p3++ = m0 + m1;
 80020d2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020d6:	1d1a      	adds	r2, r3, #4
 80020d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020dc:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80020e0:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80020e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e8:	edc3 7a00 	vstr	s15, [r3]
        *p3++ = m2 - m3;
 80020ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80020f0:	1d1a      	adds	r2, r3, #4
 80020f2:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020f6:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80020fa:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80020fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002102:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 3
        // 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i
        // Bottom
        m0 = -t3[3] * twR;
 8002106:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800210a:	eef1 7a67 	vneg.f32	s15, s15
 800210e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002112:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002116:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t3[2] * twI;
 800211a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800211e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002126:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t3[2] * twR;
 800212a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800212e:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002132:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002136:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t3[3] * twI;
 800213a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800213e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002142:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002146:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd3-- = m0 - m1;
 800214a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800214e:	1f1a      	subs	r2, r3, #4
 8002150:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8002154:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002158:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800215c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002160:	edc3 7a00 	vstr	s15, [r3]
        *pEnd3-- = m3 - m2;
 8002164:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002168:	1f1a      	subs	r2, r3, #4
 800216a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800216e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 8002172:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 8002176:	ee77 7a67 	vsub.f32	s15, s14, s15
 800217a:	edc3 7a00 	vstr	s15, [r3]
        
        // COL 4
        twR = tw4[0];
 800217e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	653b      	str	r3, [r7, #80]	; 0x50
        twI = tw4[1];
 8002186:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	64fb      	str	r3, [r7, #76]	; 0x4c
        tw4 += twMod4;
 800218e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002196:	4413      	add	r3, r2
 8002198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        // Top
        m0 = t4[0] * twR;
 800219c:	edd7 7a03 	vldr	s15, [r7, #12]
 80021a0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021a8:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[1] * twI;
 80021ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b8:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[1] * twR;
 80021bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80021c0:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80021c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c8:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[0] * twI;
 80021cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80021d0:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80021d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *p4++ = m0 + m1;
 80021dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021e0:	1d1a      	adds	r2, r3, #4
 80021e2:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 80021e6:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80021ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80021ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021f2:	edc3 7a00 	vstr	s15, [r3]
        *p4++ = m2 - m3;
 80021f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80021fa:	1d1a      	adds	r2, r3, #4
 80021fc:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002200:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002204:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800220c:	edc3 7a00 	vstr	s15, [r3]
        // use vertical symmetry col 4
        // 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i
        // Bottom
        m0 = t4[3] * twI;
 8002210:	edd7 7a06 	vldr	s15, [r7, #24]
 8002214:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002218:	ee67 7a27 	vmul.f32	s15, s14, s15
 800221c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        m1 = t4[2] * twR;
 8002220:	edd7 7a05 	vldr	s15, [r7, #20]
 8002224:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002228:	ee67 7a27 	vmul.f32	s15, s14, s15
 800222c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
        m2 = t4[2] * twI;
 8002230:	edd7 7a05 	vldr	s15, [r7, #20]
 8002234:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
        m3 = t4[3] * twR;
 8002240:	edd7 7a06 	vldr	s15, [r7, #24]
 8002244:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        
        *pEnd4-- = m0 - m1;
 8002250:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002254:	1f1a      	subs	r2, r3, #4
 8002256:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800225a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800225e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002262:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002266:	edc3 7a00 	vstr	s15, [r3]
        *pEnd4-- = m2 + m3;
 800226a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800226e:	1f1a      	subs	r2, r3, #4
 8002270:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 8002274:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002278:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800227c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002280:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- ) 
 8002284:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002288:	3b01      	subs	r3, #1
 800228a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800228e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002292:	2b00      	cmp	r3, #0
 8002294:	f47f ace0 	bne.w	8001c58 <arm_cfft_radix8by4_f32+0x2be>
    }

    //MIDDLE
    // Twiddle factors are 
    //  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i
    p1ap3_0 = p1[0] + p3[0];
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	ed93 7a00 	vldr	s14, [r3]
 800229e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022a2:	edd3 7a00 	vldr	s15, [r3]
 80022a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022aa:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	ed93 7a00 	vldr	s14, [r3]
 80022b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022b8:	edd3 7a00 	vldr	s15, [r3]
 80022bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022c0:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	3304      	adds	r3, #4
 80022c8:	ed93 7a00 	vldr	s14, [r3]
 80022cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022d0:	3304      	adds	r3, #4
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022da:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	3304      	adds	r3, #4
 80022e2:	ed93 7a00 	vldr	s14, [r3]
 80022e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80022ea:	3304      	adds	r3, #4
 80022ec:	edd3 7a00 	vldr	s15, [r3]
 80022f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022f4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    // col 2
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 80022f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80022fc:	3304      	adds	r3, #4
 80022fe:	ed93 7a00 	vldr	s14, [r3]
 8002302:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 8002306:	ee37 7a27 	vadd.f32	s14, s14, s15
 800230a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800230e:	3304      	adds	r3, #4
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002318:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800231c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002320:	edd3 7a00 	vldr	s15, [r3]
 8002324:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8002328:	ee37 7a67 	vsub.f32	s14, s14, s15
 800232c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002330:	edd3 7a00 	vldr	s15, [r3]
 8002334:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002338:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    // col 3
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800233c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 8002348:	ee37 7a67 	vsub.f32	s14, s14, s15
 800234c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002350:	edd3 7a00 	vldr	s15, [r3]
 8002354:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002358:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800235c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002360:	3304      	adds	r3, #4
 8002362:	edd3 7a00 	vldr	s15, [r3]
 8002366:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800236a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800236e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002372:	3304      	adds	r3, #4
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee77 7a67 	vsub.f32	s15, s14, s15
 800237c:	edc7 7a08 	vstr	s15, [r7, #32]
    // col 4
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8002380:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002384:	3304      	adds	r3, #4
 8002386:	edd3 7a00 	vldr	s15, [r3]
 800238a:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800238e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002392:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002396:	3304      	adds	r3, #4
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023a0:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 80023a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023a8:	ed93 7a00 	vldr	s14, [r3]
 80023ac:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 80023b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023c0:	edc7 7a04 	vstr	s15, [r7, #16]
    // col 1 - Top
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 80023c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023c8:	ed93 7a00 	vldr	s14, [r3]
 80023cc:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80023d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	1d1a      	adds	r2, r3, #4
 80023e0:	603a      	str	r2, [r7, #0]
 80023e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023e6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 80023ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80023ee:	3304      	adds	r3, #4
 80023f0:	ed93 7a00 	vldr	s14, [r3]
 80023f4:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 80023f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80023fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002400:	3304      	adds	r3, #4
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	1d1a      	adds	r2, r3, #4
 800240a:	603a      	str	r2, [r7, #0]
 800240c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002410:	edc3 7a00 	vstr	s15, [r3]

    // COL 2
    twR = tw2[0];
 8002414:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800241c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 8002424:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002428:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800242c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002430:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 8002434:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002438:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800243c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002440:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 8002444:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8002448:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800244c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002450:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 8002454:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8002458:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800245c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002460:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 8002464:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002468:	1d1a      	adds	r2, r3, #4
 800246a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800246e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8002472:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8002476:	ee77 7a27 	vadd.f32	s15, s14, s15
 800247a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800247e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002482:	1d1a      	adds	r2, r3, #4
 8002484:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 8002488:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800248c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002490:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002494:	edc3 7a00 	vstr	s15, [r3]
    // COL 3
    twR = tw3[0];
 8002498:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 80024a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 80024a8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024ac:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 80024b8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024c4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 80024c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80024cc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 80024d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 80024d8:	edd7 7a07 	vldr	s15, [r7, #28]
 80024dc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80024e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 80024e8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024ec:	1d1a      	adds	r2, r3, #4
 80024ee:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80024f2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80024f6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 80024fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024fe:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 8002502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002506:	1d1a      	adds	r2, r3, #4
 8002508:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800250c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002510:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002514:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002518:	edc3 7a00 	vstr	s15, [r3]
    // COL 4
    twR = tw4[0];
 800251c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 8002524:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800252c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002530:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002534:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002538:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800253c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002540:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002544:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002548:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800254c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002550:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002554:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002558:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800255c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002560:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002564:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002568:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800256c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002570:	1d1a      	adds	r2, r3, #4
 8002572:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002576:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800257a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800257e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002582:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8002586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800258a:	1d1a      	adds	r2, r3, #4
 800258c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8002590:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8002594:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 8002598:	ee77 7a67 	vsub.f32	s15, s14, s15
 800259c:	edc3 7a00 	vstr	s15, [r3]

    // first col
    arm_radix8_butterfly_f32( pCol1, L, (float32_t *) S->pTwiddle, 4u);
 80025a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025a4:	b299      	uxth	r1, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	2304      	movs	r3, #4
 80025ac:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 80025ae:	f000 f8c3 	bl	8002738 <arm_radix8_butterfly_f32>
    // second col
    arm_radix8_butterfly_f32( pCol2, L, (float32_t *) S->pTwiddle, 4u);
 80025b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025b6:	b299      	uxth	r1, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685a      	ldr	r2, [r3, #4]
 80025bc:	2304      	movs	r3, #4
 80025be:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80025c0:	f000 f8ba 	bl	8002738 <arm_radix8_butterfly_f32>
    // third col
    arm_radix8_butterfly_f32( pCol3, L, (float32_t *) S->pTwiddle, 4u);
 80025c4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025c8:	b299      	uxth	r1, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685a      	ldr	r2, [r3, #4]
 80025ce:	2304      	movs	r3, #4
 80025d0:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80025d2:	f000 f8b1 	bl	8002738 <arm_radix8_butterfly_f32>
    // fourth col
    arm_radix8_butterfly_f32( pCol4, L, (float32_t *) S->pTwiddle, 4u);
 80025d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80025da:	b299      	uxth	r1, r3
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	2304      	movs	r3, #4
 80025e2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80025e4:	f000 f8a8 	bl	8002738 <arm_radix8_butterfly_f32>
}
 80025e8:	bf00      	nop
 80025ea:	37b0      	adds	r7, #176	; 0xb0
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}

080025f0 <arm_cfft_f32>:
void arm_cfft_f32( 
    const arm_cfft_instance_f32 * S, 
    float32_t * p1,
    uint8_t ifftFlag,
    uint8_t bitReverseFlag)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b088      	sub	sp, #32
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	4611      	mov	r1, r2
 80025fc:	461a      	mov	r2, r3
 80025fe:	460b      	mov	r3, r1
 8002600:	71fb      	strb	r3, [r7, #7]
 8002602:	4613      	mov	r3, r2
 8002604:	71bb      	strb	r3, [r7, #6]
    uint32_t  L = S->fftLen, l;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	881b      	ldrh	r3, [r3, #0]
 800260a:	617b      	str	r3, [r7, #20]
    float32_t invL, * pSrc;

    if(ifftFlag == 1u)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d117      	bne.n	8002642 <arm_cfft_f32+0x52>
    {
        /*  Conjugate input data  */
        pSrc = p1 + 1;
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	3304      	adds	r3, #4
 8002616:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
 800261c:	e00d      	b.n	800263a <arm_cfft_f32+0x4a>
        {
            *pSrc = -*pSrc;
 800261e:	69bb      	ldr	r3, [r7, #24]
 8002620:	edd3 7a00 	vldr	s15, [r3]
 8002624:	eef1 7a67 	vneg.f32	s15, s15
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	edc3 7a00 	vstr	s15, [r3]
            pSrc += 2;
 800262e:	69bb      	ldr	r3, [r7, #24]
 8002630:	3308      	adds	r3, #8
 8002632:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	3301      	adds	r3, #1
 8002638:	61fb      	str	r3, [r7, #28]
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	429a      	cmp	r2, r3
 8002640:	d3ed      	bcc.n	800261e <arm_cfft_f32+0x2e>
        }
    }

    switch (L) 
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002648:	d024      	beq.n	8002694 <arm_cfft_f32+0xa4>
 800264a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800264e:	d80b      	bhi.n	8002668 <arm_cfft_f32+0x78>
 8002650:	2b20      	cmp	r3, #32
 8002652:	d01f      	beq.n	8002694 <arm_cfft_f32+0xa4>
 8002654:	2b20      	cmp	r3, #32
 8002656:	d802      	bhi.n	800265e <arm_cfft_f32+0x6e>
 8002658:	2b10      	cmp	r3, #16
 800265a:	d016      	beq.n	800268a <arm_cfft_f32+0x9a>
 800265c:	e028      	b.n	80026b0 <arm_cfft_f32+0xc0>
 800265e:	2b40      	cmp	r3, #64	; 0x40
 8002660:	d01d      	beq.n	800269e <arm_cfft_f32+0xae>
 8002662:	2b80      	cmp	r3, #128	; 0x80
 8002664:	d011      	beq.n	800268a <arm_cfft_f32+0x9a>
 8002666:	e023      	b.n	80026b0 <arm_cfft_f32+0xc0>
 8002668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800266c:	d00d      	beq.n	800268a <arm_cfft_f32+0x9a>
 800266e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002672:	d803      	bhi.n	800267c <arm_cfft_f32+0x8c>
 8002674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002678:	d011      	beq.n	800269e <arm_cfft_f32+0xae>
 800267a:	e019      	b.n	80026b0 <arm_cfft_f32+0xc0>
 800267c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002680:	d008      	beq.n	8002694 <arm_cfft_f32+0xa4>
 8002682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002686:	d00a      	beq.n	800269e <arm_cfft_f32+0xae>
 8002688:	e012      	b.n	80026b0 <arm_cfft_f32+0xc0>
    {
    case 16: 
    case 128:
    case 1024:
        arm_cfft_radix8by2_f32  ( (arm_cfft_instance_f32 *) S, p1);
 800268a:	68b9      	ldr	r1, [r7, #8]
 800268c:	68f8      	ldr	r0, [r7, #12]
 800268e:	f7fe ff90 	bl	80015b2 <arm_cfft_radix8by2_f32>
        break;
 8002692:	e00d      	b.n	80026b0 <arm_cfft_f32+0xc0>
    case 32:
    case 256:
    case 2048:
        arm_cfft_radix8by4_f32  ( (arm_cfft_instance_f32 *) S, p1);
 8002694:	68b9      	ldr	r1, [r7, #8]
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f7ff f97f 	bl	800199a <arm_cfft_radix8by4_f32>
        break;
 800269c:	e008      	b.n	80026b0 <arm_cfft_f32+0xc0>
    case 64:
    case 512:
    case 4096:
        arm_radix8_butterfly_f32( p1, L, (float32_t *) S->pTwiddle, 1);
 800269e:	697b      	ldr	r3, [r7, #20]
 80026a0:	b299      	uxth	r1, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	2301      	movs	r3, #1
 80026a8:	68b8      	ldr	r0, [r7, #8]
 80026aa:	f000 f845 	bl	8002738 <arm_radix8_butterfly_f32>
        break;
 80026ae:	bf00      	nop
    }  

    if( bitReverseFlag )
 80026b0:	79bb      	ldrb	r3, [r7, #6]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <arm_cfft_f32+0xd6>
        arm_bitreversal_32((uint32_t*)p1,S->bitRevLength,S->pBitRevTable);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	8999      	ldrh	r1, [r3, #12]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	461a      	mov	r2, r3
 80026c0:	68b8      	ldr	r0, [r7, #8]
 80026c2:	f7fd fd95 	bl	80001f0 <arm_bitreversal_32>

    if(ifftFlag == 1u)
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d130      	bne.n	800272e <arm_cfft_f32+0x13e>
    {
        invL = 1.0f/(float32_t)L;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	ee07 3a90 	vmov	s15, r3
 80026d2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80026da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026de:	edc7 7a04 	vstr	s15, [r7, #16]
        /*  Conjugate and scale output data */
        pSrc = p1;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 80026e6:	2300      	movs	r3, #0
 80026e8:	61fb      	str	r3, [r7, #28]
 80026ea:	e01c      	b.n	8002726 <arm_cfft_f32+0x136>
        {
            *pSrc++ *=   invL ;
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	1d1a      	adds	r2, r3, #4
 80026f0:	61ba      	str	r2, [r7, #24]
 80026f2:	ed93 7a00 	vldr	s14, [r3]
 80026f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80026fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fe:	edc3 7a00 	vstr	s15, [r3]
            *pSrc  = -(*pSrc) * invL;
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	edd3 7a00 	vldr	s15, [r3]
 8002708:	eeb1 7a67 	vneg.f32	s14, s15
 800270c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002710:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	edc3 7a00 	vstr	s15, [r3]
            pSrc++;
 800271a:	69bb      	ldr	r3, [r7, #24]
 800271c:	3304      	adds	r3, #4
 800271e:	61bb      	str	r3, [r7, #24]
        for(l=0; l<L; l++) 
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	3301      	adds	r3, #1
 8002724:	61fb      	str	r3, [r7, #28]
 8002726:	69fa      	ldr	r2, [r7, #28]
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3de      	bcc.n	80026ec <arm_cfft_f32+0xfc>
        }
    }
}
 800272e:	bf00      	nop
 8002730:	3720      	adds	r7, #32
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
	...

08002738 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
float32_t * pSrc,
uint16_t fftLen,
const float32_t * pCoef,
uint16_t twidCoefModifier)
{
 8002738:	b480      	push	{r7}
 800273a:	b0bd      	sub	sp, #244	; 0xf4
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	607a      	str	r2, [r7, #4]
 8002742:	461a      	mov	r2, r3
 8002744:	460b      	mov	r3, r1
 8002746:	817b      	strh	r3, [r7, #10]
 8002748:	4613      	mov	r3, r2
 800274a:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <arm_radix8_butterfly_f32+0x3c>)
 800274e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
   
   do 
   {
      n1 = n2;
 8002758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800275c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 8002760:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002764:	08db      	lsrs	r3, r3, #3
 8002766:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800276a:	2300      	movs	r3, #0
 800276c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002770:	e002      	b.n	8002778 <arm_radix8_butterfly_f32+0x40>
 8002772:	bf00      	nop
 8002774:	3f3504f3 	.word	0x3f3504f3
      
      do
      {
         i2 = i1 + n2;
 8002778:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800277c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002780:	4413      	add	r3, r2
 8002782:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 8002786:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800278a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800278e:	4413      	add	r3, r2
 8002790:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 8002794:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002798:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800279c:	4413      	add	r3, r2
 800279e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 80027a2:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80027a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027aa:	4413      	add	r3, r2
 80027ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 80027b0:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80027b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027b8:	4413      	add	r3, r2
 80027ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 80027be:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80027c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027c6:	4413      	add	r3, r2
 80027c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 80027cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80027d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80027d4:	4413      	add	r3, r2
 80027d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80027da:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4413      	add	r3, r2
 80027e4:	ed93 7a00 	vldr	s14, [r3]
 80027e8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	68fa      	ldr	r2, [r7, #12]
 80027f0:	4413      	add	r3, r2
 80027f2:	edd3 7a00 	vldr	s15, [r3]
 80027f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fa:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80027fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	68fa      	ldr	r2, [r7, #12]
 8002806:	4413      	add	r3, r2
 8002808:	ed93 7a00 	vldr	s14, [r3]
 800280c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4413      	add	r3, r2
 8002816:	edd3 7a00 	vldr	s15, [r3]
 800281a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800281e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002822:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002826:	00db      	lsls	r3, r3, #3
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4413      	add	r3, r2
 800282c:	ed93 7a00 	vldr	s14, [r3]
 8002830:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002842:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002846:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800284a:	00db      	lsls	r3, r3, #3
 800284c:	68fa      	ldr	r2, [r7, #12]
 800284e:	4413      	add	r3, r2
 8002850:	ed93 7a00 	vldr	s14, [r3]
 8002854:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002858:	00db      	lsls	r3, r3, #3
 800285a:	68fa      	ldr	r2, [r7, #12]
 800285c:	4413      	add	r3, r2
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002866:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800286a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800286e:	00db      	lsls	r3, r3, #3
 8002870:	68fa      	ldr	r2, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	ed93 7a00 	vldr	s14, [r3]
 8002878:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	edd3 7a00 	vldr	s15, [r3]
 8002886:	ee77 7a27 	vadd.f32	s15, s14, s15
 800288a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800288e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	4413      	add	r3, r2
 8002898:	ed93 7a00 	vldr	s14, [r3]
 800289c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	4413      	add	r3, r2
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ae:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 80028b2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028b6:	00db      	lsls	r3, r3, #3
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4413      	add	r3, r2
 80028bc:	ed93 7a00 	vldr	s14, [r3]
 80028c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	68fa      	ldr	r2, [r7, #12]
 80028c8:	4413      	add	r3, r2
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028d2:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80028d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	68fa      	ldr	r2, [r7, #12]
 80028de:	4413      	add	r3, r2
 80028e0:	ed93 7a00 	vldr	s14, [r3]
 80028e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	68fa      	ldr	r2, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028f6:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 80028fa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 80028fe:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002902:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002906:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800290a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800290e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002912:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002916:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800291a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800291e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002922:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002926:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800292a:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800292e:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002936:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;   
 800293a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4413      	add	r3, r2
 8002944:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002948:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800294c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002950:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 8002954:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002958:	00db      	lsls	r3, r3, #3
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002962:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800296a:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800296e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	3304      	adds	r3, #4
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	4413      	add	r3, r2
 800297a:	ed93 7a00 	vldr	s14, [r3]
 800297e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002982:	00db      	lsls	r3, r3, #3
 8002984:	3304      	adds	r3, #4
 8002986:	68fa      	ldr	r2, [r7, #12]
 8002988:	4413      	add	r3, r2
 800298a:	edd3 7a00 	vldr	s15, [r3]
 800298e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002992:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8002996:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800299a:	00db      	lsls	r3, r3, #3
 800299c:	3304      	adds	r3, #4
 800299e:	68fa      	ldr	r2, [r7, #12]
 80029a0:	4413      	add	r3, r2
 80029a2:	ed93 7a00 	vldr	s14, [r3]
 80029a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80029aa:	00db      	lsls	r3, r3, #3
 80029ac:	3304      	adds	r3, #4
 80029ae:	68fa      	ldr	r2, [r7, #12]
 80029b0:	4413      	add	r3, r2
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80029be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	3304      	adds	r3, #4
 80029c6:	68fa      	ldr	r2, [r7, #12]
 80029c8:	4413      	add	r3, r2
 80029ca:	ed93 7a00 	vldr	s14, [r3]
 80029ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	3304      	adds	r3, #4
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4413      	add	r3, r2
 80029da:	edd3 7a00 	vldr	s15, [r3]
 80029de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80029e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80029ea:	00db      	lsls	r3, r3, #3
 80029ec:	3304      	adds	r3, #4
 80029ee:	68fa      	ldr	r2, [r7, #12]
 80029f0:	4413      	add	r3, r2
 80029f2:	ed93 7a00 	vldr	s14, [r3]
 80029f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fa:	00db      	lsls	r3, r3, #3
 80029fc:	3304      	adds	r3, #4
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	4413      	add	r3, r2
 8002a02:	edd3 7a00 	vldr	s15, [r3]
 8002a06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a0a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 8002a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	3304      	adds	r3, #4
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	4413      	add	r3, r2
 8002a1a:	ed93 7a00 	vldr	s14, [r3]
 8002a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a22:	00db      	lsls	r3, r3, #3
 8002a24:	3304      	adds	r3, #4
 8002a26:	68fa      	ldr	r2, [r7, #12]
 8002a28:	4413      	add	r3, r2
 8002a2a:	edd3 7a00 	vldr	s15, [r3]
 8002a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a32:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8002a36:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	3304      	adds	r3, #4
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4413      	add	r3, r2
 8002a42:	ed93 7a00 	vldr	s14, [r3]
 8002a46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002a4a:	00db      	lsls	r3, r3, #3
 8002a4c:	3304      	adds	r3, #4
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4413      	add	r3, r2
 8002a52:	edd3 7a00 	vldr	s15, [r3]
 8002a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a5a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8002a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a62:	00db      	lsls	r3, r3, #3
 8002a64:	3304      	adds	r3, #4
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4413      	add	r3, r2
 8002a6a:	ed93 7a00 	vldr	s14, [r3]
 8002a6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	3304      	adds	r3, #4
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a82:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8002a86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002a8a:	00db      	lsls	r3, r3, #3
 8002a8c:	3304      	adds	r3, #4
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	ed93 7a00 	vldr	s14, [r3]
 8002a96:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002a9a:	00db      	lsls	r3, r3, #3
 8002a9c:	3304      	adds	r3, #4
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	edd3 7a00 	vldr	s15, [r3]
 8002aa6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aaa:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 8002aae:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ab2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ab6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002aba:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 8002abe:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002ac2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 8002ace:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002ad2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ad6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ada:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 8002ade:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8002ae2:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8002ae6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aea:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8002aee:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	3304      	adds	r3, #4
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002afe:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b06:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8002b0a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002b0e:	00db      	lsls	r3, r3, #3
 8002b10:	3304      	adds	r3, #4
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	4413      	add	r3, r2
 8002b16:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8002b1a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b22:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8002b26:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b2a:	00db      	lsls	r3, r3, #3
 8002b2c:	68fa      	ldr	r2, [r7, #12]
 8002b2e:	4413      	add	r3, r2
 8002b30:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b34:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8002b40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	68fa      	ldr	r2, [r7, #12]
 8002b48:	4413      	add	r3, r2
 8002b4a:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002b4e:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8002b52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b56:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8002b5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	3304      	adds	r3, #4
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	4413      	add	r3, r2
 8002b66:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b6a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b72:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8002b76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	68fa      	ldr	r2, [r7, #12]
 8002b80:	4413      	add	r3, r2
 8002b82:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002b86:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8002b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b8e:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8002b92:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002b96:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002b9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b9e:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ba6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 8002baa:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 8002bae:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002bb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bbe:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 8002bc2:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002bc6:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002bca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bce:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 8002bda:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8002bde:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002be6:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8002bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bee:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 8002bf2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002bf6:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002bfa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bfe:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 8002c02:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c06:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8002c0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0e:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 8002c12:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002c16:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 8002c22:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 8002c26:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8002c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2e:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 8002c32:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c36:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c3e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 8002c42:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002c46:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8002c4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c4e:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 8002c52:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002c56:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c5a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c5e:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 8002c62:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 8002c66:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8002c6a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c6e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 8002c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c80:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002c84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c88:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8002c8c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	68fa      	ldr	r2, [r7, #12]
 8002c94:	4413      	add	r3, r2
 8002c96:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 8002c9a:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 8002c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8002ca6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	68fa      	ldr	r2, [r7, #12]
 8002cae:	4413      	add	r3, r2
 8002cb0:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cb4:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbc:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8002cc0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	68fa      	ldr	r2, [r7, #12]
 8002cc8:	4413      	add	r3, r2
 8002cca:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 8002cce:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8002cd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cd6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8002cda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002cde:	00db      	lsls	r3, r3, #3
 8002ce0:	3304      	adds	r3, #4
 8002ce2:	68fa      	ldr	r2, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002cea:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002cf2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8002cf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	3304      	adds	r3, #4
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4413      	add	r3, r2
 8002d02:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 8002d06:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 8002d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8002d12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002d16:	00db      	lsls	r3, r3, #3
 8002d18:	3304      	adds	r3, #4
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d22:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d2a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8002d2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d32:	00db      	lsls	r3, r3, #3
 8002d34:	3304      	adds	r3, #4
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002d3e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8002d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d46:	edc3 7a00 	vstr	s15, [r3]
         
         i1 += n1;
 8002d4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002d4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002d52:	4413      	add	r3, r2
 8002d54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while(i1 < fftLen);
 8002d58:	897b      	ldrh	r3, [r7, #10]
 8002d5a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	f4ff ad0a 	bcc.w	8002778 <arm_radix8_butterfly_f32+0x40>
      
      if(n2 < 8)
 8002d64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002d68:	2b07      	cmp	r3, #7
 8002d6a:	f240 84e3 	bls.w	8003734 <arm_radix8_butterfly_f32+0xffc>
         break;
      
      ia1 = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 8002d74:	2301      	movs	r3, #1
 8002d76:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      
      do
      {      
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8002d7a:	893b      	ldrh	r3, [r7, #8]
 8002d7c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002d80:	4413      	add	r3, r2
 8002d82:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 8002d84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d86:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 8002d8a:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8002d8e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d90:	4413      	add	r3, r2
 8002d92:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 8002d94:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d96:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002d98:	4413      	add	r3, r2
 8002d9a:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 8002d9c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002d9e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da0:	4413      	add	r3, r2
 8002da2:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 8002da4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002da6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002da8:	4413      	add	r3, r2
 8002daa:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 8002dac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002dae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db0:	4413      	add	r3, r2
 8002db2:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 8002db4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002db6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002db8:	4413      	add	r3, r2
 8002dba:	667b      	str	r3, [r7, #100]	; 0x64
                  
         co2 = pCoef[2 * ia1];
 8002dbc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 8002dca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dcc:	00db      	lsls	r3, r3, #3
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	4413      	add	r3, r2
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 8002dd6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dd8:	00db      	lsls	r3, r3, #3
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	4413      	add	r3, r2
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 8002de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002de4:	00db      	lsls	r3, r3, #3
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	4413      	add	r3, r2
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 8002dee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 8002dfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	687a      	ldr	r2, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 8002e06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	4413      	add	r3, r2
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 8002e12:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	3304      	adds	r3, #4
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 8002e22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	3304      	adds	r3, #4
 8002e28:	687a      	ldr	r2, [r7, #4]
 8002e2a:	4413      	add	r3, r2
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	3304      	adds	r3, #4
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	4413      	add	r3, r2
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8002e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e40:	00db      	lsls	r3, r3, #3
 8002e42:	3304      	adds	r3, #4
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	4413      	add	r3, r2
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 8002e4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	3304      	adds	r3, #4
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	4413      	add	r3, r2
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 8002e5a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	3304      	adds	r3, #4
 8002e60:	687a      	ldr	r2, [r7, #4]
 8002e62:	4413      	add	r3, r2
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];         
 8002e68:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e6a:	00db      	lsls	r3, r3, #3
 8002e6c:	3304      	adds	r3, #4
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	4413      	add	r3, r2
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	62fb      	str	r3, [r7, #44]	; 0x2c
         
         i1 = j;
 8002e76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e7a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         
         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8002e7e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8002e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e86:	4413      	add	r3, r2
 8002e88:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 8002e8c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8002e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e94:	4413      	add	r3, r2
 8002e96:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 8002e9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002e9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 8002ea8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8002eac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 8002eb6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ebe:	4413      	add	r3, r2
 8002ec0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 8002ec4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002ec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ecc:	4413      	add	r3, r2
 8002ece:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 8002ed2:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ed6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eda:	4413      	add	r3, r2
 8002edc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8002ee0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002ee4:	00db      	lsls	r3, r3, #3
 8002ee6:	68fa      	ldr	r2, [r7, #12]
 8002ee8:	4413      	add	r3, r2
 8002eea:	ed93 7a00 	vldr	s14, [r3]
 8002eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ef2:	00db      	lsls	r3, r3, #3
 8002ef4:	68fa      	ldr	r2, [r7, #12]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8002f04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	ed93 7a00 	vldr	s14, [r3]
 8002f12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002f16:	00db      	lsls	r3, r3, #3
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	edd3 7a00 	vldr	s15, [r3]
 8002f20:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f24:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8002f28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	68fa      	ldr	r2, [r7, #12]
 8002f30:	4413      	add	r3, r2
 8002f32:	ed93 7a00 	vldr	s14, [r3]
 8002f36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4413      	add	r3, r2
 8002f40:	edd3 7a00 	vldr	s15, [r3]
 8002f44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f48:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8002f4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002f50:	00db      	lsls	r3, r3, #3
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4413      	add	r3, r2
 8002f56:	ed93 7a00 	vldr	s14, [r3]
 8002f5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	68fa      	ldr	r2, [r7, #12]
 8002f62:	4413      	add	r3, r2
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f6c:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8002f70:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	ed93 7a00 	vldr	s14, [r3]
 8002f7e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	4413      	add	r3, r2
 8002f88:	edd3 7a00 	vldr	s15, [r3]
 8002f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f90:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8002f94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002f98:	00db      	lsls	r3, r3, #3
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4413      	add	r3, r2
 8002f9e:	ed93 7a00 	vldr	s14, [r3]
 8002fa2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002fa6:	00db      	lsls	r3, r3, #3
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	4413      	add	r3, r2
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fb4:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8002fb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fbc:	00db      	lsls	r3, r3, #3
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	4413      	add	r3, r2
 8002fc2:	ed93 7a00 	vldr	s14, [r3]
 8002fc6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fca:	00db      	lsls	r3, r3, #3
 8002fcc:	68fa      	ldr	r2, [r7, #12]
 8002fce:	4413      	add	r3, r2
 8002fd0:	edd3 7a00 	vldr	s15, [r3]
 8002fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002fd8:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8002fdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002fe0:	00db      	lsls	r3, r3, #3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	4413      	add	r3, r2
 8002fe6:	ed93 7a00 	vldr	s14, [r3]
 8002fea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002fee:	00db      	lsls	r3, r3, #3
 8002ff0:	68fa      	ldr	r2, [r7, #12]
 8002ff2:	4413      	add	r3, r2
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ffc:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 8003000:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003004:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800300c:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 8003010:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 8003014:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 8003018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800301c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 8003020:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003024:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003028:	ee77 7a67 	vsub.f32	s15, s14, s15
 800302c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 8003030:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 8003034:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 8003038:	ee77 7a27 	vadd.f32	s15, s14, s15
 800303c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 8003040:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003044:	00db      	lsls	r3, r3, #3
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4413      	add	r3, r2
 800304a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800304e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003056:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800305a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800305e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 8003062:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003066:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800306a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800306e:	00db      	lsls	r3, r3, #3
 8003070:	3304      	adds	r3, #4
 8003072:	68fa      	ldr	r2, [r7, #12]
 8003074:	4413      	add	r3, r2
 8003076:	ed93 7a00 	vldr	s14, [r3]
 800307a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800307e:	00db      	lsls	r3, r3, #3
 8003080:	3304      	adds	r3, #4
 8003082:	68fa      	ldr	r2, [r7, #12]
 8003084:	4413      	add	r3, r2
 8003086:	edd3 7a00 	vldr	s15, [r3]
 800308a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800308e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 8003092:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003096:	00db      	lsls	r3, r3, #3
 8003098:	3304      	adds	r3, #4
 800309a:	68fa      	ldr	r2, [r7, #12]
 800309c:	4413      	add	r3, r2
 800309e:	ed93 7a00 	vldr	s14, [r3]
 80030a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	3304      	adds	r3, #4
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	4413      	add	r3, r2
 80030ae:	edd3 7a00 	vldr	s15, [r3]
 80030b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 80030ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030be:	00db      	lsls	r3, r3, #3
 80030c0:	3304      	adds	r3, #4
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	4413      	add	r3, r2
 80030c6:	ed93 7a00 	vldr	s14, [r3]
 80030ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030ce:	00db      	lsls	r3, r3, #3
 80030d0:	3304      	adds	r3, #4
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	4413      	add	r3, r2
 80030d6:	edd3 7a00 	vldr	s15, [r3]
 80030da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030de:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80030e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	3304      	adds	r3, #4
 80030ea:	68fa      	ldr	r2, [r7, #12]
 80030ec:	4413      	add	r3, r2
 80030ee:	ed93 7a00 	vldr	s14, [r3]
 80030f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80030f6:	00db      	lsls	r3, r3, #3
 80030f8:	3304      	adds	r3, #4
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	4413      	add	r3, r2
 80030fe:	edd3 7a00 	vldr	s15, [r3]
 8003102:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003106:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800310a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800310e:	00db      	lsls	r3, r3, #3
 8003110:	3304      	adds	r3, #4
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	4413      	add	r3, r2
 8003116:	ed93 7a00 	vldr	s14, [r3]
 800311a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800311e:	00db      	lsls	r3, r3, #3
 8003120:	3304      	adds	r3, #4
 8003122:	68fa      	ldr	r2, [r7, #12]
 8003124:	4413      	add	r3, r2
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8003132:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	3304      	adds	r3, #4
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	4413      	add	r3, r2
 800313e:	ed93 7a00 	vldr	s14, [r3]
 8003142:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	3304      	adds	r3, #4
 800314a:	68fa      	ldr	r2, [r7, #12]
 800314c:	4413      	add	r3, r2
 800314e:	edd3 7a00 	vldr	s15, [r3]
 8003152:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003156:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800315a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	3304      	adds	r3, #4
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	4413      	add	r3, r2
 8003166:	ed93 7a00 	vldr	s14, [r3]
 800316a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	3304      	adds	r3, #4
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317e:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8003182:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003186:	00db      	lsls	r3, r3, #3
 8003188:	3304      	adds	r3, #4
 800318a:	68fa      	ldr	r2, [r7, #12]
 800318c:	4413      	add	r3, r2
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	3304      	adds	r3, #4
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	4413      	add	r3, r2
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 80031aa:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031ae:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031b6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 80031ba:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 80031be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c6:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 80031ca:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80031ce:	edd7 7a08 	vldr	s15, [r7, #32]
 80031d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031d6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 80031da:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80031de:	edd7 7a08 	vldr	s15, [r7, #32]
 80031e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031e6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 80031ea:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80031ee:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 80031f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031f6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 80031fa:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80031fe:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 8003202:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003206:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800320a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800320e:	00db      	lsls	r3, r3, #3
 8003210:	3304      	adds	r3, #4
 8003212:	68fa      	ldr	r2, [r7, #12]
 8003214:	4413      	add	r3, r2
 8003216:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800321a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800321e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003222:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 8003226:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800322a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800322e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003232:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 8003236:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800323a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800323e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003242:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 8003246:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800324a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800324e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003252:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 8003256:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800325a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800325e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003262:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 8003266:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800326a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800326e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003272:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 8003276:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800327a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 8003286:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800328a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800328e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003292:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 8003296:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800329a:	00db      	lsls	r3, r3, #3
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	4413      	add	r3, r2
 80032a0:	ed97 7a07 	vldr	s14, [r7, #28]
 80032a4:	edd7 7a06 	vldr	s15, [r7, #24]
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 80032b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	3304      	adds	r3, #4
 80032b8:	68fa      	ldr	r2, [r7, #12]
 80032ba:	4413      	add	r3, r2
 80032bc:	ed97 7a05 	vldr	s14, [r7, #20]
 80032c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80032c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032c8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80032cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80032d0:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 80032d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032d8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80032dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 80032e0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80032e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032e8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80032ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 80032f0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80032f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f8:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80032fc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 8003300:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003304:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003308:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800330c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	68fa      	ldr	r2, [r7, #12]
 8003314:	4413      	add	r3, r2
 8003316:	ed97 7a07 	vldr	s14, [r7, #28]
 800331a:	edd7 7a06 	vldr	s15, [r7, #24]
 800331e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003322:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 8003326:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	3304      	adds	r3, #4
 800332e:	68fa      	ldr	r2, [r7, #12]
 8003330:	4413      	add	r3, r2
 8003332:	ed97 7a05 	vldr	s14, [r7, #20]
 8003336:	edd7 7a04 	vldr	s15, [r7, #16]
 800333a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800333e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 8003342:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003346:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800334a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800334e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 8003352:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003356:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800335a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800335e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 8003362:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8003366:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800336a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800336e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 8003372:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 8003376:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800337a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800337e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 8003382:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003386:	00db      	lsls	r3, r3, #3
 8003388:	68fa      	ldr	r2, [r7, #12]
 800338a:	4413      	add	r3, r2
 800338c:	ed97 7a07 	vldr	s14, [r7, #28]
 8003390:	edd7 7a06 	vldr	s15, [r7, #24]
 8003394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003398:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800339c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	3304      	adds	r3, #4
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80033ac:	edd7 7a04 	vldr	s15, [r7, #16]
 80033b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033b4:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 80033b8:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80033bc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80033c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033c4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80033c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033cc:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 80033d0:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 80033d4:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 80033d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033dc:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80033e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033e4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 80033e8:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 80033ec:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80033f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f4:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 80033f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 8003400:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 8003404:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8003408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800340c:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 8003410:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003414:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 8003418:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800341c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003420:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003424:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 8003428:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800342c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003430:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003434:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 8003438:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800343c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003440:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003444:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 8003448:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800344c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 8003450:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003454:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 8003458:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800345c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003460:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003464:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 8003468:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800346c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003474:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 8003478:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800347c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003480:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003484:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 8003488:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800348c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 8003490:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003494:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 8003498:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800349c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80034a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034a4:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 80034a8:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 80034ac:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 80034b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b4:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 80034b8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80034bc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80034c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c4:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 80034c8:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 80034cc:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 80034d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d4:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 80034d8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034dc:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80034e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e4:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 80034e8:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 80034ec:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 80034f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034f4:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 80034f8:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80034fc:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003500:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003504:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 8003508:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800350c:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 8003510:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003514:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 8003518:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800351c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003524:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8003528:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800352c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003530:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003534:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8003538:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800353c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 8003540:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003544:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8003548:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800354c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 8003550:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003554:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8003558:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800355c:	00db      	lsls	r3, r3, #3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4413      	add	r3, r2
 8003562:	ed97 7a07 	vldr	s14, [r7, #28]
 8003566:	edd7 7a06 	vldr	s15, [r7, #24]
 800356a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800356e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 8003572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003576:	00db      	lsls	r3, r3, #3
 8003578:	3304      	adds	r3, #4
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4413      	add	r3, r2
 800357e:	ed97 7a05 	vldr	s14, [r7, #20]
 8003582:	edd7 7a04 	vldr	s15, [r7, #16]
 8003586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800358a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800358e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8003592:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 8003596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800359a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800359e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80035a2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80035a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035aa:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 80035ae:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 80035b2:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 80035b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ba:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 80035be:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 80035c2:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 80035c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035ca:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80035ce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035d2:	00db      	lsls	r3, r3, #3
 80035d4:	68fa      	ldr	r2, [r7, #12]
 80035d6:	4413      	add	r3, r2
 80035d8:	ed97 7a07 	vldr	s14, [r7, #28]
 80035dc:	edd7 7a06 	vldr	s15, [r7, #24]
 80035e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035e4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80035e8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80035ec:	00db      	lsls	r3, r3, #3
 80035ee:	3304      	adds	r3, #4
 80035f0:	68fa      	ldr	r2, [r7, #12]
 80035f2:	4413      	add	r3, r2
 80035f4:	ed97 7a05 	vldr	s14, [r7, #20]
 80035f8:	edd7 7a04 	vldr	s15, [r7, #16]
 80035fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003600:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 8003604:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003608:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800360c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003610:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 8003614:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003618:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800361c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003620:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 8003624:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8003628:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800362c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003630:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 8003634:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8003638:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800363c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003640:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 8003644:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003648:	00db      	lsls	r3, r3, #3
 800364a:	68fa      	ldr	r2, [r7, #12]
 800364c:	4413      	add	r3, r2
 800364e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003652:	edd7 7a06 	vldr	s15, [r7, #24]
 8003656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800365a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800365e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003662:	00db      	lsls	r3, r3, #3
 8003664:	3304      	adds	r3, #4
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4413      	add	r3, r2
 800366a:	ed97 7a05 	vldr	s14, [r7, #20]
 800366e:	edd7 7a04 	vldr	s15, [r7, #16]
 8003672:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003676:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800367a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800367e:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 8003682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003686:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800368a:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800368e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8003692:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003696:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800369a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800369e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80036a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036a6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 80036aa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 80036ae:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 80036b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036b6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 80036ba:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	4413      	add	r3, r2
 80036c4:	ed97 7a07 	vldr	s14, [r7, #28]
 80036c8:	edd7 7a06 	vldr	s15, [r7, #24]
 80036cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036d0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80036d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80036d8:	00db      	lsls	r3, r3, #3
 80036da:	3304      	adds	r3, #4
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4413      	add	r3, r2
 80036e0:	ed97 7a05 	vldr	s14, [r7, #20]
 80036e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80036e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036ec:	edc3 7a00 	vstr	s15, [r3]
            
            i1 += n1;
 80036f0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80036f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80036f8:	4413      	add	r3, r2
 80036fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while(i1 < fftLen);
 80036fe:	897b      	ldrh	r3, [r7, #10]
 8003700:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8003704:	429a      	cmp	r2, r3
 8003706:	f4ff abba 	bcc.w	8002e7e <arm_radix8_butterfly_f32+0x746>
         
         j++;
 800370a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800370e:	3301      	adds	r3, #1
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while(j < n2);
 8003714:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371c:	429a      	cmp	r2, r3
 800371e:	f4ff ab2c 	bcc.w	8002d7a <arm_radix8_butterfly_f32+0x642>
      
      twidCoefModifier <<= 3;
 8003722:	893b      	ldrh	r3, [r7, #8]
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	813b      	strh	r3, [r7, #8]
   } while(n2 > 7);   
 8003728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372c:	2b07      	cmp	r3, #7
 800372e:	f63f a813 	bhi.w	8002758 <arm_radix8_butterfly_f32+0x20>
}
 8003732:	e000      	b.n	8003736 <arm_radix8_butterfly_f32+0xffe>
         break;
 8003734:	bf00      	nop
}
 8003736:	bf00      	nop
 8003738:	37f4      	adds	r7, #244	; 0xf4
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop

08003744 <writeRegister>:
* @address: 8-bit address of register
* @value  : 8-bit value of corresponding register
* Since the register values to be written are 8-bit, there is no need to multiple writing
*/
void writeRegister(uint8_t address,uint8_t value)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b082      	sub	sp, #8
 8003748:	af00      	add	r7, sp, #0
 800374a:	4603      	mov	r3, r0
 800374c:	460a      	mov	r2, r1
 800374e:	71fb      	strb	r3, [r7, #7]
 8003750:	4613      	mov	r3, r2
 8003752:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	2b3f      	cmp	r3, #63	; 0x3f
 8003758:	d901      	bls.n	800375e <writeRegister+0x1a>
		address = 63;
 800375a:	233f      	movs	r3, #63	; 0x3f
 800375c:	71fb      	strb	r3, [r7, #7]
	
	// Setting R/W = 0, i.e.: Write Mode
    address &= ~(0x80);
 800375e:	79fb      	ldrb	r3, [r7, #7]
 8003760:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003764:	b2db      	uxtb	r3, r3
 8003766:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 8003768:	2200      	movs	r2, #0
 800376a:	2110      	movs	r1, #16
 800376c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003770:	f003 ff12 	bl	8007598 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 8003774:	1df9      	adds	r1, r7, #7
 8003776:	2364      	movs	r3, #100	; 0x64
 8003778:	2201      	movs	r2, #1
 800377a:	4809      	ldr	r0, [pc, #36]	; (80037a0 <writeRegister+0x5c>)
 800377c:	f005 fd89 	bl	8009292 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&SPIhandler,&value,1,100);
 8003780:	1db9      	adds	r1, r7, #6
 8003782:	2364      	movs	r3, #100	; 0x64
 8003784:	2201      	movs	r2, #1
 8003786:	4806      	ldr	r0, [pc, #24]	; (80037a0 <writeRegister+0x5c>)
 8003788:	f005 fd83 	bl	8009292 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800378c:	2201      	movs	r2, #1
 800378e:	2110      	movs	r1, #16
 8003790:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003794:	f003 ff00 	bl	8007598 <HAL_GPIO_WritePin>
	

}
 8003798:	bf00      	nop
 800379a:	3708      	adds	r7, #8
 800379c:	46bd      	mov	sp, r7
 800379e:	bd80      	pop	{r7, pc}
 80037a0:	20012920 	.word	0x20012920

080037a4 <readRegister>:
* @retval value  : array of 8-bit values of corresponding register
* @num		: number of bytes to be written
*/

void readRegister(uint8_t address,uint8_t * value, uint8_t num)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	6039      	str	r1, [r7, #0]
 80037ae:	71fb      	strb	r3, [r7, #7]
 80037b0:	4613      	mov	r3, r2
 80037b2:	71bb      	strb	r3, [r7, #6]
		if (address > 63)
 80037b4:	79fb      	ldrb	r3, [r7, #7]
 80037b6:	2b3f      	cmp	r3, #63	; 0x3f
 80037b8:	d901      	bls.n	80037be <readRegister+0x1a>
		address = 63;
 80037ba:	233f      	movs	r3, #63	; 0x3f
 80037bc:	71fb      	strb	r3, [r7, #7]
		
		// Multiple Byte Read Settings
		if (num > 1)
 80037be:	79bb      	ldrb	r3, [r7, #6]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d905      	bls.n	80037d0 <readRegister+0x2c>
		address |= 0x40;
 80037c4:	79fb      	ldrb	r3, [r7, #7]
 80037c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	71fb      	strb	r3, [r7, #7]
 80037ce:	e004      	b.n	80037da <readRegister+0x36>
		else	
		address &= ~(0x40);
 80037d0:	79fb      	ldrb	r3, [r7, #7]
 80037d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	71fb      	strb	r3, [r7, #7]
		
		// Setting R/W = 1, i.e.: Read Mode
    address |= (0x80);		
 80037da:	79fb      	ldrb	r3, [r7, #7]
 80037dc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_RESET);
 80037e4:	2200      	movs	r2, #0
 80037e6:	2110      	movs	r1, #16
 80037e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037ec:	f003 fed4 	bl	8007598 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&SPIhandler,&address,1,100);
 80037f0:	1df9      	adds	r1, r7, #7
 80037f2:	2364      	movs	r3, #100	; 0x64
 80037f4:	2201      	movs	r2, #1
 80037f6:	480a      	ldr	r0, [pc, #40]	; (8003820 <readRegister+0x7c>)
 80037f8:	f005 fd4b 	bl	8009292 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&SPIhandler,value,num,100);
 80037fc:	79bb      	ldrb	r3, [r7, #6]
 80037fe:	b29a      	uxth	r2, r3
 8003800:	2364      	movs	r3, #100	; 0x64
 8003802:	6839      	ldr	r1, [r7, #0]
 8003804:	4806      	ldr	r0, [pc, #24]	; (8003820 <readRegister+0x7c>)
 8003806:	f005 feaa 	bl	800955e <HAL_SPI_Receive>
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 800380a:	2201      	movs	r2, #1
 800380c:	2110      	movs	r1, #16
 800380e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003812:	f003 fec1 	bl	8007598 <HAL_GPIO_WritePin>
	
	
}
 8003816:	bf00      	nop
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20012920 	.word	0x20012920

08003824 <adxlBW>:
						10 		|  				100
						11 		|  				200
						12 		|  				400
			*/
void adxlBW(ADXL_InitTypeDef * adxl)
		{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
		uint8_t bwreg=0;
 800382c:	2300      	movs	r3, #0
 800382e:	73fb      	strb	r3, [r7, #15]
		writeRegister(BW_RATE,bwreg);
 8003830:	7bfb      	ldrb	r3, [r7, #15]
 8003832:	4619      	mov	r1, r3
 8003834:	202c      	movs	r0, #44	; 0x2c
 8003836:	f7ff ff85 	bl	8003744 <writeRegister>
		if (adxl->LPMode == LPMODE_LOWPOWER) 
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	789b      	ldrb	r3, [r3, #2]
 800383e:	2b01      	cmp	r3, #1
 8003840:	d11a      	bne.n	8003878 <adxlBW+0x54>
						{
						// Low power mode
						bwreg |= (1 << 4);
 8003842:	7bfb      	ldrb	r3, [r7, #15]
 8003844:	f043 0310 	orr.w	r3, r3, #16
 8003848:	73fb      	strb	r3, [r7, #15]
						if ( ((adxl->Rate) <7) || ((adxl->Rate)>12) ) bwreg += 7;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	78db      	ldrb	r3, [r3, #3]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d903      	bls.n	800385a <adxlBW+0x36>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	78db      	ldrb	r3, [r3, #3]
 8003856:	2b0c      	cmp	r3, #12
 8003858:	d903      	bls.n	8003862 <adxlBW+0x3e>
 800385a:	7bfb      	ldrb	r3, [r7, #15]
 800385c:	3307      	adds	r3, #7
 800385e:	73fb      	strb	r3, [r7, #15]
 8003860:	e004      	b.n	800386c <adxlBW+0x48>
								else bwreg +=(adxl->Rate);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	78da      	ldrb	r2, [r3, #3]
 8003866:	7bfb      	ldrb	r3, [r7, #15]
 8003868:	4413      	add	r3, r2
 800386a:	73fb      	strb	r3, [r7, #15]
						writeRegister(BW_RATE,bwreg);	
 800386c:	7bfb      	ldrb	r3, [r7, #15]
 800386e:	4619      	mov	r1, r3
 8003870:	202c      	movs	r0, #44	; 0x2c
 8003872:	f7ff ff67 	bl	8003744 <writeRegister>
	
				if ( ((adxl->Rate) <6) || ((adxl->Rate)>15) ) bwreg += 6;
						else bwreg +=(adxl->Rate);
				writeRegister(BW_RATE,bwreg);	
				}
		}
 8003876:	e015      	b.n	80038a4 <adxlBW+0x80>
				if ( ((adxl->Rate) <6) || ((adxl->Rate)>15) ) bwreg += 6;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	78db      	ldrb	r3, [r3, #3]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d903      	bls.n	8003888 <adxlBW+0x64>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	78db      	ldrb	r3, [r3, #3]
 8003884:	2b0f      	cmp	r3, #15
 8003886:	d903      	bls.n	8003890 <adxlBW+0x6c>
 8003888:	7bfb      	ldrb	r3, [r7, #15]
 800388a:	3306      	adds	r3, #6
 800388c:	73fb      	strb	r3, [r7, #15]
 800388e:	e004      	b.n	800389a <adxlBW+0x76>
						else bwreg +=(adxl->Rate);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	78da      	ldrb	r2, [r3, #3]
 8003894:	7bfb      	ldrb	r3, [r7, #15]
 8003896:	4413      	add	r3, r2
 8003898:	73fb      	strb	r3, [r7, #15]
				writeRegister(BW_RATE,bwreg);	
 800389a:	7bfb      	ldrb	r3, [r7, #15]
 800389c:	4619      	mov	r1, r3
 800389e:	202c      	movs	r0, #44	; 0x2c
 80038a0:	f7ff ff50 	bl	8003744 <writeRegister>
		}
 80038a4:	bf00      	nop
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <adxlFormat>:
						3 		|  				+-16g
	 									
		*/

void adxlFormat(ADXL_InitTypeDef * adxl)
			{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
			uint8_t formatreg=0;
 80038b4:	2300      	movs	r3, #0
 80038b6:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80038b8:	7bfb      	ldrb	r3, [r7, #15]
 80038ba:	4619      	mov	r1, r3
 80038bc:	2031      	movs	r0, #49	; 0x31
 80038be:	f7ff ff41 	bl	8003744 <writeRegister>
			formatreg = (adxl->SPIMode << 6) | (adxl->IntMode << 5) | (adxl->Justify << 2) | (adxl->Resolution << 3);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	019b      	lsls	r3, r3, #6
 80038c8:	b25a      	sxtb	r2, r3
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	785b      	ldrb	r3, [r3, #1]
 80038ce:	015b      	lsls	r3, r3, #5
 80038d0:	b25b      	sxtb	r3, r3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	b25a      	sxtb	r2, r3
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	799b      	ldrb	r3, [r3, #6]
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	b25b      	sxtb	r3, r3
 80038de:	4313      	orrs	r3, r2
 80038e0:	b25a      	sxtb	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	795b      	ldrb	r3, [r3, #5]
 80038e6:	00db      	lsls	r3, r3, #3
 80038e8:	b25b      	sxtb	r3, r3
 80038ea:	4313      	orrs	r3, r2
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	73fb      	strb	r3, [r7, #15]
			formatreg += (adxl -> Range);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	791a      	ldrb	r2, [r3, #4]
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	4413      	add	r3, r2
 80038f8:	73fb      	strb	r3, [r7, #15]
			writeRegister(DATA_FORMAT,formatreg);
 80038fa:	7bfb      	ldrb	r3, [r7, #15]
 80038fc:	4619      	mov	r1, r3
 80038fe:	2031      	movs	r0, #49	; 0x31
 8003900:	f7ff ff20 	bl	8003744 <writeRegister>
			}
 8003904:	bf00      	nop
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <ADXL_Init>:

// Public Functions

// Initializes the ADXL unit
adxlStatus ADXL_Init(ADXL_InitTypeDef * adxl, uint8_t * id)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	6039      	str	r1, [r7, #0]
	//delay_init();
	//TM_Delay_Init();
	// CS is active low. Here we deselect the chip. In each function the CS signal is asserted individually
	HAL_GPIO_WritePin(ADXLCS_GPIO_Port,ADXLCS_Pin,GPIO_PIN_SET);
 8003916:	2201      	movs	r2, #1
 8003918:	2110      	movs	r1, #16
 800391a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800391e:	f003 fe3b 	bl	8007598 <HAL_GPIO_WritePin>
	// Unknown delay should apply
	//TM_DelayMicros(10);
	// The Device Address register is constant, i.e. = 0xE5
	readRegister(DEVID, id,1);
 8003922:	2201      	movs	r2, #1
 8003924:	6839      	ldr	r1, [r7, #0]
 8003926:	2000      	movs	r0, #0
 8003928:	f7ff ff3c 	bl	80037a4 <readRegister>
	//TM_DelayMicros(10);

	// Init. of BW_RATE and DATAFORMAT registers
	adxlBW(adxl);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff79 	bl	8003824 <adxlBW>
	adxlFormat(adxl);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff ffba 	bl	80038ac <adxlFormat>
	
	// Settings gains 
	if (adxl->Resolution == RESOLUTION_10BIT)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	795b      	ldrb	r3, [r3, #5]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d140      	bne.n	80039c2 <ADXL_Init+0xb6>
			{
			switch (adxl->Range) {
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	791b      	ldrb	r3, [r3, #4]
 8003944:	2b03      	cmp	r3, #3
 8003946:	d847      	bhi.n	80039d8 <ADXL_Init+0xcc>
 8003948:	a201      	add	r2, pc, #4	; (adr r2, 8003950 <ADXL_Init+0x44>)
 800394a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800394e:	bf00      	nop
 8003950:	08003961 	.word	0x08003961
 8003954:	08003979 	.word	0x08003979
 8003958:	08003991 	.word	0x08003991
 800395c:	080039a9 	.word	0x080039a9
							case RANGE_2G:
								GAINX = GAINY = GAINZ = 1/255.0f;
 8003960:	4b35      	ldr	r3, [pc, #212]	; (8003a38 <ADXL_Init+0x12c>)
 8003962:	4a36      	ldr	r2, [pc, #216]	; (8003a3c <ADXL_Init+0x130>)
 8003964:	601a      	str	r2, [r3, #0]
 8003966:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <ADXL_Init+0x12c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a35      	ldr	r2, [pc, #212]	; (8003a40 <ADXL_Init+0x134>)
 800396c:	6013      	str	r3, [r2, #0]
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <ADXL_Init+0x134>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a34      	ldr	r2, [pc, #208]	; (8003a44 <ADXL_Init+0x138>)
 8003974:	6013      	str	r3, [r2, #0]
								break;
 8003976:	e02f      	b.n	80039d8 <ADXL_Init+0xcc>
							case RANGE_4G:
								GAINX = GAINY = GAINZ = 1/127.0f;
 8003978:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <ADXL_Init+0x12c>)
 800397a:	4a33      	ldr	r2, [pc, #204]	; (8003a48 <ADXL_Init+0x13c>)
 800397c:	601a      	str	r2, [r3, #0]
 800397e:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <ADXL_Init+0x12c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a2f      	ldr	r2, [pc, #188]	; (8003a40 <ADXL_Init+0x134>)
 8003984:	6013      	str	r3, [r2, #0]
 8003986:	4b2e      	ldr	r3, [pc, #184]	; (8003a40 <ADXL_Init+0x134>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a2e      	ldr	r2, [pc, #184]	; (8003a44 <ADXL_Init+0x138>)
 800398c:	6013      	str	r3, [r2, #0]
								break;
 800398e:	e023      	b.n	80039d8 <ADXL_Init+0xcc>
							case RANGE_8G:
								GAINX = GAINY = GAINZ = 1/63.0f;
 8003990:	4b29      	ldr	r3, [pc, #164]	; (8003a38 <ADXL_Init+0x12c>)
 8003992:	4a2e      	ldr	r2, [pc, #184]	; (8003a4c <ADXL_Init+0x140>)
 8003994:	601a      	str	r2, [r3, #0]
 8003996:	4b28      	ldr	r3, [pc, #160]	; (8003a38 <ADXL_Init+0x12c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a29      	ldr	r2, [pc, #164]	; (8003a40 <ADXL_Init+0x134>)
 800399c:	6013      	str	r3, [r2, #0]
 800399e:	4b28      	ldr	r3, [pc, #160]	; (8003a40 <ADXL_Init+0x134>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4a28      	ldr	r2, [pc, #160]	; (8003a44 <ADXL_Init+0x138>)
 80039a4:	6013      	str	r3, [r2, #0]
								break;
 80039a6:	e017      	b.n	80039d8 <ADXL_Init+0xcc>
							case RANGE_16G:
								GAINX = GAINY = GAINZ = 1/31.0f;
 80039a8:	4b23      	ldr	r3, [pc, #140]	; (8003a38 <ADXL_Init+0x12c>)
 80039aa:	4a29      	ldr	r2, [pc, #164]	; (8003a50 <ADXL_Init+0x144>)
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <ADXL_Init+0x12c>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a23      	ldr	r2, [pc, #140]	; (8003a40 <ADXL_Init+0x134>)
 80039b4:	6013      	str	r3, [r2, #0]
 80039b6:	4b22      	ldr	r3, [pc, #136]	; (8003a40 <ADXL_Init+0x134>)
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a22      	ldr	r2, [pc, #136]	; (8003a44 <ADXL_Init+0x138>)
 80039bc:	6013      	str	r3, [r2, #0]
								break;
 80039be:	bf00      	nop
 80039c0:	e00a      	b.n	80039d8 <ADXL_Init+0xcc>
								}
			} else 
			{
			GAINX = GAINY = GAINZ = 1/255.0f;
 80039c2:	4b1d      	ldr	r3, [pc, #116]	; (8003a38 <ADXL_Init+0x12c>)
 80039c4:	4a1d      	ldr	r2, [pc, #116]	; (8003a3c <ADXL_Init+0x130>)
 80039c6:	601a      	str	r2, [r3, #0]
 80039c8:	4b1b      	ldr	r3, [pc, #108]	; (8003a38 <ADXL_Init+0x12c>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a1c      	ldr	r2, [pc, #112]	; (8003a40 <ADXL_Init+0x134>)
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	4b1b      	ldr	r3, [pc, #108]	; (8003a40 <ADXL_Init+0x134>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a1b      	ldr	r2, [pc, #108]	; (8003a44 <ADXL_Init+0x138>)
 80039d6:	6013      	str	r3, [r2, #0]
			}
	// Setting AutoSleep and Link bits
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 80039d8:	f107 030f 	add.w	r3, r7, #15
 80039dc:	2201      	movs	r2, #1
 80039de:	4619      	mov	r1, r3
 80039e0:	202d      	movs	r0, #45	; 0x2d
 80039e2:	f7ff fedf 	bl	80037a4 <readRegister>
			if ( (adxl->AutoSleep) == AUTOSLEEPON) reg |= (1 << 4); else reg &= ~(1 << 4);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	79db      	ldrb	r3, [r3, #7]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d105      	bne.n	80039fa <ADXL_Init+0xee>
 80039ee:	7bfb      	ldrb	r3, [r7, #15]
 80039f0:	f043 0310 	orr.w	r3, r3, #16
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	73fb      	strb	r3, [r7, #15]
 80039f8:	e004      	b.n	8003a04 <ADXL_Init+0xf8>
 80039fa:	7bfb      	ldrb	r3, [r7, #15]
 80039fc:	f023 0310 	bic.w	r3, r3, #16
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	73fb      	strb	r3, [r7, #15]
			if ( (adxl->LinkMode) == LINKMODEON) reg |= (1 << 5); else reg &= ~(1 << 5);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	7a1b      	ldrb	r3, [r3, #8]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d105      	bne.n	8003a18 <ADXL_Init+0x10c>
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	f043 0320 	orr.w	r3, r3, #32
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	73fb      	strb	r3, [r7, #15]
 8003a16:	e004      	b.n	8003a22 <ADXL_Init+0x116>
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
 8003a1a:	f023 0320 	bic.w	r3, r3, #32
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	73fb      	strb	r3, [r7, #15]
			writeRegister(POWER_CTL,reg);
 8003a22:	7bfb      	ldrb	r3, [r7, #15]
 8003a24:	4619      	mov	r1, r3
 8003a26:	202d      	movs	r0, #45	; 0x2d
 8003a28:	f7ff fe8c 	bl	8003744 <writeRegister>
			

			//writeRegister(INT_ENABLE, 0x80);

	return ADXL_OK;
 8003a2c:	2300      	movs	r3, #0
	
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	20000244 	.word	0x20000244
 8003a3c:	3b808081 	.word	0x3b808081
 8003a40:	20000240 	.word	0x20000240
 8003a44:	2000023c 	.word	0x2000023c
 8003a48:	3c010204 	.word	0x3c010204
 8003a4c:	3c820821 	.word	0x3c820821
 8003a50:	3d042108 	.word	0x3d042108

08003a54 <ADXL_Measure>:
/** Starts Measure Mode
* @param: s = ON or OFF				

*/
void ADXL_Measure(Switch s)
		{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8003a5e:	f107 030f 	add.w	r3, r7, #15
 8003a62:	2201      	movs	r2, #1
 8003a64:	4619      	mov	r1, r3
 8003a66:	202d      	movs	r0, #45	; 0x2d
 8003a68:	f7ff fe9c 	bl	80037a4 <readRegister>
			switch (s) {
 8003a6c:	79fb      	ldrb	r3, [r7, #7]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d002      	beq.n	8003a78 <ADXL_Measure+0x24>
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d010      	beq.n	8003a98 <ADXL_Measure+0x44>
				case OFF:
				reg &= ~(1<<3);
				writeRegister(POWER_CTL,reg);
				break;				
				}
		}
 8003a76:	e01a      	b.n	8003aae <ADXL_Measure+0x5a>
				reg &= ~(1<<2);
 8003a78:	7bfb      	ldrb	r3, [r7, #15]
 8003a7a:	f023 0304 	bic.w	r3, r3, #4
 8003a7e:	b2db      	uxtb	r3, r3
 8003a80:	73fb      	strb	r3, [r7, #15]
				reg |= (1<<3);
 8003a82:	7bfb      	ldrb	r3, [r7, #15]
 8003a84:	f043 0308 	orr.w	r3, r3, #8
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003a8c:	7bfb      	ldrb	r3, [r7, #15]
 8003a8e:	4619      	mov	r1, r3
 8003a90:	202d      	movs	r0, #45	; 0x2d
 8003a92:	f7ff fe57 	bl	8003744 <writeRegister>
				break;
 8003a96:	e00a      	b.n	8003aae <ADXL_Measure+0x5a>
				reg &= ~(1<<3);
 8003a98:	7bfb      	ldrb	r3, [r7, #15]
 8003a9a:	f023 0308 	bic.w	r3, r3, #8
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
 8003aa4:	4619      	mov	r1, r3
 8003aa6:	202d      	movs	r0, #45	; 0x2d
 8003aa8:	f7ff fe4c 	bl	8003744 <writeRegister>
				break;				
 8003aac:	bf00      	nop
		}
 8003aae:	bf00      	nop
 8003ab0:	3710      	adds	r7, #16
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}

08003ab6 <ADXL_Standby>:
* @param: s = ON or OFF		
		OFF: Takes the module into sleep mode.

*/
void ADXL_Standby(Switch s)
		{
 8003ab6:	b580      	push	{r7, lr}
 8003ab8:	b084      	sub	sp, #16
 8003aba:	af00      	add	r7, sp, #0
 8003abc:	4603      	mov	r3, r0
 8003abe:	71fb      	strb	r3, [r7, #7]
			uint8_t reg;
			readRegister(POWER_CTL,&reg,1);
 8003ac0:	f107 030f 	add.w	r3, r7, #15
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	202d      	movs	r0, #45	; 0x2d
 8003aca:	f7ff fe6b 	bl	80037a4 <readRegister>
			switch (s) {
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d002      	beq.n	8003ada <ADXL_Standby+0x24>
 8003ad4:	2b01      	cmp	r3, #1
 8003ad6:	d010      	beq.n	8003afa <ADXL_Standby+0x44>
				reg |= (1<<2);
				writeRegister(POWER_CTL,reg);
				break;				
				}
			
		}
 8003ad8:	e01a      	b.n	8003b10 <ADXL_Standby+0x5a>
				reg &= ~(1<<2);
 8003ada:	7bfb      	ldrb	r3, [r7, #15]
 8003adc:	f023 0304 	bic.w	r3, r3, #4
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	73fb      	strb	r3, [r7, #15]
				reg &= ~(1<<3);
 8003ae4:	7bfb      	ldrb	r3, [r7, #15]
 8003ae6:	f023 0308 	bic.w	r3, r3, #8
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
 8003af0:	4619      	mov	r1, r3
 8003af2:	202d      	movs	r0, #45	; 0x2d
 8003af4:	f7ff fe26 	bl	8003744 <writeRegister>
				break;
 8003af8:	e00a      	b.n	8003b10 <ADXL_Standby+0x5a>
				reg |= (1<<2);
 8003afa:	7bfb      	ldrb	r3, [r7, #15]
 8003afc:	f043 0304 	orr.w	r3, r3, #4
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	73fb      	strb	r3, [r7, #15]
				writeRegister(POWER_CTL,reg);
 8003b04:	7bfb      	ldrb	r3, [r7, #15]
 8003b06:	4619      	mov	r1, r3
 8003b08:	202d      	movs	r0, #45	; 0x2d
 8003b0a:	f7ff fe1b 	bl	8003744 <writeRegister>
				break;				
 8003b0e:	bf00      	nop
		}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <ADXL345_Init>:
/*
 * TODO: Init ADXL345 parameter and Start measurement
 * */

void ADXL345_Init()
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b084      	sub	sp, #16
 8003b1c:	af00      	add	r7, sp, #0

	  ADXL_InitTypeDef adxl_config;
	  adxl_config.Range = RANGE_16G;
 8003b1e:	2303      	movs	r3, #3
 8003b20:	723b      	strb	r3, [r7, #8]
	  adxl_config.Resolution = RESOLUTION_FULL;
 8003b22:	2301      	movs	r3, #1
 8003b24:	727b      	strb	r3, [r7, #9]
	  adxl_config.AutoSleep = AUTOSLEEPOFF;
 8003b26:	2300      	movs	r3, #0
 8003b28:	72fb      	strb	r3, [r7, #11]
	  adxl_config.LPMode = LPMODE_NORMAL;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	71bb      	strb	r3, [r7, #6]
	  //adxl_config.LPMode = LPMODE_LOWPOWER;
	  adxl_config.Rate = BWRATE_3200;
 8003b2e:	230f      	movs	r3, #15
 8003b30:	71fb      	strb	r3, [r7, #7]
	  adxl_config.SPIMode = SPIMODE_4WIRE;
 8003b32:	2300      	movs	r3, #0
 8003b34:	713b      	strb	r3, [r7, #4]
	  adxl_config.IntMode = INT_ACTIVEHIGH;
 8003b36:	2300      	movs	r3, #0
 8003b38:	717b      	strb	r3, [r7, #5]

	  adxlStatus InitStatus = ADXL_Init(&adxl_config, &ADXLid);
 8003b3a:	1d3b      	adds	r3, r7, #4
 8003b3c:	490f      	ldr	r1, [pc, #60]	; (8003b7c <ADXL345_Init+0x64>)
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7ff fee4 	bl	800390c <ADXL_Init>
 8003b44:	4603      	mov	r3, r0
 8003b46:	73fb      	strb	r3, [r7, #15]
	  if(ADXLid == 0xE5)InitStatus = ADXL_OK;
 8003b48:	4b0c      	ldr	r3, [pc, #48]	; (8003b7c <ADXL345_Init+0x64>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	2be5      	cmp	r3, #229	; 0xe5
 8003b4e:	d101      	bne.n	8003b54 <ADXL345_Init+0x3c>
 8003b50:	2300      	movs	r3, #0
 8003b52:	73fb      	strb	r3, [r7, #15]
	  if(InitStatus == ADXL_OK)
 8003b54:	7bfb      	ldrb	r3, [r7, #15]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d100      	bne.n	8003b5c <ADXL345_Init+0x44>
	  {
		  __NOP();
 8003b5a:	bf00      	nop

	  }

	  ADXL_Measure(ON);
 8003b5c:	2000      	movs	r0, #0
 8003b5e:	f7ff ff79 	bl	8003a54 <ADXL_Measure>
	  writeRegister(INT_MAP, 0x10);
 8003b62:	2110      	movs	r1, #16
 8003b64:	202f      	movs	r0, #47	; 0x2f
 8003b66:	f7ff fded 	bl	8003744 <writeRegister>
	  writeRegister(INT_ENABLE, 0x80);
 8003b6a:	2180      	movs	r1, #128	; 0x80
 8003b6c:	202e      	movs	r0, #46	; 0x2e
 8003b6e:	f7ff fde9 	bl	8003744 <writeRegister>
//      //reset Interrupt
//	  readRegister(DATA0,data,6);
}
 8003b72:	bf00      	nop
 8003b74:	3710      	adds	r7, #16
 8003b76:	46bd      	mov	sp, r7
 8003b78:	bd80      	pop	{r7, pc}
 8003b7a:	bf00      	nop
 8003b7c:	20000248 	.word	0x20000248

08003b80 <AcquireData>:
/*
 *TODO: AcquireData from SPI
 * */
void AcquireData(uint8_t *data)
//void AcquireData()
{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b083      	sub	sp, #12
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]

	readRegister(DATA0,data,6);
 8003b88:	2206      	movs	r2, #6
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	2032      	movs	r0, #50	; 0x32
 8003b8e:	f7ff fe09 	bl	80037a4 <readRegister>
	XfftInstance.data0 = data[0];
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	b29a      	uxth	r2, r3
 8003b98:	4bb1      	ldr	r3, [pc, #708]	; (8003e60 <AcquireData+0x2e0>)
 8003b9a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003b9e:	801a      	strh	r2, [r3, #0]
	XfftInstance.data1 = data[1];
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	3301      	adds	r3, #1
 8003ba4:	781b      	ldrb	r3, [r3, #0]
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	4bad      	ldr	r3, [pc, #692]	; (8003e60 <AcquireData+0x2e0>)
 8003baa:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bae:	3302      	adds	r3, #2
 8003bb0:	801a      	strh	r2, [r3, #0]
	YfftInstance.data0 = data[2];
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	3302      	adds	r3, #2
 8003bb6:	781b      	ldrb	r3, [r3, #0]
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	4baa      	ldr	r3, [pc, #680]	; (8003e64 <AcquireData+0x2e4>)
 8003bbc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bc0:	801a      	strh	r2, [r3, #0]
	YfftInstance.data1 = data[3];
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	3303      	adds	r3, #3
 8003bc6:	781b      	ldrb	r3, [r3, #0]
 8003bc8:	b29a      	uxth	r2, r3
 8003bca:	4ba6      	ldr	r3, [pc, #664]	; (8003e64 <AcquireData+0x2e4>)
 8003bcc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bd0:	3302      	adds	r3, #2
 8003bd2:	801a      	strh	r2, [r3, #0]
	ZfftInstance.data0 = data[4];
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	3304      	adds	r3, #4
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	b29a      	uxth	r2, r3
 8003bdc:	4ba2      	ldr	r3, [pc, #648]	; (8003e68 <AcquireData+0x2e8>)
 8003bde:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003be2:	801a      	strh	r2, [r3, #0]
	ZfftInstance.data1 = data[5];
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	3305      	adds	r3, #5
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	4b9e      	ldr	r3, [pc, #632]	; (8003e68 <AcquireData+0x2e8>)
 8003bee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bf2:	3302      	adds	r3, #2
 8003bf4:	801a      	strh	r2, [r3, #0]
	XfftInstance.acceleration = ((uint8_t)XfftInstance.data1<<8)|(uint8_t)XfftInstance.data0;
 8003bf6:	4b9a      	ldr	r3, [pc, #616]	; (8003e60 <AcquireData+0x2e0>)
 8003bf8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003bfc:	3302      	adds	r3, #2
 8003bfe:	881b      	ldrh	r3, [r3, #0]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	021b      	lsls	r3, r3, #8
 8003c04:	b21a      	sxth	r2, r3
 8003c06:	4b96      	ldr	r3, [pc, #600]	; (8003e60 <AcquireData+0x2e0>)
 8003c08:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c0c:	881b      	ldrh	r3, [r3, #0]
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	b21b      	sxth	r3, r3
 8003c12:	4313      	orrs	r3, r2
 8003c14:	b21a      	sxth	r2, r3
 8003c16:	4b92      	ldr	r3, [pc, #584]	; (8003e60 <AcquireData+0x2e0>)
 8003c18:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c1c:	3304      	adds	r3, #4
 8003c1e:	801a      	strh	r2, [r3, #0]
	YfftInstance.acceleration = ((uint8_t)YfftInstance.data1<<8)|(uint8_t)YfftInstance.data0;
 8003c20:	4b90      	ldr	r3, [pc, #576]	; (8003e64 <AcquireData+0x2e4>)
 8003c22:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c26:	3302      	adds	r3, #2
 8003c28:	881b      	ldrh	r3, [r3, #0]
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	021b      	lsls	r3, r3, #8
 8003c2e:	b21a      	sxth	r2, r3
 8003c30:	4b8c      	ldr	r3, [pc, #560]	; (8003e64 <AcquireData+0x2e4>)
 8003c32:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	b21b      	sxth	r3, r3
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	b21a      	sxth	r2, r3
 8003c40:	4b88      	ldr	r3, [pc, #544]	; (8003e64 <AcquireData+0x2e4>)
 8003c42:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c46:	3304      	adds	r3, #4
 8003c48:	801a      	strh	r2, [r3, #0]
	ZfftInstance.acceleration = ((uint8_t)ZfftInstance.data1<<8)|(uint8_t)ZfftInstance.data0;
 8003c4a:	4b87      	ldr	r3, [pc, #540]	; (8003e68 <AcquireData+0x2e8>)
 8003c4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c50:	3302      	adds	r3, #2
 8003c52:	881b      	ldrh	r3, [r3, #0]
 8003c54:	b2db      	uxtb	r3, r3
 8003c56:	021b      	lsls	r3, r3, #8
 8003c58:	b21a      	sxth	r2, r3
 8003c5a:	4b83      	ldr	r3, [pc, #524]	; (8003e68 <AcquireData+0x2e8>)
 8003c5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c60:	881b      	ldrh	r3, [r3, #0]
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	b21b      	sxth	r3, r3
 8003c66:	4313      	orrs	r3, r2
 8003c68:	b21a      	sxth	r2, r3
 8003c6a:	4b7f      	ldr	r3, [pc, #508]	; (8003e68 <AcquireData+0x2e8>)
 8003c6c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c70:	3304      	adds	r3, #4
 8003c72:	801a      	strh	r2, [r3, #0]

	//3.9 is scale of LSB(one bit) mg, 1000 is scale to g
	XfftInstance.accelerationfloat = (float)XfftInstance.acceleration * 3.9 / 1000;
 8003c74:	4b7a      	ldr	r3, [pc, #488]	; (8003e60 <AcquireData+0x2e0>)
 8003c76:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003c80:	ee07 3a90 	vmov	s15, r3
 8003c84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c88:	ee17 0a90 	vmov	r0, s15
 8003c8c:	f7fc fcdc 	bl	8000648 <__aeabi_f2d>
 8003c90:	a371      	add	r3, pc, #452	; (adr r3, 8003e58 <AcquireData+0x2d8>)
 8003c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c96:	f7fc fd2f 	bl	80006f8 <__aeabi_dmul>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	460c      	mov	r4, r1
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	4621      	mov	r1, r4
 8003ca2:	f04f 0200 	mov.w	r2, #0
 8003ca6:	4b71      	ldr	r3, [pc, #452]	; (8003e6c <AcquireData+0x2ec>)
 8003ca8:	f7fc fe50 	bl	800094c <__aeabi_ddiv>
 8003cac:	4603      	mov	r3, r0
 8003cae:	460c      	mov	r4, r1
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	4621      	mov	r1, r4
 8003cb4:	f7fc fff8 	bl	8000ca8 <__aeabi_d2f>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b69      	ldr	r3, [pc, #420]	; (8003e60 <AcquireData+0x2e0>)
 8003cbc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	601a      	str	r2, [r3, #0]
	YfftInstance.accelerationfloat = (float)YfftInstance.acceleration  * 3.9 / 1000;
 8003cc4:	4b67      	ldr	r3, [pc, #412]	; (8003e64 <AcquireData+0x2e4>)
 8003cc6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003cca:	3304      	adds	r3, #4
 8003ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cd0:	ee07 3a90 	vmov	s15, r3
 8003cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cd8:	ee17 0a90 	vmov	r0, s15
 8003cdc:	f7fc fcb4 	bl	8000648 <__aeabi_f2d>
 8003ce0:	a35d      	add	r3, pc, #372	; (adr r3, 8003e58 <AcquireData+0x2d8>)
 8003ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce6:	f7fc fd07 	bl	80006f8 <__aeabi_dmul>
 8003cea:	4603      	mov	r3, r0
 8003cec:	460c      	mov	r4, r1
 8003cee:	4618      	mov	r0, r3
 8003cf0:	4621      	mov	r1, r4
 8003cf2:	f04f 0200 	mov.w	r2, #0
 8003cf6:	4b5d      	ldr	r3, [pc, #372]	; (8003e6c <AcquireData+0x2ec>)
 8003cf8:	f7fc fe28 	bl	800094c <__aeabi_ddiv>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	460c      	mov	r4, r1
 8003d00:	4618      	mov	r0, r3
 8003d02:	4621      	mov	r1, r4
 8003d04:	f7fc ffd0 	bl	8000ca8 <__aeabi_d2f>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <AcquireData+0x2e4>)
 8003d0c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d10:	3308      	adds	r3, #8
 8003d12:	601a      	str	r2, [r3, #0]
	ZfftInstance.accelerationfloat = (float)ZfftInstance.acceleration  * 3.9 / 1000;
 8003d14:	4b54      	ldr	r3, [pc, #336]	; (8003e68 <AcquireData+0x2e8>)
 8003d16:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d1a:	3304      	adds	r3, #4
 8003d1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d20:	ee07 3a90 	vmov	s15, r3
 8003d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d28:	ee17 0a90 	vmov	r0, s15
 8003d2c:	f7fc fc8c 	bl	8000648 <__aeabi_f2d>
 8003d30:	a349      	add	r3, pc, #292	; (adr r3, 8003e58 <AcquireData+0x2d8>)
 8003d32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d36:	f7fc fcdf 	bl	80006f8 <__aeabi_dmul>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	460c      	mov	r4, r1
 8003d3e:	4618      	mov	r0, r3
 8003d40:	4621      	mov	r1, r4
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	4b49      	ldr	r3, [pc, #292]	; (8003e6c <AcquireData+0x2ec>)
 8003d48:	f7fc fe00 	bl	800094c <__aeabi_ddiv>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	460c      	mov	r4, r1
 8003d50:	4618      	mov	r0, r3
 8003d52:	4621      	mov	r1, r4
 8003d54:	f7fc ffa8 	bl	8000ca8 <__aeabi_d2f>
 8003d58:	4602      	mov	r2, r0
 8003d5a:	4b43      	ldr	r3, [pc, #268]	; (8003e68 <AcquireData+0x2e8>)
 8003d5c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d60:	3308      	adds	r3, #8
 8003d62:	601a      	str	r2, [r3, #0]

	// move X axis data to buffer
	XfftInstance.bufferforFFT[sampleIndex * 2] = XfftInstance.accelerationfloat;
 8003d64:	4b42      	ldr	r3, [pc, #264]	; (8003e70 <AcquireData+0x2f0>)
 8003d66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d6a:	0059      	lsls	r1, r3, #1
 8003d6c:	4b3c      	ldr	r3, [pc, #240]	; (8003e60 <AcquireData+0x2e0>)
 8003d6e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003d72:	3308      	adds	r3, #8
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	483a      	ldr	r0, [pc, #232]	; (8003e60 <AcquireData+0x2e0>)
 8003d78:	008b      	lsls	r3, r1, #2
 8003d7a:	4403      	add	r3, r0
 8003d7c:	601a      	str	r2, [r3, #0]
	XfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003d7e:	4b3c      	ldr	r3, [pc, #240]	; (8003e70 <AcquireData+0x2f0>)
 8003d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d84:	005b      	lsls	r3, r3, #1
 8003d86:	3301      	adds	r3, #1
 8003d88:	4a35      	ldr	r2, [pc, #212]	; (8003e60 <AcquireData+0x2e0>)
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	4413      	add	r3, r2
 8003d8e:	f04f 0200 	mov.w	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
	XfftInstance.bufferforTimeSV[sampleIndex] = XfftInstance.accelerationfloat;
 8003d94:	4b36      	ldr	r3, [pc, #216]	; (8003e70 <AcquireData+0x2f0>)
 8003d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <AcquireData+0x2e0>)
 8003d9e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003da2:	3308      	adds	r3, #8
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	492e      	ldr	r1, [pc, #184]	; (8003e60 <AcquireData+0x2e0>)
 8003da8:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003dac:	009b      	lsls	r3, r3, #2
 8003dae:	440b      	add	r3, r1
 8003db0:	601a      	str	r2, [r3, #0]

	// move Y axis data to buffer
	YfftInstance.bufferforFFT[sampleIndex * 2] = YfftInstance.accelerationfloat;
 8003db2:	4b2f      	ldr	r3, [pc, #188]	; (8003e70 <AcquireData+0x2f0>)
 8003db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003db8:	0059      	lsls	r1, r3, #1
 8003dba:	4b2a      	ldr	r3, [pc, #168]	; (8003e64 <AcquireData+0x2e4>)
 8003dbc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003dc0:	3308      	adds	r3, #8
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	4827      	ldr	r0, [pc, #156]	; (8003e64 <AcquireData+0x2e4>)
 8003dc6:	008b      	lsls	r3, r1, #2
 8003dc8:	4403      	add	r3, r0
 8003dca:	601a      	str	r2, [r3, #0]
	YfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003dcc:	4b28      	ldr	r3, [pc, #160]	; (8003e70 <AcquireData+0x2f0>)
 8003dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dd2:	005b      	lsls	r3, r3, #1
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <AcquireData+0x2e4>)
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	601a      	str	r2, [r3, #0]
	YfftInstance.bufferforTimeSV[sampleIndex] = YfftInstance.accelerationfloat;
 8003de2:	4b23      	ldr	r3, [pc, #140]	; (8003e70 <AcquireData+0x2f0>)
 8003de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003de8:	4618      	mov	r0, r3
 8003dea:	4b1e      	ldr	r3, [pc, #120]	; (8003e64 <AcquireData+0x2e4>)
 8003dec:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003df0:	3308      	adds	r3, #8
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	491b      	ldr	r1, [pc, #108]	; (8003e64 <AcquireData+0x2e4>)
 8003df6:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	601a      	str	r2, [r3, #0]

	// move Z axis data to buffer
	ZfftInstance.bufferforFFT[sampleIndex * 2] = ZfftInstance.accelerationfloat;
 8003e00:	4b1b      	ldr	r3, [pc, #108]	; (8003e70 <AcquireData+0x2f0>)
 8003e02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e06:	0059      	lsls	r1, r3, #1
 8003e08:	4b17      	ldr	r3, [pc, #92]	; (8003e68 <AcquireData+0x2e8>)
 8003e0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003e0e:	3308      	adds	r3, #8
 8003e10:	681a      	ldr	r2, [r3, #0]
 8003e12:	4815      	ldr	r0, [pc, #84]	; (8003e68 <AcquireData+0x2e8>)
 8003e14:	008b      	lsls	r3, r1, #2
 8003e16:	4403      	add	r3, r0
 8003e18:	601a      	str	r2, [r3, #0]
	ZfftInstance.bufferforFFT[sampleIndex * 2+1] = 0;
 8003e1a:	4b15      	ldr	r3, [pc, #84]	; (8003e70 <AcquireData+0x2f0>)
 8003e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e20:	005b      	lsls	r3, r3, #1
 8003e22:	3301      	adds	r3, #1
 8003e24:	4a10      	ldr	r2, [pc, #64]	; (8003e68 <AcquireData+0x2e8>)
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	f04f 0200 	mov.w	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
	ZfftInstance.bufferforTimeSV[sampleIndex] = ZfftInstance.accelerationfloat;
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <AcquireData+0x2f0>)
 8003e32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003e36:	4618      	mov	r0, r3
 8003e38:	4b0b      	ldr	r3, [pc, #44]	; (8003e68 <AcquireData+0x2e8>)
 8003e3a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
 8003e3e:	3308      	adds	r3, #8
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	4909      	ldr	r1, [pc, #36]	; (8003e68 <AcquireData+0x2e8>)
 8003e44:	f500 5380 	add.w	r3, r0, #4096	; 0x1000
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	440b      	add	r3, r1
 8003e4c:	601a      	str	r2, [r3, #0]


}
 8003e4e:	bf00      	nop
 8003e50:	370c      	adds	r7, #12
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd90      	pop	{r4, r7, pc}
 8003e56:	bf00      	nop
 8003e58:	33333333 	.word	0x33333333
 8003e5c:	400f3333 	.word	0x400f3333
 8003e60:	2000a914 	.word	0x2000a914
 8003e64:	20012984 	.word	0x20012984
 8003e68:	200028b8 	.word	0x200028b8
 8003e6c:	408f4000 	.word	0x408f4000
 8003e70:	20000256 	.word	0x20000256

08003e74 <FeatureExtraction>:
 *TODO : Calculate Time domain and Frequency Domain
 * */


void FeatureExtraction()
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
	//Calculate Z axis statistic
	movingAverage_filter(ZfftInstance.bufferforTimeSV, ZfftInstance.bufferforfilter, 2048,5);
 8003e78:	2305      	movs	r3, #5
 8003e7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e7e:	491d      	ldr	r1, [pc, #116]	; (8003ef4 <FeatureExtraction+0x80>)
 8003e80:	481d      	ldr	r0, [pc, #116]	; (8003ef8 <FeatureExtraction+0x84>)
 8003e82:	f000 f853 	bl	8003f2c <movingAverage_filter>
	Calculate_FFT_RMS(ZfftInstance.bufferforFFT, testOutput, fftSize, &Zstatistic_value);
 8003e86:	4b1d      	ldr	r3, [pc, #116]	; (8003efc <FeatureExtraction+0x88>)
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b1d      	ldr	r3, [pc, #116]	; (8003f00 <FeatureExtraction+0x8c>)
 8003e8c:	491d      	ldr	r1, [pc, #116]	; (8003f04 <FeatureExtraction+0x90>)
 8003e8e:	481e      	ldr	r0, [pc, #120]	; (8003f08 <FeatureExtraction+0x94>)
 8003e90:	f000 f98e 	bl	80041b0 <Calculate_FFT_RMS>
	Calculate_All_statisitc(ZfftInstance.bufferforfilter, dataLength/2, &Zstatistic_value);
 8003e94:	4a1a      	ldr	r2, [pc, #104]	; (8003f00 <FeatureExtraction+0x8c>)
 8003e96:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003e9a:	4816      	ldr	r0, [pc, #88]	; (8003ef4 <FeatureExtraction+0x80>)
 8003e9c:	f000 f956 	bl	800414c <Calculate_All_statisitc>

	//Calculate X axis statistic
	movingAverage_filter(XfftInstance.bufferforTimeSV, XfftInstance.bufferforfilter, 2048,5);
 8003ea0:	2305      	movs	r3, #5
 8003ea2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ea6:	4919      	ldr	r1, [pc, #100]	; (8003f0c <FeatureExtraction+0x98>)
 8003ea8:	4819      	ldr	r0, [pc, #100]	; (8003f10 <FeatureExtraction+0x9c>)
 8003eaa:	f000 f83f 	bl	8003f2c <movingAverage_filter>
	Calculate_FFT_RMS(XfftInstance.bufferforFFT, testOutput, fftSize, &Xstatistic_value);
 8003eae:	4b13      	ldr	r3, [pc, #76]	; (8003efc <FeatureExtraction+0x88>)
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	4b18      	ldr	r3, [pc, #96]	; (8003f14 <FeatureExtraction+0xa0>)
 8003eb4:	4913      	ldr	r1, [pc, #76]	; (8003f04 <FeatureExtraction+0x90>)
 8003eb6:	4818      	ldr	r0, [pc, #96]	; (8003f18 <FeatureExtraction+0xa4>)
 8003eb8:	f000 f97a 	bl	80041b0 <Calculate_FFT_RMS>
	Calculate_All_statisitc(XfftInstance.bufferforfilter, dataLength/2, &Xstatistic_value);
 8003ebc:	4a15      	ldr	r2, [pc, #84]	; (8003f14 <FeatureExtraction+0xa0>)
 8003ebe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003ec2:	4812      	ldr	r0, [pc, #72]	; (8003f0c <FeatureExtraction+0x98>)
 8003ec4:	f000 f942 	bl	800414c <Calculate_All_statisitc>

	//Calculate Y axis statistic
	movingAverage_filter(YfftInstance.bufferforTimeSV, YfftInstance.bufferforfilter, 2048,5);
 8003ec8:	2305      	movs	r3, #5
 8003eca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003ece:	4913      	ldr	r1, [pc, #76]	; (8003f1c <FeatureExtraction+0xa8>)
 8003ed0:	4813      	ldr	r0, [pc, #76]	; (8003f20 <FeatureExtraction+0xac>)
 8003ed2:	f000 f82b 	bl	8003f2c <movingAverage_filter>
	Calculate_FFT_RMS(YfftInstance.bufferforFFT , testOutput, fftSize, &Ystatistic_value);
 8003ed6:	4b09      	ldr	r3, [pc, #36]	; (8003efc <FeatureExtraction+0x88>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b12      	ldr	r3, [pc, #72]	; (8003f24 <FeatureExtraction+0xb0>)
 8003edc:	4909      	ldr	r1, [pc, #36]	; (8003f04 <FeatureExtraction+0x90>)
 8003ede:	4812      	ldr	r0, [pc, #72]	; (8003f28 <FeatureExtraction+0xb4>)
 8003ee0:	f000 f966 	bl	80041b0 <Calculate_FFT_RMS>
	Calculate_All_statisitc(YfftInstance.bufferforfilter, dataLength/2, &Ystatistic_value);
 8003ee4:	4a0f      	ldr	r2, [pc, #60]	; (8003f24 <FeatureExtraction+0xb0>)
 8003ee6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003eea:	480c      	ldr	r0, [pc, #48]	; (8003f1c <FeatureExtraction+0xa8>)
 8003eec:	f000 f92e 	bl	800414c <Calculate_All_statisitc>


}
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	200088c4 	.word	0x200088c4
 8003ef8:	200068b8 	.word	0x200068b8
 8003efc:	20000000 	.word	0x20000000
 8003f00:	20002468 	.word	0x20002468
 8003f04:	20000468 	.word	0x20000468
 8003f08:	200028b8 	.word	0x200028b8
 8003f0c:	20010920 	.word	0x20010920
 8003f10:	2000e914 	.word	0x2000e914
 8003f14:	20000264 	.word	0x20000264
 8003f18:	2000a914 	.word	0x2000a914
 8003f1c:	20018990 	.word	0x20018990
 8003f20:	20016984 	.word	0x20016984
 8003f24:	20000310 	.word	0x20000310
 8003f28:	20012984 	.word	0x20012984

08003f2c <movingAverage_filter>:

void movingAverage_filter(float * input_data, float * filterdata, int length, int filterOrder)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]
 8003f38:	603b      	str	r3, [r7, #0]

	for(uint16_t i=0; i<length; i++)
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	82fb      	strh	r3, [r7, #22]
 8003f3e:	e07d      	b.n	800403c <movingAverage_filter+0x110>
	{
		if(i > filterOrder )
 8003f40:	8afb      	ldrh	r3, [r7, #22]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	429a      	cmp	r2, r3
 8003f46:	da3f      	bge.n	8003fc8 <movingAverage_filter+0x9c>
		{
			filterdata[i] = (input_data[i] + input_data[i-1] + input_data[i-2]+ input_data[i-3]+ input_data[i-4]) / filterOrder;
 8003f48:	8afb      	ldrh	r3, [r7, #22]
 8003f4a:	009b      	lsls	r3, r3, #2
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	4413      	add	r3, r2
 8003f50:	ed93 7a00 	vldr	s14, [r3]
 8003f54:	8afb      	ldrh	r3, [r7, #22]
 8003f56:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	009b      	lsls	r3, r3, #2
 8003f5e:	68fa      	ldr	r2, [r7, #12]
 8003f60:	4413      	add	r3, r2
 8003f62:	edd3 7a00 	vldr	s15, [r3]
 8003f66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f6a:	8afb      	ldrh	r3, [r7, #22]
 8003f6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f70:	3b02      	subs	r3, #2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	68fa      	ldr	r2, [r7, #12]
 8003f76:	4413      	add	r3, r2
 8003f78:	edd3 7a00 	vldr	s15, [r3]
 8003f7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f80:	8afb      	ldrh	r3, [r7, #22]
 8003f82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f86:	3b03      	subs	r3, #3
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	edd3 7a00 	vldr	s15, [r3]
 8003f92:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f9c:	3b04      	subs	r3, #4
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4413      	add	r3, r2
 8003fa4:	edd3 7a00 	vldr	s15, [r3]
 8003fa8:	ee77 6a27 	vadd.f32	s13, s14, s15
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003fb6:	8afb      	ldrh	r3, [r7, #22]
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	4413      	add	r3, r2
 8003fbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fc2:	edc3 7a00 	vstr	s15, [r3]
 8003fc6:	e036      	b.n	8004036 <movingAverage_filter+0x10a>
		}
		else
		{
			filterdata[i] = (input_data[i] + input_data[i+1] + input_data[i+2]+ input_data[i+3]+  input_data[i+4]) / filterOrder  ;
 8003fc8:	8afb      	ldrh	r3, [r7, #22]
 8003fca:	009b      	lsls	r3, r3, #2
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4413      	add	r3, r2
 8003fd0:	ed93 7a00 	vldr	s14, [r3]
 8003fd4:	8afb      	ldrh	r3, [r7, #22]
 8003fd6:	3301      	adds	r3, #1
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	4413      	add	r3, r2
 8003fde:	edd3 7a00 	vldr	s15, [r3]
 8003fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fe6:	8afb      	ldrh	r3, [r7, #22]
 8003fe8:	3302      	adds	r3, #2
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	edd3 7a00 	vldr	s15, [r3]
 8003ff4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ff8:	8afb      	ldrh	r3, [r7, #22]
 8003ffa:	3303      	adds	r3, #3
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	68fa      	ldr	r2, [r7, #12]
 8004000:	4413      	add	r3, r2
 8004002:	edd3 7a00 	vldr	s15, [r3]
 8004006:	ee37 7a27 	vadd.f32	s14, s14, s15
 800400a:	8afb      	ldrh	r3, [r7, #22]
 800400c:	3304      	adds	r3, #4
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	4413      	add	r3, r2
 8004014:	edd3 7a00 	vldr	s15, [r3]
 8004018:	ee77 6a27 	vadd.f32	s13, s14, s15
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	ee07 3a90 	vmov	s15, r3
 8004022:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004026:	8afb      	ldrh	r3, [r7, #22]
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	4413      	add	r3, r2
 800402e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004032:	edc3 7a00 	vstr	s15, [r3]
	for(uint16_t i=0; i<length; i++)
 8004036:	8afb      	ldrh	r3, [r7, #22]
 8004038:	3301      	adds	r3, #1
 800403a:	82fb      	strh	r3, [r7, #22]
 800403c:	8afb      	ldrh	r3, [r7, #22]
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	429a      	cmp	r2, r3
 8004042:	f73f af7d 	bgt.w	8003f40 <movingAverage_filter+0x14>
		}
	}

}
 8004046:	bf00      	nop
 8004048:	371c      	adds	r7, #28
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
	...

08004054 <Calculate_FreqOverAll>:
	float Kurtosis = m4 / (m2 * m2) - 3.0;
    return Kurtosis;
}

float Calculate_FreqOverAll(float *x, int n)
{
 8004054:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004056:	b08b      	sub	sp, #44	; 0x2c
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	6039      	str	r1, [r7, #0]
	float ParsevalFftPower = 0;
 800405e:	f04f 0300 	mov.w	r3, #0
 8004062:	627b      	str	r3, [r7, #36]	; 0x24

	float32_t samplingRate = 3200;
 8004064:	4b37      	ldr	r3, [pc, #220]	; (8004144 <Calculate_FreqOverAll+0xf0>)
 8004066:	61fb      	str	r3, [r7, #28]
	float32_t frequencyScale = samplingRate/(float)n;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	ee07 3a90 	vmov	s15, r3
 800406e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004072:	edd7 6a07 	vldr	s13, [r7, #28]
 8004076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800407a:	edc7 7a06 	vstr	s15, [r7, #24]
	int target_fre_calculation_end = 1000 / frequencyScale;
 800407e:	eddf 6a32 	vldr	s13, [pc, #200]	; 8004148 <Calculate_FreqOverAll+0xf4>
 8004082:	ed97 7a06 	vldr	s14, [r7, #24]
 8004086:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800408a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800408e:	ee17 3a90 	vmov	r3, s15
 8004092:	617b      	str	r3, [r7, #20]
	int target_fre_calculation_start = 10 / (float)frequencyScale;
 8004094:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8004098:	ed97 7a06 	vldr	s14, [r7, #24]
 800409c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80040a0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80040a4:	ee17 3a90 	vmov	r3, s15
 80040a8:	613b      	str	r3, [r7, #16]
	float ans = 0;
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	60fb      	str	r3, [r7, #12]
	for(int i = target_fre_calculation_start; i<target_fre_calculation_end; i++)
 80040b0:	693b      	ldr	r3, [r7, #16]
 80040b2:	623b      	str	r3, [r7, #32]
 80040b4:	e016      	b.n	80040e4 <Calculate_FreqOverAll+0x90>
	{
		//FFTRMSArray[i] = (testOutput[i]*2)/4096;
		ParsevalFftPower += x[i] * x[i];
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	4413      	add	r3, r2
 80040be:	ed93 7a00 	vldr	s14, [r3]
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	4413      	add	r3, r2
 80040ca:	edd3 7a00 	vldr	s15, [r3]
 80040ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80040d2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80040d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	for(int i = target_fre_calculation_start; i<target_fre_calculation_end; i++)
 80040de:	6a3b      	ldr	r3, [r7, #32]
 80040e0:	3301      	adds	r3, #1
 80040e2:	623b      	str	r3, [r7, #32]
 80040e4:	6a3a      	ldr	r2, [r7, #32]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	dbe4      	blt.n	80040b6 <Calculate_FreqOverAll+0x62>
	}

	ans = sqrt(2 * ParsevalFftPower)/n;
 80040ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80040f0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80040f4:	ee17 0a90 	vmov	r0, s15
 80040f8:	f7fc faa6 	bl	8000648 <__aeabi_f2d>
 80040fc:	4603      	mov	r3, r0
 80040fe:	460c      	mov	r4, r1
 8004100:	ec44 3b10 	vmov	d0, r3, r4
 8004104:	f009 fc5c 	bl	800d9c0 <sqrt>
 8004108:	ec56 5b10 	vmov	r5, r6, d0
 800410c:	6838      	ldr	r0, [r7, #0]
 800410e:	f7fc fa89 	bl	8000624 <__aeabi_i2d>
 8004112:	4603      	mov	r3, r0
 8004114:	460c      	mov	r4, r1
 8004116:	461a      	mov	r2, r3
 8004118:	4623      	mov	r3, r4
 800411a:	4628      	mov	r0, r5
 800411c:	4631      	mov	r1, r6
 800411e:	f7fc fc15 	bl	800094c <__aeabi_ddiv>
 8004122:	4603      	mov	r3, r0
 8004124:	460c      	mov	r4, r1
 8004126:	4618      	mov	r0, r3
 8004128:	4621      	mov	r1, r4
 800412a:	f7fc fdbd 	bl	8000ca8 <__aeabi_d2f>
 800412e:	4603      	mov	r3, r0
 8004130:	60fb      	str	r3, [r7, #12]


	return ans;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	ee07 3a90 	vmov	s15, r3
}
 8004138:	eeb0 0a67 	vmov.f32	s0, s15
 800413c:	372c      	adds	r7, #44	; 0x2c
 800413e:	46bd      	mov	sp, r7
 8004140:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004142:	bf00      	nop
 8004144:	45480000 	.word	0x45480000
 8004148:	447a0000 	.word	0x447a0000

0800414c <Calculate_All_statisitc>:

void Calculate_All_statisitc(float32_t *statisticDataSet, uint16_t dataLength, Sv *staticInstance)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	460b      	mov	r3, r1
 8004156:	607a      	str	r2, [r7, #4]
 8004158:	817b      	strh	r3, [r7, #10]
	uint32_t maxtestIndex = 0;
 800415a:	2300      	movs	r3, #0
 800415c:	617b      	str	r3, [r7, #20]
	uint32_t mintestIndex = 0;
 800415e:	2300      	movs	r3, #0
 8004160:	613b      	str	r3, [r7, #16]

	arm_max_f32(statisticDataSet, dataLength, &staticInstance->Statistic_max, &maxtestIndex);
 8004162:	8979      	ldrh	r1, [r7, #10]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	f107 0314 	add.w	r3, r7, #20
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f7fd f84e 	bl	800120c <arm_max_f32>
	arm_min_f32(statisticDataSet, dataLength, &staticInstance->Statistic_min, &mintestIndex);
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	1d1a      	adds	r2, r3, #4
 8004176:	f107 0310 	add.w	r3, r7, #16
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f7fd f8dc 	bl	8001338 <arm_min_f32>
	arm_rms_f32(statisticDataSet, dataLength, &staticInstance->Statistic_rms);
 8004180:	8979      	ldrh	r1, [r7, #10]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	330c      	adds	r3, #12
 8004186:	461a      	mov	r2, r3
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7fd f98d 	bl	80014a8 <arm_rms_f32>
	staticInstance->Statistic_p2p = 1 * (staticInstance->Statistic_max - staticInstance->Statistic_min);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	ed93 7a00 	vldr	s14, [r3]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	edd3 7a01 	vldr	s15, [r3, #4]
 800419a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

}
 80041a4:	bf00      	nop
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	0000      	movs	r0, r0
	...

080041b0 <Calculate_FFT_RMS>:

void Calculate_FFT_RMS(float32_t * bufferforFFT, float32_t * OutputFFTbuffer, int32_t fftSize, Sv *staticInstance)
{
 80041b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041b4:	f5ad 4d80 	sub.w	sp, sp, #16384	; 0x4000
 80041b8:	b08e      	sub	sp, #56	; 0x38
 80041ba:	af00      	add	r7, sp, #0
 80041bc:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80041c0:	3c2c      	subs	r4, #44	; 0x2c
 80041c2:	6020      	str	r0, [r4, #0]
 80041c4:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80041c8:	3830      	subs	r0, #48	; 0x30
 80041ca:	6001      	str	r1, [r0, #0]
 80041cc:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80041d0:	3934      	subs	r1, #52	; 0x34
 80041d2:	600a      	str	r2, [r1, #0]
 80041d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041d8:	3a38      	subs	r2, #56	; 0x38
 80041da:	6013      	str	r3, [r2, #0]
	float32_t maxValue = 0;
 80041dc:	f04f 0300 	mov.w	r3, #0
 80041e0:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80041e4:	f102 0218 	add.w	r2, r2, #24
 80041e8:	6013      	str	r3, [r2, #0]
	float32_t Speeddatabuffer[2048];
	float32_t displacementbuffer[2048];
	uint32_t testIndex = 0;
 80041ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80041ee:	3b24      	subs	r3, #36	; 0x24
 80041f0:	2200      	movs	r2, #0
 80041f2:	601a      	str	r2, [r3, #0]
	uint32_t ifftFlag = 0;
 80041f4:	2300      	movs	r3, #0
 80041f6:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80041fa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80041fe:	6013      	str	r3, [r2, #0]
	uint32_t doBitReverse = 1;
 8004200:	2301      	movs	r3, #1
 8004202:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004206:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800420a:	6013      	str	r3, [r2, #0]

	arm_cfft_f32(&arm_cfft_sR_f32_len2048, bufferforFFT, ifftFlag, doBitReverse);
 800420c:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004210:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	b2da      	uxtb	r2, r3
 8004218:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800421c:	f103 0328 	add.w	r3, r3, #40	; 0x28
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	b2db      	uxtb	r3, r3
 8004224:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004228:	392c      	subs	r1, #44	; 0x2c
 800422a:	6809      	ldr	r1, [r1, #0]
 800422c:	4887      	ldr	r0, [pc, #540]	; (800444c <Calculate_FFT_RMS+0x29c>)
 800422e:	f7fe f9df 	bl	80025f0 <arm_cfft_f32>

	/* Process the data through the Complex Magnitude Module for
	calculating the magnitude at each bin */
	arm_cmplx_mag_f32(bufferforFFT, OutputFFTbuffer, fftSize);
 8004232:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004236:	3b34      	subs	r3, #52	; 0x34
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	f107 0138 	add.w	r1, r7, #56	; 0x38
 800423e:	3930      	subs	r1, #48	; 0x30
 8004240:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004244:	3b2c      	subs	r3, #44	; 0x2c
 8004246:	6809      	ldr	r1, [r1, #0]
 8004248:	6818      	ldr	r0, [r3, #0]
 800424a:	f7fc ff1f 	bl	800108c <arm_cmplx_mag_f32>

	/* Calculates maxValue and returns corresponding BIN value */
	arm_max_f32(OutputFFTbuffer, fftSize, &maxValue, &testIndex);
 800424e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004252:	3b34      	subs	r3, #52	; 0x34
 8004254:	6819      	ldr	r1, [r3, #0]
 8004256:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800425a:	3b24      	subs	r3, #36	; 0x24
 800425c:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004260:	f102 0218 	add.w	r2, r2, #24
 8004264:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004268:	3830      	subs	r0, #48	; 0x30
 800426a:	6800      	ldr	r0, [r0, #0]
 800426c:	f7fc ffce 	bl	800120c <arm_max_f32>


	for(uint16_t i = 0; i < fftSize; i++)
 8004270:	2300      	movs	r3, #0
 8004272:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004276:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800427a:	8013      	strh	r3, [r2, #0]
 800427c:	e023      	b.n	80042c6 <Calculate_FFT_RMS+0x116>
	{
		Speeddatabuffer[i] = OutputFFTbuffer[i];
 800427e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004282:	f103 0336 	add.w	r3, r3, #54	; 0x36
 8004286:	881b      	ldrh	r3, [r3, #0]
 8004288:	009a      	lsls	r2, r3, #2
 800428a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800428e:	3b30      	subs	r3, #48	; 0x30
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4413      	add	r3, r2
 8004294:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 8004298:	f102 0236 	add.w	r2, r2, #54	; 0x36
 800429c:	8811      	ldrh	r1, [r2, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80042a4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80042a8:	3b20      	subs	r3, #32
 80042aa:	0089      	lsls	r1, r1, #2
 80042ac:	440b      	add	r3, r1
 80042ae:	601a      	str	r2, [r3, #0]
	for(uint16_t i = 0; i < fftSize; i++)
 80042b0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80042b4:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80042b8:	881b      	ldrh	r3, [r3, #0]
 80042ba:	3301      	adds	r3, #1
 80042bc:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80042c0:	f102 0236 	add.w	r2, r2, #54	; 0x36
 80042c4:	8013      	strh	r3, [r2, #0]
 80042c6:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80042ca:	f103 0336 	add.w	r3, r3, #54	; 0x36
 80042ce:	881a      	ldrh	r2, [r3, #0]
 80042d0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042d4:	3b34      	subs	r3, #52	; 0x34
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4293      	cmp	r3, r2
 80042da:	dcd0      	bgt.n	800427e <Calculate_FFT_RMS+0xce>
	}

	//TODO: remove low frequency noise (DC component)
	OutputFFTbuffer[0] = 0;
 80042dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042e0:	3b30      	subs	r3, #48	; 0x30
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[1] = 0;
 80042ea:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042ee:	3b30      	subs	r3, #48	; 0x30
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	3304      	adds	r3, #4
 80042f4:	f04f 0200 	mov.w	r2, #0
 80042f8:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[2] = 0;
 80042fa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80042fe:	3b30      	subs	r3, #48	; 0x30
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3308      	adds	r3, #8
 8004304:	f04f 0200 	mov.w	r2, #0
 8004308:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[3] = 0;
 800430a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800430e:	3b30      	subs	r3, #48	; 0x30
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[4] = 0;
 800431a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800431e:	3b30      	subs	r3, #48	; 0x30
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	3310      	adds	r3, #16
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[5] = 0;
 800432a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800432e:	3b30      	subs	r3, #48	; 0x30
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	3314      	adds	r3, #20
 8004334:	f04f 0200 	mov.w	r2, #0
 8004338:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[6] = 0;
 800433a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800433e:	3b30      	subs	r3, #48	; 0x30
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3318      	adds	r3, #24
 8004344:	f04f 0200 	mov.w	r2, #0
 8004348:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[7] = 0;
 800434a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800434e:	3b30      	subs	r3, #48	; 0x30
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	331c      	adds	r3, #28
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[8] = 0;
 800435a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800435e:	3b30      	subs	r3, #48	; 0x30
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3320      	adds	r3, #32
 8004364:	f04f 0200 	mov.w	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
	OutputFFTbuffer[9] = 0;
 800436a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800436e:	3b30      	subs	r3, #48	; 0x30
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	3324      	adds	r3, #36	; 0x24
 8004374:	f04f 0200 	mov.w	r2, #0
 8004378:	601a      	str	r2, [r3, #0]

	staticInstance->Statistic_FreqOvall = Calculate_FreqOverAll(OutputFFTbuffer,2048);
 800437a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800437e:	3b30      	subs	r3, #48	; 0x30
 8004380:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	f7ff fe65 	bl	8004054 <Calculate_FreqOverAll>
 800438a:	eef0 7a40 	vmov.f32	s15, s0
 800438e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004392:	3b38      	subs	r3, #56	; 0x38
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	/*
	 * Compute Speed Ovall
	 *
	 * */
	float32_t sampleCount = 2048;
 800439a:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800439e:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80043a2:	f102 0224 	add.w	r2, r2, #36	; 0x24
 80043a6:	6013      	str	r3, [r2, #0]
	float32_t samplingRate = 3200;
 80043a8:	4b29      	ldr	r3, [pc, #164]	; (8004450 <Calculate_FFT_RMS+0x2a0>)
 80043aa:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80043ae:	f102 0220 	add.w	r2, r2, #32
 80043b2:	6013      	str	r3, [r2, #0]
	float32_t frequencyScale = samplingRate/sampleCount;
 80043b4:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80043b8:	f103 0320 	add.w	r3, r3, #32
 80043bc:	edd3 6a00 	vldr	s13, [r3]
 80043c0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80043c4:	f103 0324 	add.w	r3, r3, #36	; 0x24
 80043c8:	ed93 7a00 	vldr	s14, [r3]
 80043cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043d0:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80043d4:	f103 031c 	add.w	r3, r3, #28
 80043d8:	edc3 7a00 	vstr	s15, [r3]

	//2021/0202/George
	//TODO : calculate velocity (speed) overall(RMS)
	for(uint16_t i = 1; i < fftSize / 2; i++)
 80043dc:	2301      	movs	r3, #1
 80043de:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80043e2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80043e6:	8013      	strh	r3, [r2, #0]
 80043e8:	e093      	b.n	8004512 <Calculate_FFT_RMS+0x362>
	{
		if(i < fftSize/2)
 80043ea:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80043ee:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80043f2:	881a      	ldrh	r2, [r3, #0]
 80043f4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80043f8:	3b34      	subs	r3, #52	; 0x34
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	0fd9      	lsrs	r1, r3, #31
 80043fe:	440b      	add	r3, r1
 8004400:	105b      	asrs	r3, r3, #1
 8004402:	429a      	cmp	r2, r3
 8004404:	da7a      	bge.n	80044fc <Calculate_FFT_RMS+0x34c>
		{
			if(i ==0)
 8004406:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800440a:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800440e:	881b      	ldrh	r3, [r3, #0]
 8004410:	2b00      	cmp	r3, #0
 8004412:	d121      	bne.n	8004458 <Calculate_FFT_RMS+0x2a8>
			{
				Speeddatabuffer[i] = Speeddatabuffer[i];
 8004414:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004418:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800441c:	881a      	ldrh	r2, [r3, #0]
 800441e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004422:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004426:	8819      	ldrh	r1, [r3, #0]
 8004428:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800442c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004430:	3b20      	subs	r3, #32
 8004432:	0092      	lsls	r2, r2, #2
 8004434:	4413      	add	r3, r2
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 800443c:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004440:	3b20      	subs	r3, #32
 8004442:	0089      	lsls	r1, r1, #2
 8004444:	440b      	add	r3, r1
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	e058      	b.n	80044fc <Calculate_FFT_RMS+0x34c>
 800444a:	bf00      	nop
 800444c:	08013db8 	.word	0x08013db8
 8004450:	45480000 	.word	0x45480000
 8004454:	46193c00 	.word	0x46193c00
			}
			else
			{
				Speeddatabuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 8004458:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800445c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004460:	881a      	ldrh	r2, [r3, #0]
 8004462:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004466:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800446a:	3b20      	subs	r3, #32
 800446c:	0092      	lsls	r2, r2, #2
 800446e:	4413      	add	r3, r2
 8004470:	edd3 7a00 	vldr	s15, [r3]
 8004474:	ed1f 7a09 	vldr	s14, [pc, #-36]	; 8004454 <Calculate_FFT_RMS+0x2a4>
 8004478:	ee67 7a87 	vmul.f32	s15, s15, s14
 800447c:	ee17 0a90 	vmov	r0, s15
 8004480:	f7fc f8e2 	bl	8000648 <__aeabi_f2d>
 8004484:	4604      	mov	r4, r0
 8004486:	460d      	mov	r5, r1
 8004488:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800448c:	f103 031c 	add.w	r3, r3, #28
 8004490:	6818      	ldr	r0, [r3, #0]
 8004492:	f7fc f8d9 	bl	8000648 <__aeabi_f2d>
 8004496:	a3be      	add	r3, pc, #760	; (adr r3, 8004790 <Calculate_FFT_RMS+0x5e0>)
 8004498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449c:	f7fc f92c 	bl	80006f8 <__aeabi_dmul>
 80044a0:	4602      	mov	r2, r0
 80044a2:	460b      	mov	r3, r1
 80044a4:	4690      	mov	r8, r2
 80044a6:	4699      	mov	r9, r3
 80044a8:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80044ac:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc f8b6 	bl	8000624 <__aeabi_i2d>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4640      	mov	r0, r8
 80044be:	4649      	mov	r1, r9
 80044c0:	f7fc f91a 	bl	80006f8 <__aeabi_dmul>
 80044c4:	4602      	mov	r2, r0
 80044c6:	460b      	mov	r3, r1
 80044c8:	4620      	mov	r0, r4
 80044ca:	4629      	mov	r1, r5
 80044cc:	f7fc fa3e 	bl	800094c <__aeabi_ddiv>
 80044d0:	4603      	mov	r3, r0
 80044d2:	460c      	mov	r4, r1
 80044d4:	461a      	mov	r2, r3
 80044d6:	4623      	mov	r3, r4
 80044d8:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 80044dc:	f101 0134 	add.w	r1, r1, #52	; 0x34
 80044e0:	880c      	ldrh	r4, [r1, #0]
 80044e2:	4610      	mov	r0, r2
 80044e4:	4619      	mov	r1, r3
 80044e6:	f7fc fbdf 	bl	8000ca8 <__aeabi_d2f>
 80044ea:	4601      	mov	r1, r0
 80044ec:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80044f0:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80044f4:	3b20      	subs	r3, #32
 80044f6:	00a2      	lsls	r2, r4, #2
 80044f8:	4413      	add	r3, r2
 80044fa:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 1; i < fftSize / 2; i++)
 80044fc:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004500:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8004504:	881b      	ldrh	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 800450c:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8004510:	8013      	strh	r3, [r2, #0]
 8004512:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004516:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800451a:	881a      	ldrh	r2, [r3, #0]
 800451c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004520:	3b34      	subs	r3, #52	; 0x34
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	0fd9      	lsrs	r1, r3, #31
 8004526:	440b      	add	r3, r1
 8004528:	105b      	asrs	r3, r3, #1
 800452a:	429a      	cmp	r2, r3
 800452c:	f6ff af5d 	blt.w	80043ea <Calculate_FFT_RMS+0x23a>

		}

	}

	Speeddatabuffer[0] = 0;
 8004530:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004534:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004538:	3b20      	subs	r3, #32
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	601a      	str	r2, [r3, #0]
	Speeddatabuffer[1] = 0;
 8004540:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004544:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004548:	3b20      	subs	r3, #32
 800454a:	f04f 0200 	mov.w	r2, #0
 800454e:	605a      	str	r2, [r3, #4]
	Speeddatabuffer[2] = 0;
 8004550:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004554:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004558:	3b20      	subs	r3, #32
 800455a:	f04f 0200 	mov.w	r2, #0
 800455e:	609a      	str	r2, [r3, #8]
	Speeddatabuffer[3] = 0;
 8004560:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004564:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004568:	3b20      	subs	r3, #32
 800456a:	f04f 0200 	mov.w	r2, #0
 800456e:	60da      	str	r2, [r3, #12]
	Speeddatabuffer[4] = 0;
 8004570:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004574:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004578:	3b20      	subs	r3, #32
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	611a      	str	r2, [r3, #16]
	Speeddatabuffer[5] = 0;
 8004580:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004584:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004588:	3b20      	subs	r3, #32
 800458a:	f04f 0200 	mov.w	r2, #0
 800458e:	615a      	str	r2, [r3, #20]
	Speeddatabuffer[6] = 0;
 8004590:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004594:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004598:	3b20      	subs	r3, #32
 800459a:	f04f 0200 	mov.w	r2, #0
 800459e:	619a      	str	r2, [r3, #24]
	Speeddatabuffer[7] = 0;
 80045a0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80045a4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80045a8:	3b20      	subs	r3, #32
 80045aa:	f04f 0200 	mov.w	r2, #0
 80045ae:	61da      	str	r2, [r3, #28]
	Speeddatabuffer[8] = 0;
 80045b0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80045b4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80045b8:	3b20      	subs	r3, #32
 80045ba:	f04f 0200 	mov.w	r2, #0
 80045be:	621a      	str	r2, [r3, #32]
	Speeddatabuffer[9] = 0;
 80045c0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80045c4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80045c8:	3b20      	subs	r3, #32
 80045ca:	f04f 0200 	mov.w	r2, #0
 80045ce:	625a      	str	r2, [r3, #36]	; 0x24
	Speeddatabuffer[10] = 0;
 80045d0:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 80045d4:	f103 0338 	add.w	r3, r3, #56	; 0x38
 80045d8:	3b20      	subs	r3, #32
 80045da:	f04f 0200 	mov.w	r2, #0
 80045de:	629a      	str	r2, [r3, #40]	; 0x28

	//2021/0202/George
	//TODO : calculate displacement overall(RMS)
	for(uint16_t i = 1; i < fftSize / 2; i++)
 80045e0:	2301      	movs	r3, #1
 80045e2:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80045e6:	f102 0232 	add.w	r2, r2, #50	; 0x32
 80045ea:	8013      	strh	r3, [r2, #0]
 80045ec:	e088      	b.n	8004700 <Calculate_FFT_RMS+0x550>
	{
		if(i < fftSize/2)
 80045ee:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80045f2:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80045f6:	881a      	ldrh	r2, [r3, #0]
 80045f8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80045fc:	3b34      	subs	r3, #52	; 0x34
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	0fd9      	lsrs	r1, r3, #31
 8004602:	440b      	add	r3, r1
 8004604:	105b      	asrs	r3, r3, #1
 8004606:	429a      	cmp	r2, r3
 8004608:	da6f      	bge.n	80046ea <Calculate_FFT_RMS+0x53a>
		{
			if(i ==0)
 800460a:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800460e:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8004612:	881b      	ldrh	r3, [r3, #0]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d118      	bne.n	800464a <Calculate_FFT_RMS+0x49a>
			{
				displacementbuffer[i] = Speeddatabuffer[i];
 8004618:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800461c:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8004620:	881a      	ldrh	r2, [r3, #0]
 8004622:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004626:	f103 0332 	add.w	r3, r3, #50	; 0x32
 800462a:	8819      	ldrh	r1, [r3, #0]
 800462c:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004630:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004634:	3b20      	subs	r3, #32
 8004636:	0092      	lsls	r2, r2, #2
 8004638:	4413      	add	r3, r2
 800463a:	681a      	ldr	r2, [r3, #0]
 800463c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004640:	3b20      	subs	r3, #32
 8004642:	0089      	lsls	r1, r1, #2
 8004644:	440b      	add	r3, r1
 8004646:	601a      	str	r2, [r3, #0]
 8004648:	e04f      	b.n	80046ea <Calculate_FFT_RMS+0x53a>
			}
			else
			{
				displacementbuffer[i] = (Speeddatabuffer[i] * 9807) / (2 * 3.1415926 * frequencyScale * i);
 800464a:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800464e:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8004652:	881a      	ldrh	r2, [r3, #0]
 8004654:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004658:	f103 0338 	add.w	r3, r3, #56	; 0x38
 800465c:	3b20      	subs	r3, #32
 800465e:	0092      	lsls	r2, r2, #2
 8004660:	4413      	add	r3, r2
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8004798 <Calculate_FFT_RMS+0x5e8>
 800466a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800466e:	ee17 0a90 	vmov	r0, s15
 8004672:	f7fb ffe9 	bl	8000648 <__aeabi_f2d>
 8004676:	4604      	mov	r4, r0
 8004678:	460d      	mov	r5, r1
 800467a:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800467e:	f103 031c 	add.w	r3, r3, #28
 8004682:	6818      	ldr	r0, [r3, #0]
 8004684:	f7fb ffe0 	bl	8000648 <__aeabi_f2d>
 8004688:	a341      	add	r3, pc, #260	; (adr r3, 8004790 <Calculate_FFT_RMS+0x5e0>)
 800468a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800468e:	f7fc f833 	bl	80006f8 <__aeabi_dmul>
 8004692:	4602      	mov	r2, r0
 8004694:	460b      	mov	r3, r1
 8004696:	4690      	mov	r8, r2
 8004698:	4699      	mov	r9, r3
 800469a:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 800469e:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80046a2:	881b      	ldrh	r3, [r3, #0]
 80046a4:	4618      	mov	r0, r3
 80046a6:	f7fb ffbd 	bl	8000624 <__aeabi_i2d>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4640      	mov	r0, r8
 80046b0:	4649      	mov	r1, r9
 80046b2:	f7fc f821 	bl	80006f8 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4620      	mov	r0, r4
 80046bc:	4629      	mov	r1, r5
 80046be:	f7fc f945 	bl	800094c <__aeabi_ddiv>
 80046c2:	4603      	mov	r3, r0
 80046c4:	460c      	mov	r4, r1
 80046c6:	461a      	mov	r2, r3
 80046c8:	4623      	mov	r3, r4
 80046ca:	f507 4180 	add.w	r1, r7, #16384	; 0x4000
 80046ce:	f101 0132 	add.w	r1, r1, #50	; 0x32
 80046d2:	880c      	ldrh	r4, [r1, #0]
 80046d4:	4610      	mov	r0, r2
 80046d6:	4619      	mov	r1, r3
 80046d8:	f7fc fae6 	bl	8000ca8 <__aeabi_d2f>
 80046dc:	4601      	mov	r1, r0
 80046de:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80046e2:	3b20      	subs	r3, #32
 80046e4:	00a2      	lsls	r2, r4, #2
 80046e6:	4413      	add	r3, r2
 80046e8:	6019      	str	r1, [r3, #0]
	for(uint16_t i = 1; i < fftSize / 2; i++)
 80046ea:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 80046ee:	f103 0332 	add.w	r3, r3, #50	; 0x32
 80046f2:	881b      	ldrh	r3, [r3, #0]
 80046f4:	3301      	adds	r3, #1
 80046f6:	f507 4280 	add.w	r2, r7, #16384	; 0x4000
 80046fa:	f102 0232 	add.w	r2, r2, #50	; 0x32
 80046fe:	8013      	strh	r3, [r2, #0]
 8004700:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004704:	f103 0332 	add.w	r3, r3, #50	; 0x32
 8004708:	881a      	ldrh	r2, [r3, #0]
 800470a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800470e:	3b34      	subs	r3, #52	; 0x34
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	0fd9      	lsrs	r1, r3, #31
 8004714:	440b      	add	r3, r1
 8004716:	105b      	asrs	r3, r3, #1
 8004718:	429a      	cmp	r2, r3
 800471a:	f6ff af68 	blt.w	80045ee <Calculate_FFT_RMS+0x43e>
		}

	}


	staticInstance->Statistic_SpeedOvall = Calculate_FreqOverAll(Speeddatabuffer,sampleCount);
 800471e:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004722:	f103 0324 	add.w	r3, r3, #36	; 0x24
 8004726:	edd3 7a00 	vldr	s15, [r3]
 800472a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800472e:	f507 5300 	add.w	r3, r7, #8192	; 0x2000
 8004732:	f103 0338 	add.w	r3, r3, #56	; 0x38
 8004736:	3b20      	subs	r3, #32
 8004738:	ee17 1a90 	vmov	r1, s15
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fc89 	bl	8004054 <Calculate_FreqOverAll>
 8004742:	eef0 7a40 	vmov.f32	s15, s0
 8004746:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800474a:	3b38      	subs	r3, #56	; 0x38
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
	staticInstance->Statistic_DisplacementOvall =  Calculate_FreqOverAll(displacementbuffer,sampleCount);
 8004752:	f507 4380 	add.w	r3, r7, #16384	; 0x4000
 8004756:	f103 0324 	add.w	r3, r3, #36	; 0x24
 800475a:	edd3 7a00 	vldr	s15, [r3]
 800475e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004762:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004766:	3b20      	subs	r3, #32
 8004768:	ee17 1a90 	vmov	r1, s15
 800476c:	4618      	mov	r0, r3
 800476e:	f7ff fc71 	bl	8004054 <Calculate_FreqOverAll>
 8004772:	eef0 7a40 	vmov.f32	s15, s0
 8004776:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800477a:	3b38      	subs	r3, #56	; 0x38
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
}
 8004782:	bf00      	nop
 8004784:	f507 4780 	add.w	r7, r7, #16384	; 0x4000
 8004788:	3738      	adds	r7, #56	; 0x38
 800478a:	46bd      	mov	sp, r7
 800478c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004790:	4d12d84a 	.word	0x4d12d84a
 8004794:	401921fb 	.word	0x401921fb
 8004798:	46193c00 	.word	0x46193c00

0800479c <delay_init>:

//初始化延遲函式
//SYSTICK的時鐘固定為HCLK時鐘的1/8
//SYSCLK:系統時鐘
void delay_init(uint8_t SYSCLK)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	4603      	mov	r3, r0
 80047a4:	71fb      	strb	r3, [r7, #7]
	SysTick->CTRL&=0xfffffffb;//bit2清空,選擇外部時鐘  HCLK/8
 80047a6:	4b0e      	ldr	r3, [pc, #56]	; (80047e0 <delay_init+0x44>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a0d      	ldr	r2, [pc, #52]	; (80047e0 <delay_init+0x44>)
 80047ac:	f023 0304 	bic.w	r3, r3, #4
 80047b0:	6013      	str	r3, [r2, #0]
	fac_us=SYSCLK/8;
 80047b2:	79fb      	ldrb	r3, [r7, #7]
 80047b4:	08db      	lsrs	r3, r3, #3
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <delay_init+0x48>)
 80047ba:	701a      	strb	r2, [r3, #0]
	fac_ms=(uint16_t)fac_us*1000;
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <delay_init+0x48>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	461a      	mov	r2, r3
 80047c4:	0152      	lsls	r2, r2, #5
 80047c6:	1ad2      	subs	r2, r2, r3
 80047c8:	0092      	lsls	r2, r2, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	b29a      	uxth	r2, r3
 80047d0:	4b05      	ldr	r3, [pc, #20]	; (80047e8 <delay_init+0x4c>)
 80047d2:	801a      	strh	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	370c      	adds	r7, #12
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	e000e010 	.word	0xe000e010
 80047e4:	20000249 	.word	0x20000249
 80047e8:	2000024a 	.word	0x2000024a

080047ec <LoRa_USART>:
TIM_HandleTypeDef htim2;

/* Private variables ---------------------------------------------------------*/

void LoRa_USART(UART_HandleTypeDef *huart)
{
 80047ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80047f0:	b086      	sub	sp, #24
 80047f2:	af04      	add	r7, sp, #16
 80047f4:	6078      	str	r0, [r7, #4]
    while(USARTLoRa.ResStatus!=LoRa_Sleep)
 80047f6:	e1c1      	b.n	8004b7c <LoRa_USART+0x390>
    {
		switch(USARTLoRa.Status)
 80047f8:	4bb8      	ldr	r3, [pc, #736]	; (8004adc <LoRa_USART+0x2f0>)
 80047fa:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80047fe:	2b07      	cmp	r3, #7
 8004800:	f200 81bc 	bhi.w	8004b7c <LoRa_USART+0x390>
 8004804:	a201      	add	r2, pc, #4	; (adr r2, 800480c <LoRa_USART+0x20>)
 8004806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800480a:	bf00      	nop
 800480c:	0800482d 	.word	0x0800482d
 8004810:	08004851 	.word	0x08004851
 8004814:	0800487f 	.word	0x0800487f
 8004818:	080048b7 	.word	0x080048b7
 800481c:	080048fb 	.word	0x080048fb
 8004820:	08004a53 	.word	0x08004a53
 8004824:	08004aad 	.word	0x08004aad
 8004828:	08004b01 	.word	0x08004b01
	    {
			case WakeUp:
				WakeUpTrigger(huart);
 800482c:	6878      	ldr	r0, [r7, #4]
 800482e:	f000 fee5 	bl	80055fc <WakeUpTrigger>
				if(USARTLoRa.ResStatus!=LoRa_HDRest)
 8004832:	4baa      	ldr	r3, [pc, #680]	; (8004adc <LoRa_USART+0x2f0>)
 8004834:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004838:	2b18      	cmp	r3, #24
 800483a:	d004      	beq.n	8004846 <LoRa_USART+0x5a>
					USARTLoRa.Status=CheckJoinST;
 800483c:	4ba7      	ldr	r3, [pc, #668]	; (8004adc <LoRa_USART+0x2f0>)
 800483e:	2201      	movs	r2, #1
 8004840:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004844:	e19a      	b.n	8004b7c <LoRa_USART+0x390>
				else
					USARTLoRa.ResStatus=LoRa_OK;
 8004846:	4ba5      	ldr	r3, [pc, #660]	; (8004adc <LoRa_USART+0x2f0>)
 8004848:	2200      	movs	r2, #0
 800484a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
				break;
 800484e:	e195      	b.n	8004b7c <LoRa_USART+0x390>

			case CheckJoinST:
				USARTLoRa.ResStatus=CheckJoinStatus(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 ff25 	bl	80056a0 <CheckJoinStatus>
 8004856:	4603      	mov	r3, r0
 8004858:	461a      	mov	r2, r3
 800485a:	4ba0      	ldr	r3, [pc, #640]	; (8004adc <LoRa_USART+0x2f0>)
 800485c:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
				if(USARTLoRa.ResStatus==LoRa_joined)
 8004860:	4b9e      	ldr	r3, [pc, #632]	; (8004adc <LoRa_USART+0x2f0>)
 8004862:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004866:	2b13      	cmp	r3, #19
 8004868:	d104      	bne.n	8004874 <LoRa_USART+0x88>
				 	USARTLoRa.Status=SendData;
 800486a:	4b9c      	ldr	r3, [pc, #624]	; (8004adc <LoRa_USART+0x2f0>)
 800486c:	2204      	movs	r2, #4
 800486e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004872:	e183      	b.n	8004b7c <LoRa_USART+0x390>
				else
					USARTLoRa.Status=Init;
 8004874:	4b99      	ldr	r3, [pc, #612]	; (8004adc <LoRa_USART+0x2f0>)
 8004876:	2202      	movs	r2, #2
 8004878:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
				break;
 800487c:	e17e      	b.n	8004b7c <LoRa_USART+0x390>

	    	case Init:
	    		//-------Reset Factor--------
	    		LoRaFactorReset(huart);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fe8a 	bl	8005598 <LoRaFactorReset>
	    		//-------Reset chip--------
	    		LoRaChipReset(huart);
 8004884:	6878      	ldr	r0, [r7, #4]
 8004886:	f000 fe55 	bl	8005534 <LoRaChipReset>
	    		USARTLoRa.ResStatus=LoRaInit(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f98a 	bl	8004ba4 <LoRaInit>
 8004890:	4603      	mov	r3, r0
 8004892:	461a      	mov	r2, r3
 8004894:	4b91      	ldr	r3, [pc, #580]	; (8004adc <LoRa_USART+0x2f0>)
 8004896:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	    		if(USARTLoRa.ResStatus==LoRa_OK)
 800489a:	4b90      	ldr	r3, [pc, #576]	; (8004adc <LoRa_USART+0x2f0>)
 800489c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f040 816b 	bne.w	8004b7c <LoRa_USART+0x390>
	    		{
	    			LoRaChipReset(huart);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f000 fe44 	bl	8005534 <LoRaChipReset>
	    			USARTLoRa.Status=JoinABP;
 80048ac:	4b8b      	ldr	r3, [pc, #556]	; (8004adc <LoRa_USART+0x2f0>)
 80048ae:	2203      	movs	r2, #3
 80048b0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	    		}
	    		break;
 80048b4:	e162      	b.n	8004b7c <LoRa_USART+0x390>

	    	case JoinABP:
	    		USARTLoRa.ResStatus=ActiveABPMode(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 fbb2 	bl	8005020 <ActiveABPMode>
 80048bc:	4603      	mov	r3, r0
 80048be:	461a      	mov	r2, r3
 80048c0:	4b86      	ldr	r3, [pc, #536]	; (8004adc <LoRa_USART+0x2f0>)
 80048c2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	    		if(USARTLoRa.ResStatus==LoRa_OK)
 80048c6:	4b85      	ldr	r3, [pc, #532]	; (8004adc <LoRa_USART+0x2f0>)
 80048c8:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d104      	bne.n	80048da <LoRa_USART+0xee>
	    			USARTLoRa.Status=SendData;
 80048d0:	4b82      	ldr	r3, [pc, #520]	; (8004adc <LoRa_USART+0x2f0>)
 80048d2:	2204      	movs	r2, #4
 80048d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80048d8:	e150      	b.n	8004b7c <LoRa_USART+0x390>
	    		else if(USARTLoRa.ResStatus==LoRa_Join_keys_not_init || USARTLoRa.ResStatus==LoRa_unexpected_Err)
 80048da:	4b80      	ldr	r3, [pc, #512]	; (8004adc <LoRa_USART+0x2f0>)
 80048dc:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d005      	beq.n	80048f0 <LoRa_USART+0x104>
 80048e4:	4b7d      	ldr	r3, [pc, #500]	; (8004adc <LoRa_USART+0x2f0>)
 80048e6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80048ea:	2b17      	cmp	r3, #23
 80048ec:	f040 8146 	bne.w	8004b7c <LoRa_USART+0x390>
	    			//-------if ActiveABPMode fail, Reset chip--------
	    			USARTLoRa.Status=Init;
 80048f0:	4b7a      	ldr	r3, [pc, #488]	; (8004adc <LoRa_USART+0x2f0>)
 80048f2:	2202      	movs	r2, #2
 80048f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	    		break;
 80048f8:	e140      	b.n	8004b7c <LoRa_USART+0x390>

	    	case SendData:
	    		USARTLoRa.sendflag = 1;
 80048fa:	4b78      	ldr	r3, [pc, #480]	; (8004adc <LoRa_USART+0x2f0>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	701a      	strb	r2, [r3, #0]
            	if(USARTLoRa.sendflag ==1)
 8004900:	4b76      	ldr	r3, [pc, #472]	; (8004adc <LoRa_USART+0x2f0>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8139 	beq.w	8004b7c <LoRa_USART+0x390>
            		//------Data Format transfer int & float to hex------------------------------------------------------------------
					//transfer data to string array:DataStrBuffer

            		//***********Put the Sensor Data Here to Transmit by LoRa*****************
            		//TODO:--Wayne20200723
            		sprintf(USARTLoRa.DataStrBuffer,"%.3f,%.3f,%.3f", Zstatistic_value.Statistic_FreqOvall,
 800490a:	4b75      	ldr	r3, [pc, #468]	; (8004ae0 <LoRa_USART+0x2f4>)
 800490c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490e:	4618      	mov	r0, r3
 8004910:	f7fb fe9a 	bl	8000648 <__aeabi_f2d>
 8004914:	4680      	mov	r8, r0
 8004916:	4689      	mov	r9, r1
            		            				Zstatistic_value.Statistic_p2p, Zstatistic_value.Statistic_SpeedOvall);
 8004918:	4b71      	ldr	r3, [pc, #452]	; (8004ae0 <LoRa_USART+0x2f4>)
 800491a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
            		sprintf(USARTLoRa.DataStrBuffer,"%.3f,%.3f,%.3f", Zstatistic_value.Statistic_FreqOvall,
 800491e:	4618      	mov	r0, r3
 8004920:	f7fb fe92 	bl	8000648 <__aeabi_f2d>
 8004924:	4604      	mov	r4, r0
 8004926:	460d      	mov	r5, r1
            		            				Zstatistic_value.Statistic_p2p, Zstatistic_value.Statistic_SpeedOvall);
 8004928:	4b6d      	ldr	r3, [pc, #436]	; (8004ae0 <LoRa_USART+0x2f4>)
 800492a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
            		sprintf(USARTLoRa.DataStrBuffer,"%.3f,%.3f,%.3f", Zstatistic_value.Statistic_FreqOvall,
 800492c:	4618      	mov	r0, r3
 800492e:	f7fb fe8b 	bl	8000648 <__aeabi_f2d>
 8004932:	4602      	mov	r2, r0
 8004934:	460b      	mov	r3, r1
 8004936:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800493a:	e9cd 4500 	strd	r4, r5, [sp]
 800493e:	4642      	mov	r2, r8
 8004940:	464b      	mov	r3, r9
 8004942:	4968      	ldr	r1, [pc, #416]	; (8004ae4 <LoRa_USART+0x2f8>)
 8004944:	4868      	ldr	r0, [pc, #416]	; (8004ae8 <LoRa_USART+0x2fc>)
 8004946:	f007 fc59 	bl	800c1fc <siprintf>
            		//sprintf(USARTLoRa.DataStrBuffer,"1234567890");
            		//************************************************************************

            		//transfer data to hex array:DataHexBuffer
            		USARTLoRa.DataStrSize = min(Uart_Buffer_Size, strlen(USARTLoRa.DataStrBuffer));
 800494a:	4867      	ldr	r0, [pc, #412]	; (8004ae8 <LoRa_USART+0x2fc>)
 800494c:	f7fb fcba 	bl	80002c4 <strlen>
 8004950:	4603      	mov	r3, r0
 8004952:	2b76      	cmp	r3, #118	; 0x76
 8004954:	d804      	bhi.n	8004960 <LoRa_USART+0x174>
 8004956:	4864      	ldr	r0, [pc, #400]	; (8004ae8 <LoRa_USART+0x2fc>)
 8004958:	f7fb fcb4 	bl	80002c4 <strlen>
 800495c:	4603      	mov	r3, r0
 800495e:	e000      	b.n	8004962 <LoRa_USART+0x176>
 8004960:	2376      	movs	r3, #118	; 0x76
 8004962:	4a5e      	ldr	r2, [pc, #376]	; (8004adc <LoRa_USART+0x2f0>)
 8004964:	f8c2 329c 	str.w	r3, [r2, #668]	; 0x29c
            		static char toHexn, n;
            		memset( USARTLoRa.DataHexBuffer, 0, strlen(USARTLoRa.DataHexBuffer) ); //clear DataHexBuffer
 8004968:	4860      	ldr	r0, [pc, #384]	; (8004aec <LoRa_USART+0x300>)
 800496a:	f7fb fcab 	bl	80002c4 <strlen>
 800496e:	4603      	mov	r3, r0
 8004970:	461a      	mov	r2, r3
 8004972:	2100      	movs	r1, #0
 8004974:	485d      	ldr	r0, [pc, #372]	; (8004aec <LoRa_USART+0x300>)
 8004976:	f006 ffdd 	bl	800b934 <memset>
					for(toHexn=0; toHexn < USARTLoRa.DataStrSize; toHexn++)
 800497a:	4b5d      	ldr	r3, [pc, #372]	; (8004af0 <LoRa_USART+0x304>)
 800497c:	2200      	movs	r2, #0
 800497e:	701a      	strb	r2, [r3, #0]
 8004980:	e035      	b.n	80049ee <LoRa_USART+0x202>
					{
						memset( USARTLoRa.DataHextemp, 0, strlen(USARTLoRa.DataHextemp) ); //clear DataHextemp
 8004982:	485c      	ldr	r0, [pc, #368]	; (8004af4 <LoRa_USART+0x308>)
 8004984:	f7fb fc9e 	bl	80002c4 <strlen>
 8004988:	4603      	mov	r3, r0
 800498a:	461a      	mov	r2, r3
 800498c:	2100      	movs	r1, #0
 800498e:	4859      	ldr	r0, [pc, #356]	; (8004af4 <LoRa_USART+0x308>)
 8004990:	f006 ffd0 	bl	800b934 <memset>
						sprintf(USARTLoRa.DataHextemp,"%x",USARTLoRa.DataStrBuffer[toHexn]);
 8004994:	4b56      	ldr	r3, [pc, #344]	; (8004af0 <LoRa_USART+0x304>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	4b50      	ldr	r3, [pc, #320]	; (8004adc <LoRa_USART+0x2f0>)
 800499c:	4413      	add	r3, r2
 800499e:	f893 3020 	ldrb.w	r3, [r3, #32]
 80049a2:	461a      	mov	r2, r3
 80049a4:	4954      	ldr	r1, [pc, #336]	; (8004af8 <LoRa_USART+0x30c>)
 80049a6:	4853      	ldr	r0, [pc, #332]	; (8004af4 <LoRa_USART+0x308>)
 80049a8:	f007 fc28 	bl	800c1fc <siprintf>
						USARTLoRa.DataHexBuffer[n]=USARTLoRa.DataHextemp[0];
 80049ac:	4b53      	ldr	r3, [pc, #332]	; (8004afc <LoRa_USART+0x310>)
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	4619      	mov	r1, r3
 80049b2:	4b4a      	ldr	r3, [pc, #296]	; (8004adc <LoRa_USART+0x2f0>)
 80049b4:	f893 2116 	ldrb.w	r2, [r3, #278]	; 0x116
 80049b8:	4b48      	ldr	r3, [pc, #288]	; (8004adc <LoRa_USART+0x2f0>)
 80049ba:	440b      	add	r3, r1
 80049bc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
						USARTLoRa.DataHexBuffer[n+1]=USARTLoRa.DataHextemp[1];
 80049c0:	4b4e      	ldr	r3, [pc, #312]	; (8004afc <LoRa_USART+0x310>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	3301      	adds	r3, #1
 80049c6:	4a45      	ldr	r2, [pc, #276]	; (8004adc <LoRa_USART+0x2f0>)
 80049c8:	f892 1117 	ldrb.w	r1, [r2, #279]	; 0x117
 80049cc:	4a43      	ldr	r2, [pc, #268]	; (8004adc <LoRa_USART+0x2f0>)
 80049ce:	4413      	add	r3, r2
 80049d0:	460a      	mov	r2, r1
 80049d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
						n+=2;
 80049d6:	4b49      	ldr	r3, [pc, #292]	; (8004afc <LoRa_USART+0x310>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	3302      	adds	r3, #2
 80049dc:	b2da      	uxtb	r2, r3
 80049de:	4b47      	ldr	r3, [pc, #284]	; (8004afc <LoRa_USART+0x310>)
 80049e0:	701a      	strb	r2, [r3, #0]
					for(toHexn=0; toHexn < USARTLoRa.DataStrSize; toHexn++)
 80049e2:	4b43      	ldr	r3, [pc, #268]	; (8004af0 <LoRa_USART+0x304>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	3301      	adds	r3, #1
 80049e8:	b2da      	uxtb	r2, r3
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <LoRa_USART+0x304>)
 80049ec:	701a      	strb	r2, [r3, #0]
 80049ee:	4b40      	ldr	r3, [pc, #256]	; (8004af0 <LoRa_USART+0x304>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	461a      	mov	r2, r3
 80049f4:	4b39      	ldr	r3, [pc, #228]	; (8004adc <LoRa_USART+0x2f0>)
 80049f6:	f8d3 329c 	ldr.w	r3, [r3, #668]	; 0x29c
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d3c1      	bcc.n	8004982 <LoRa_USART+0x196>
					}
					n = 0;
 80049fe:	4b3f      	ldr	r3, [pc, #252]	; (8004afc <LoRa_USART+0x310>)
 8004a00:	2200      	movs	r2, #0
 8004a02:	701a      	strb	r2, [r3, #0]
					//--------------------------------------------------------------------------------------------------------------------
					//transmit LED status
					//HAL_GPIO_WritePin(RLED_Port, RLED , GPIO_PIN_SET);
					USARTLoRa.ResStatus=LoRaTransmitData(huart);
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fb41 	bl	800508c <LoRaTransmitData>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	4b33      	ldr	r3, [pc, #204]	; (8004adc <LoRa_USART+0x2f0>)
 8004a10:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	    			if(USARTLoRa.ResStatus==LoRa_OK)
 8004a14:	4b31      	ldr	r3, [pc, #196]	; (8004adc <LoRa_USART+0x2f0>)
 8004a16:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d104      	bne.n	8004a28 <LoRa_USART+0x23c>
	    				USARTLoRa.Status = waitTxRes;
 8004a1e:	4b2f      	ldr	r3, [pc, #188]	; (8004adc <LoRa_USART+0x2f0>)
 8004a20:	2205      	movs	r2, #5
 8004a22:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a26:	e0a9      	b.n	8004b7c <LoRa_USART+0x390>
	    			else if(USARTLoRa.ResStatus==LoRa_Tx_not_joined)
 8004a28:	4b2c      	ldr	r3, [pc, #176]	; (8004adc <LoRa_USART+0x2f0>)
 8004a2a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004a2e:	2b0a      	cmp	r3, #10
 8004a30:	d104      	bne.n	8004a3c <LoRa_USART+0x250>
	    				USARTLoRa.Status = JoinABP;
 8004a32:	4b2a      	ldr	r3, [pc, #168]	; (8004adc <LoRa_USART+0x2f0>)
 8004a34:	2203      	movs	r2, #3
 8004a36:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a3a:	e09f      	b.n	8004b7c <LoRa_USART+0x390>
	    			else if(USARTLoRa.ResStatus==LoRa_unexpected_Err)
 8004a3c:	4b27      	ldr	r3, [pc, #156]	; (8004adc <LoRa_USART+0x2f0>)
 8004a3e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004a42:	2b17      	cmp	r3, #23
 8004a44:	f040 809a 	bne.w	8004b7c <LoRa_USART+0x390>
	    				USARTLoRa.Status = Init;
 8004a48:	4b24      	ldr	r3, [pc, #144]	; (8004adc <LoRa_USART+0x2f0>)
 8004a4a:	2202      	movs	r2, #2
 8004a4c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0

            	}
	    		break;
 8004a50:	e094      	b.n	8004b7c <LoRa_USART+0x390>

	    	case waitTxRes:
	    		USARTLoRa.ResStatus=Check_Tx2stResMsg();
 8004a52:	f000 fd1f 	bl	8005494 <Check_Tx2stResMsg>
 8004a56:	4603      	mov	r3, r0
 8004a58:	461a      	mov	r2, r3
 8004a5a:	4b20      	ldr	r3, [pc, #128]	; (8004adc <LoRa_USART+0x2f0>)
 8004a5c:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	    		if(USARTLoRa.ResStatus == LoRa_OK	|| USARTLoRa.ResStatus == LoRa_Tx2_RxReceived)
 8004a60:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <LoRa_USART+0x2f0>)
 8004a62:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d004      	beq.n	8004a74 <LoRa_USART+0x288>
 8004a6a:	4b1c      	ldr	r3, [pc, #112]	; (8004adc <LoRa_USART+0x2f0>)
 8004a6c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004a70:	2b10      	cmp	r3, #16
 8004a72:	d107      	bne.n	8004a84 <LoRa_USART+0x298>
	    		{
	    			//transmit LED status
	    			//HAL_GPIO_WritePin(RLED_Port, RLED , GPIO_PIN_RESET);
	    			USARTLoRa.sendflag = 0;
 8004a74:	4b19      	ldr	r3, [pc, #100]	; (8004adc <LoRa_USART+0x2f0>)
 8004a76:	2200      	movs	r2, #0
 8004a78:	701a      	strb	r2, [r3, #0]
	    			USARTLoRa.Status = EnterSleepMode;
 8004a7a:	4b18      	ldr	r3, [pc, #96]	; (8004adc <LoRa_USART+0x2f0>)
 8004a7c:	2206      	movs	r2, #6
 8004a7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a82:	e012      	b.n	8004aaa <LoRa_USART+0x2be>
	    		}
	    		else if( USARTLoRa.ResStatus == LoRa_Tx2_err)
 8004a84:	4b15      	ldr	r3, [pc, #84]	; (8004adc <LoRa_USART+0x2f0>)
 8004a86:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004a8a:	2b0f      	cmp	r3, #15
 8004a8c:	d104      	bne.n	8004a98 <LoRa_USART+0x2ac>
	    			USARTLoRa.Status = SendData;
 8004a8e:	4b13      	ldr	r3, [pc, #76]	; (8004adc <LoRa_USART+0x2f0>)
 8004a90:	2204      	movs	r2, #4
 8004a92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004a96:	e071      	b.n	8004b7c <LoRa_USART+0x390>
	    		else if( USARTLoRa.ResStatus == LoRa_unexpected_Err)
 8004a98:	4b10      	ldr	r3, [pc, #64]	; (8004adc <LoRa_USART+0x2f0>)
 8004a9a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004a9e:	2b17      	cmp	r3, #23
 8004aa0:	d16c      	bne.n	8004b7c <LoRa_USART+0x390>
	    			USARTLoRa.Status = Init;
 8004aa2:	4b0e      	ldr	r3, [pc, #56]	; (8004adc <LoRa_USART+0x2f0>)
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
	    		break;
 8004aaa:	e067      	b.n	8004b7c <LoRa_USART+0x390>

	    	case EnterSleepMode:
				USARTLoRa.ResStatus=EnterSleep(huart);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 fe17 	bl	80056e0 <EnterSleep>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	461a      	mov	r2, r3
 8004ab6:	4b09      	ldr	r3, [pc, #36]	; (8004adc <LoRa_USART+0x2f0>)
 8004ab8:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
				if(USARTLoRa.ResStatus==LoRa_Sleep)
 8004abc:	4b07      	ldr	r3, [pc, #28]	; (8004adc <LoRa_USART+0x2f0>)
 8004abe:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004ac2:	2b15      	cmp	r3, #21
 8004ac4:	d104      	bne.n	8004ad0 <LoRa_USART+0x2e4>
					USARTLoRa.Status=WakeUp;
 8004ac6:	4b05      	ldr	r3, [pc, #20]	; (8004adc <LoRa_USART+0x2f0>)
 8004ac8:	2200      	movs	r2, #0
 8004aca:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004ace:	e055      	b.n	8004b7c <LoRa_USART+0x390>
				else
					USARTLoRa.Status = Init;
 8004ad0:	4b02      	ldr	r3, [pc, #8]	; (8004adc <LoRa_USART+0x2f0>)
 8004ad2:	2202      	movs	r2, #2
 8004ad4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
				break;
 8004ad8:	e050      	b.n	8004b7c <LoRa_USART+0x390>
 8004ada:	bf00      	nop
 8004adc:	20002520 	.word	0x20002520
 8004ae0:	20002468 	.word	0x20002468
 8004ae4:	0800dc98 	.word	0x0800dc98
 8004ae8:	20002540 	.word	0x20002540
 8004aec:	200025c0 	.word	0x200025c0
 8004af0:	2000024d 	.word	0x2000024d
 8004af4:	20002636 	.word	0x20002636
 8004af8:	0800dca8 	.word	0x0800dca8
 8004afc:	2000024e 	.word	0x2000024e

	    	case CMDdebug:
	    		LoRaCommand(huart, "mac get_ch_count");
 8004b00:	4924      	ldr	r1, [pc, #144]	; (8004b94 <LoRa_USART+0x3a8>)
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 faf0 	bl	80050e8 <LoRaCommand>
	    		while(!USARTLoRa.Revflag);
 8004b08:	bf00      	nop
 8004b0a:	4b23      	ldr	r3, [pc, #140]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b0c:	785b      	ldrb	r3, [r3, #1]
 8004b0e:	f083 0301 	eor.w	r3, r3, #1
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1f8      	bne.n	8004b0a <LoRa_USART+0x31e>
				USARTLoRa.Revflag = 0;
 8004b18:	4b1f      	ldr	r3, [pc, #124]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	705a      	strb	r2, [r3, #1]
	    		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> v1.6.5\n");
 8004b1e:	481f      	ldr	r0, [pc, #124]	; (8004b9c <LoRa_USART+0x3b0>)
 8004b20:	f000 fb1e 	bl	8005160 <LoRaResCheck>
 8004b24:	4603      	mov	r3, r0
 8004b26:	461a      	mov	r2, r3
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b2a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	    		if(USARTLoRa.ResStatus == LoRa_OK)
 8004b2e:	4b1a      	ldr	r3, [pc, #104]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b30:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d101      	bne.n	8004b3c <LoRa_USART+0x350>
	    			__NOP();
 8004b38:	bf00      	nop
 8004b3a:	e000      	b.n	8004b3e <LoRa_USART+0x352>
	    		else
	    			__NOP();
 8004b3c:	bf00      	nop
				LoRaCommand(huart, "mac get_tx_confirm");
 8004b3e:	4918      	ldr	r1, [pc, #96]	; (8004ba0 <LoRa_USART+0x3b4>)
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f000 fad1 	bl	80050e8 <LoRaCommand>
				while(!USARTLoRa.Revflag);
 8004b46:	bf00      	nop
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b4a:	785b      	ldrb	r3, [r3, #1]
 8004b4c:	f083 0301 	eor.w	r3, r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1f8      	bne.n	8004b48 <LoRa_USART+0x35c>
				USARTLoRa.Revflag = 0;
 8004b56:	4b10      	ldr	r3, [pc, #64]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	705a      	strb	r2, [r3, #1]
	    		USARTLoRa.ResStatus=LoRaResCheck("\n\r>> v1.6.5\n");
 8004b5c:	480f      	ldr	r0, [pc, #60]	; (8004b9c <LoRa_USART+0x3b0>)
 8004b5e:	f000 faff 	bl	8005160 <LoRaResCheck>
 8004b62:	4603      	mov	r3, r0
 8004b64:	461a      	mov	r2, r3
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b68:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	    		if(USARTLoRa.ResStatus == LoRa_OK)
 8004b6c:	4b0a      	ldr	r3, [pc, #40]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b6e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d101      	bne.n	8004b7a <LoRa_USART+0x38e>
	    			__NOP();
 8004b76:	bf00      	nop
 8004b78:	e000      	b.n	8004b7c <LoRa_USART+0x390>
	    		else
	    			__NOP();
 8004b7a:	bf00      	nop
    while(USARTLoRa.ResStatus!=LoRa_Sleep)
 8004b7c:	4b06      	ldr	r3, [pc, #24]	; (8004b98 <LoRa_USART+0x3ac>)
 8004b7e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004b82:	2b15      	cmp	r3, #21
 8004b84:	f47f ae38 	bne.w	80047f8 <LoRa_USART+0xc>

	    }
	}
}
 8004b88:	bf00      	nop
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004b92:	bf00      	nop
 8004b94:	0800dcac 	.word	0x0800dcac
 8004b98:	20002520 	.word	0x20002520
 8004b9c:	0800dcc0 	.word	0x0800dcc0
 8004ba0:	0800dcd0 	.word	0x0800dcd0

08004ba4 <LoRaInit>:



LoRa_StatusTypeDef LoRaInit(UART_HandleTypeDef *huart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b09c      	sub	sp, #112	; 0x70
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	//---------------Set 0~15 channel radio frequency-------------------------
	LoRaCFStatus=LoRa_CF_FEQ;
 8004bac:	4bb8      	ldr	r3, [pc, #736]	; (8004e90 <LoRaInit+0x2ec>)
 8004bae:	2201      	movs	r2, #1
 8004bb0:	701a      	strb	r2, [r3, #0]
	char c;
	uint32_t ferqoffset;
	ferqoffset = RadioFreq;
 8004bb2:	4bb8      	ldr	r3, [pc, #736]	; (8004e94 <LoRaInit+0x2f0>)
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
	for(c=0;c<=15;c++)
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004bbc:	e041      	b.n	8004c42 <LoRaInit+0x9e>
	{
		char frequcmd[32];
		sprintf(frequcmd,"mac set_ch_freq %d %d",c, ferqoffset);
 8004bbe:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8004bc2:	f107 0008 	add.w	r0, r7, #8
 8004bc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bc8:	49b3      	ldr	r1, [pc, #716]	; (8004e98 <LoRaInit+0x2f4>)
 8004bca:	f007 fb17 	bl	800c1fc <siprintf>
		LoRaCommand(huart, frequcmd);
 8004bce:	f107 0308 	add.w	r3, r7, #8
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fa87 	bl	80050e8 <LoRaCommand>
		USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004bda:	49b0      	ldr	r1, [pc, #704]	; (8004e9c <LoRaInit+0x2f8>)
 8004bdc:	48b0      	ldr	r0, [pc, #704]	; (8004ea0 <LoRaInit+0x2fc>)
 8004bde:	f000 fafb 	bl	80051d8 <Check_2ResMsg>
 8004be2:	4603      	mov	r3, r0
 8004be4:	461a      	mov	r2, r3
 8004be6:	4baf      	ldr	r3, [pc, #700]	; (8004ea4 <LoRaInit+0x300>)
 8004be8:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		if(USARTLoRa.ResStatus!=LoRa_OK)
 8004bec:	4bad      	ldr	r3, [pc, #692]	; (8004ea4 <LoRaInit+0x300>)
 8004bee:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d003      	beq.n	8004bfe <LoRaInit+0x5a>
			return USARTLoRa.ResStatus;
 8004bf6:	4bab      	ldr	r3, [pc, #684]	; (8004ea4 <LoRaInit+0x300>)
 8004bf8:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004bfc:	e1fe      	b.n	8004ffc <LoRaInit+0x458>
		//Save configure
		USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fda6 	bl	8005750 <LoRaSaveCF>
 8004c04:	4603      	mov	r3, r0
 8004c06:	461a      	mov	r2, r3
 8004c08:	4ba6      	ldr	r3, [pc, #664]	; (8004ea4 <LoRaInit+0x300>)
 8004c0a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		if(USARTLoRa.ResStatus != LoRa_OK)
 8004c0e:	4ba5      	ldr	r3, [pc, #660]	; (8004ea4 <LoRaInit+0x300>)
 8004c10:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <LoRaInit+0x7c>
			return USARTLoRa.ResStatus;
 8004c18:	4ba2      	ldr	r3, [pc, #648]	; (8004ea4 <LoRaInit+0x300>)
 8004c1a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004c1e:	e1ed      	b.n	8004ffc <LoRaInit+0x458>
		//offset 200KHz
		ferqoffset = ferqoffset + 200000;
 8004c20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c22:	f503 3343 	add.w	r3, r3, #199680	; 0x30c00
 8004c26:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8004c2a:	66bb      	str	r3, [r7, #104]	; 0x68
		if(c == Gateway_Channel-1)
 8004c2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c30:	2b07      	cmp	r3, #7
 8004c32:	d101      	bne.n	8004c38 <LoRaInit+0x94>
			ferqoffset = RadioFreq;
 8004c34:	4b97      	ldr	r3, [pc, #604]	; (8004e94 <LoRaInit+0x2f0>)
 8004c36:	66bb      	str	r3, [r7, #104]	; 0x68
	for(c=0;c<=15;c++)
 8004c38:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8004c42:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004c46:	2b0f      	cmp	r3, #15
 8004c48:	d9b9      	bls.n	8004bbe <LoRaInit+0x1a>
	}

	//----------------Set Channel Bandwidth------------------------------------
	char ChBWcmd[32];
	sprintf(ChBWcmd,"mac set_ch_count %d %d", Channel, BandWidth);
 8004c4a:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8004c4e:	237d      	movs	r3, #125	; 0x7d
 8004c50:	2208      	movs	r2, #8
 8004c52:	4995      	ldr	r1, [pc, #596]	; (8004ea8 <LoRaInit+0x304>)
 8004c54:	f007 fad2 	bl	800c1fc <siprintf>
	LoRaCommand(huart, ChBWcmd);
 8004c58:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fa42 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004c64:	498d      	ldr	r1, [pc, #564]	; (8004e9c <LoRaInit+0x2f8>)
 8004c66:	488e      	ldr	r0, [pc, #568]	; (8004ea0 <LoRaInit+0x2fc>)
 8004c68:	f000 fab6 	bl	80051d8 <Check_2ResMsg>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	461a      	mov	r2, r3
 8004c70:	4b8c      	ldr	r3, [pc, #560]	; (8004ea4 <LoRaInit+0x300>)
 8004c72:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004c76:	4b8b      	ldr	r3, [pc, #556]	; (8004ea4 <LoRaInit+0x300>)
 8004c78:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d003      	beq.n	8004c88 <LoRaInit+0xe4>
		return USARTLoRa.ResStatus;
 8004c80:	4b88      	ldr	r3, [pc, #544]	; (8004ea4 <LoRaInit+0x300>)
 8004c82:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004c86:	e1b9      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 fd61 	bl	8005750 <LoRaSaveCF>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	461a      	mov	r2, r3
 8004c92:	4b84      	ldr	r3, [pc, #528]	; (8004ea4 <LoRaInit+0x300>)
 8004c94:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004c98:	4b82      	ldr	r3, [pc, #520]	; (8004ea4 <LoRaInit+0x300>)
 8004c9a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d003      	beq.n	8004caa <LoRaInit+0x106>
		return USARTLoRa.ResStatus;
 8004ca2:	4b80      	ldr	r3, [pc, #512]	; (8004ea4 <LoRaInit+0x300>)
 8004ca4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004ca8:	e1a8      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Set Data rate(SF)--------------------------------------
	LoRaCommand(huart, CF_SFDataRate);
 8004caa:	4980      	ldr	r1, [pc, #512]	; (8004eac <LoRaInit+0x308>)
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f000 fa1b 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004cb2:	497a      	ldr	r1, [pc, #488]	; (8004e9c <LoRaInit+0x2f8>)
 8004cb4:	487a      	ldr	r0, [pc, #488]	; (8004ea0 <LoRaInit+0x2fc>)
 8004cb6:	f000 fa8f 	bl	80051d8 <Check_2ResMsg>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	461a      	mov	r2, r3
 8004cbe:	4b79      	ldr	r3, [pc, #484]	; (8004ea4 <LoRaInit+0x300>)
 8004cc0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004cc4:	4b77      	ldr	r3, [pc, #476]	; (8004ea4 <LoRaInit+0x300>)
 8004cc6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <LoRaInit+0x132>
		return USARTLoRa.ResStatus;
 8004cce:	4b75      	ldr	r3, [pc, #468]	; (8004ea4 <LoRaInit+0x300>)
 8004cd0:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004cd4:	e192      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f000 fd3a 	bl	8005750 <LoRaSaveCF>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	461a      	mov	r2, r3
 8004ce0:	4b70      	ldr	r3, [pc, #448]	; (8004ea4 <LoRaInit+0x300>)
 8004ce2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004ce6:	4b6f      	ldr	r3, [pc, #444]	; (8004ea4 <LoRaInit+0x300>)
 8004ce8:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <LoRaInit+0x154>
		return USARTLoRa.ResStatus;
 8004cf0:	4b6c      	ldr	r3, [pc, #432]	; (8004ea4 <LoRaInit+0x300>)
 8004cf2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004cf6:	e181      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Turn off auto Data rate--------------------------------------
	LoRaCommand(huart, ADRoff);
 8004cf8:	496d      	ldr	r1, [pc, #436]	; (8004eb0 <LoRaInit+0x30c>)
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f9f4 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004d00:	4966      	ldr	r1, [pc, #408]	; (8004e9c <LoRaInit+0x2f8>)
 8004d02:	4867      	ldr	r0, [pc, #412]	; (8004ea0 <LoRaInit+0x2fc>)
 8004d04:	f000 fa68 	bl	80051d8 <Check_2ResMsg>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	4b65      	ldr	r3, [pc, #404]	; (8004ea4 <LoRaInit+0x300>)
 8004d0e:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004d12:	4b64      	ldr	r3, [pc, #400]	; (8004ea4 <LoRaInit+0x300>)
 8004d14:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d003      	beq.n	8004d24 <LoRaInit+0x180>
		return USARTLoRa.ResStatus;
 8004d1c:	4b61      	ldr	r3, [pc, #388]	; (8004ea4 <LoRaInit+0x300>)
 8004d1e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d22:	e16b      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fd13 	bl	8005750 <LoRaSaveCF>
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	461a      	mov	r2, r3
 8004d2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ea4 <LoRaInit+0x300>)
 8004d30:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004d34:	4b5b      	ldr	r3, [pc, #364]	; (8004ea4 <LoRaInit+0x300>)
 8004d36:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <LoRaInit+0x1a2>
		return USARTLoRa.ResStatus;
 8004d3e:	4b59      	ldr	r3, [pc, #356]	; (8004ea4 <LoRaInit+0x300>)
 8004d40:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d44:	e15a      	b.n	8004ffc <LoRaInit+0x458>
	//----------------Set MaxEIRP--------------------------------------
	LoRaCommand(huart, CF_MaxEIRP);
 8004d46:	495b      	ldr	r1, [pc, #364]	; (8004eb4 <LoRaInit+0x310>)
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f9cd 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004d4e:	4953      	ldr	r1, [pc, #332]	; (8004e9c <LoRaInit+0x2f8>)
 8004d50:	4853      	ldr	r0, [pc, #332]	; (8004ea0 <LoRaInit+0x2fc>)
 8004d52:	f000 fa41 	bl	80051d8 <Check_2ResMsg>
 8004d56:	4603      	mov	r3, r0
 8004d58:	461a      	mov	r2, r3
 8004d5a:	4b52      	ldr	r3, [pc, #328]	; (8004ea4 <LoRaInit+0x300>)
 8004d5c:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004d60:	4b50      	ldr	r3, [pc, #320]	; (8004ea4 <LoRaInit+0x300>)
 8004d62:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d003      	beq.n	8004d72 <LoRaInit+0x1ce>
		return USARTLoRa.ResStatus;
 8004d6a:	4b4e      	ldr	r3, [pc, #312]	; (8004ea4 <LoRaInit+0x300>)
 8004d6c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d70:	e144      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004d72:	6878      	ldr	r0, [r7, #4]
 8004d74:	f000 fcec 	bl	8005750 <LoRaSaveCF>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	4b49      	ldr	r3, [pc, #292]	; (8004ea4 <LoRaInit+0x300>)
 8004d7e:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004d82:	4b48      	ldr	r3, [pc, #288]	; (8004ea4 <LoRaInit+0x300>)
 8004d84:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <LoRaInit+0x1f0>
		return USARTLoRa.ResStatus;
 8004d8c:	4b45      	ldr	r3, [pc, #276]	; (8004ea4 <LoRaInit+0x300>)
 8004d8e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004d92:	e133      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Set Transmit Power--------------------------------------
	char txpowercmd[32];
	sprintf(txpowercmd,"mac set_power %d", TxPower);
 8004d94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004d98:	2214      	movs	r2, #20
 8004d9a:	4947      	ldr	r1, [pc, #284]	; (8004eb8 <LoRaInit+0x314>)
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f007 fa2d 	bl	800c1fc <siprintf>
	LoRaCommand(huart, txpowercmd);
 8004da2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004da6:	4619      	mov	r1, r3
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 f99d 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004dae:	493b      	ldr	r1, [pc, #236]	; (8004e9c <LoRaInit+0x2f8>)
 8004db0:	483b      	ldr	r0, [pc, #236]	; (8004ea0 <LoRaInit+0x2fc>)
 8004db2:	f000 fa11 	bl	80051d8 <Check_2ResMsg>
 8004db6:	4603      	mov	r3, r0
 8004db8:	461a      	mov	r2, r3
 8004dba:	4b3a      	ldr	r3, [pc, #232]	; (8004ea4 <LoRaInit+0x300>)
 8004dbc:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004dc0:	4b38      	ldr	r3, [pc, #224]	; (8004ea4 <LoRaInit+0x300>)
 8004dc2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d003      	beq.n	8004dd2 <LoRaInit+0x22e>
		return USARTLoRa.ResStatus;
 8004dca:	4b36      	ldr	r3, [pc, #216]	; (8004ea4 <LoRaInit+0x300>)
 8004dcc:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004dd0:	e114      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004dd2:	6878      	ldr	r0, [r7, #4]
 8004dd4:	f000 fcbc 	bl	8005750 <LoRaSaveCF>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	461a      	mov	r2, r3
 8004ddc:	4b31      	ldr	r3, [pc, #196]	; (8004ea4 <LoRaInit+0x300>)
 8004dde:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004de2:	4b30      	ldr	r3, [pc, #192]	; (8004ea4 <LoRaInit+0x300>)
 8004de4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <LoRaInit+0x250>
		return USARTLoRa.ResStatus;
 8004dec:	4b2d      	ldr	r3, [pc, #180]	; (8004ea4 <LoRaInit+0x300>)
 8004dee:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004df2:	e103      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Off Tx Confirm--------------------------------------
	LoRaCommand(huart, Offtxconfirm);
 8004df4:	4931      	ldr	r1, [pc, #196]	; (8004ebc <LoRaInit+0x318>)
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f976 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004dfc:	4927      	ldr	r1, [pc, #156]	; (8004e9c <LoRaInit+0x2f8>)
 8004dfe:	4828      	ldr	r0, [pc, #160]	; (8004ea0 <LoRaInit+0x2fc>)
 8004e00:	f000 f9ea 	bl	80051d8 <Check_2ResMsg>
 8004e04:	4603      	mov	r3, r0
 8004e06:	461a      	mov	r2, r3
 8004e08:	4b26      	ldr	r3, [pc, #152]	; (8004ea4 <LoRaInit+0x300>)
 8004e0a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004e0e:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <LoRaInit+0x300>)
 8004e10:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d003      	beq.n	8004e20 <LoRaInit+0x27c>
		return USARTLoRa.ResStatus;
 8004e18:	4b22      	ldr	r3, [pc, #136]	; (8004ea4 <LoRaInit+0x300>)
 8004e1a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e1e:	e0ed      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f000 fc95 	bl	8005750 <LoRaSaveCF>
 8004e26:	4603      	mov	r3, r0
 8004e28:	461a      	mov	r2, r3
 8004e2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ea4 <LoRaInit+0x300>)
 8004e2c:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004e30:	4b1c      	ldr	r3, [pc, #112]	; (8004ea4 <LoRaInit+0x300>)
 8004e32:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d003      	beq.n	8004e42 <LoRaInit+0x29e>
		return USARTLoRa.ResStatus;
 8004e3a:	4b1a      	ldr	r3, [pc, #104]	; (8004ea4 <LoRaInit+0x300>)
 8004e3c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e40:	e0dc      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Set Device EUI--------------------------------------
	LoRaCommand(huart, CF_DevEUI);
 8004e42:	491f      	ldr	r1, [pc, #124]	; (8004ec0 <LoRaInit+0x31c>)
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	f000 f94f 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004e4a:	4914      	ldr	r1, [pc, #80]	; (8004e9c <LoRaInit+0x2f8>)
 8004e4c:	4814      	ldr	r0, [pc, #80]	; (8004ea0 <LoRaInit+0x2fc>)
 8004e4e:	f000 f9c3 	bl	80051d8 <Check_2ResMsg>
 8004e52:	4603      	mov	r3, r0
 8004e54:	461a      	mov	r2, r3
 8004e56:	4b13      	ldr	r3, [pc, #76]	; (8004ea4 <LoRaInit+0x300>)
 8004e58:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004e5c:	4b11      	ldr	r3, [pc, #68]	; (8004ea4 <LoRaInit+0x300>)
 8004e5e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d003      	beq.n	8004e6e <LoRaInit+0x2ca>
		return USARTLoRa.ResStatus;
 8004e66:	4b0f      	ldr	r3, [pc, #60]	; (8004ea4 <LoRaInit+0x300>)
 8004e68:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e6c:	e0c6      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f000 fc6e 	bl	8005750 <LoRaSaveCF>
 8004e74:	4603      	mov	r3, r0
 8004e76:	461a      	mov	r2, r3
 8004e78:	4b0a      	ldr	r3, [pc, #40]	; (8004ea4 <LoRaInit+0x300>)
 8004e7a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004e7e:	4b09      	ldr	r3, [pc, #36]	; (8004ea4 <LoRaInit+0x300>)
 8004e80:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d01d      	beq.n	8004ec4 <LoRaInit+0x320>
		return USARTLoRa.ResStatus;
 8004e88:	4b06      	ldr	r3, [pc, #24]	; (8004ea4 <LoRaInit+0x300>)
 8004e8a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004e8e:	e0b5      	b.n	8004ffc <LoRaInit+0x458>
 8004e90:	2000024c 	.word	0x2000024c
 8004e94:	3703dcc0 	.word	0x3703dcc0
 8004e98:	0800dce4 	.word	0x0800dce4
 8004e9c:	0800dcfc 	.word	0x0800dcfc
 8004ea0:	0800dd0c 	.word	0x0800dd0c
 8004ea4:	20002520 	.word	0x20002520
 8004ea8:	0800dd18 	.word	0x0800dd18
 8004eac:	0800dd30 	.word	0x0800dd30
 8004eb0:	0800dd40 	.word	0x0800dd40
 8004eb4:	0800dd50 	.word	0x0800dd50
 8004eb8:	0800dd64 	.word	0x0800dd64
 8004ebc:	0800dd78 	.word	0x0800dd78
 8004ec0:	0800dd90 	.word	0x0800dd90

	//----------------Set Application EUI--------------------------------------
	LoRaCommand(huart, CF_AppEUI);
 8004ec4:	494f      	ldr	r1, [pc, #316]	; (8005004 <LoRaInit+0x460>)
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f90e 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004ecc:	494e      	ldr	r1, [pc, #312]	; (8005008 <LoRaInit+0x464>)
 8004ece:	484f      	ldr	r0, [pc, #316]	; (800500c <LoRaInit+0x468>)
 8004ed0:	f000 f982 	bl	80051d8 <Check_2ResMsg>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	4b4d      	ldr	r3, [pc, #308]	; (8005010 <LoRaInit+0x46c>)
 8004eda:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004ede:	4b4c      	ldr	r3, [pc, #304]	; (8005010 <LoRaInit+0x46c>)
 8004ee0:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d003      	beq.n	8004ef0 <LoRaInit+0x34c>
		return USARTLoRa.ResStatus;
 8004ee8:	4b49      	ldr	r3, [pc, #292]	; (8005010 <LoRaInit+0x46c>)
 8004eea:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004eee:	e085      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f000 fc2d 	bl	8005750 <LoRaSaveCF>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	461a      	mov	r2, r3
 8004efa:	4b45      	ldr	r3, [pc, #276]	; (8005010 <LoRaInit+0x46c>)
 8004efc:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004f00:	4b43      	ldr	r3, [pc, #268]	; (8005010 <LoRaInit+0x46c>)
 8004f02:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d003      	beq.n	8004f12 <LoRaInit+0x36e>
		return USARTLoRa.ResStatus;
 8004f0a:	4b41      	ldr	r3, [pc, #260]	; (8005010 <LoRaInit+0x46c>)
 8004f0c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f10:	e074      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Set Device Address--------------------------------------
	LoRaCommand(huart, CF_DevAddr);
 8004f12:	4940      	ldr	r1, [pc, #256]	; (8005014 <LoRaInit+0x470>)
 8004f14:	6878      	ldr	r0, [r7, #4]
 8004f16:	f000 f8e7 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004f1a:	493b      	ldr	r1, [pc, #236]	; (8005008 <LoRaInit+0x464>)
 8004f1c:	483b      	ldr	r0, [pc, #236]	; (800500c <LoRaInit+0x468>)
 8004f1e:	f000 f95b 	bl	80051d8 <Check_2ResMsg>
 8004f22:	4603      	mov	r3, r0
 8004f24:	461a      	mov	r2, r3
 8004f26:	4b3a      	ldr	r3, [pc, #232]	; (8005010 <LoRaInit+0x46c>)
 8004f28:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004f2c:	4b38      	ldr	r3, [pc, #224]	; (8005010 <LoRaInit+0x46c>)
 8004f2e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d003      	beq.n	8004f3e <LoRaInit+0x39a>
		return USARTLoRa.ResStatus;
 8004f36:	4b36      	ldr	r3, [pc, #216]	; (8005010 <LoRaInit+0x46c>)
 8004f38:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f3c:	e05e      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004f3e:	6878      	ldr	r0, [r7, #4]
 8004f40:	f000 fc06 	bl	8005750 <LoRaSaveCF>
 8004f44:	4603      	mov	r3, r0
 8004f46:	461a      	mov	r2, r3
 8004f48:	4b31      	ldr	r3, [pc, #196]	; (8005010 <LoRaInit+0x46c>)
 8004f4a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004f4e:	4b30      	ldr	r3, [pc, #192]	; (8005010 <LoRaInit+0x46c>)
 8004f50:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d003      	beq.n	8004f60 <LoRaInit+0x3bc>
		return USARTLoRa.ResStatus;
 8004f58:	4b2d      	ldr	r3, [pc, #180]	; (8005010 <LoRaInit+0x46c>)
 8004f5a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f5e:	e04d      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Set Network Session Key--------------------------------------
	LoRaCommand(huart, CF_NwksKey);
 8004f60:	492d      	ldr	r1, [pc, #180]	; (8005018 <LoRaInit+0x474>)
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f000 f8c0 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004f68:	4927      	ldr	r1, [pc, #156]	; (8005008 <LoRaInit+0x464>)
 8004f6a:	4828      	ldr	r0, [pc, #160]	; (800500c <LoRaInit+0x468>)
 8004f6c:	f000 f934 	bl	80051d8 <Check_2ResMsg>
 8004f70:	4603      	mov	r3, r0
 8004f72:	461a      	mov	r2, r3
 8004f74:	4b26      	ldr	r3, [pc, #152]	; (8005010 <LoRaInit+0x46c>)
 8004f76:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004f7a:	4b25      	ldr	r3, [pc, #148]	; (8005010 <LoRaInit+0x46c>)
 8004f7c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d003      	beq.n	8004f8c <LoRaInit+0x3e8>
		return USARTLoRa.ResStatus;
 8004f84:	4b22      	ldr	r3, [pc, #136]	; (8005010 <LoRaInit+0x46c>)
 8004f86:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004f8a:	e037      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 fbdf 	bl	8005750 <LoRaSaveCF>
 8004f92:	4603      	mov	r3, r0
 8004f94:	461a      	mov	r2, r3
 8004f96:	4b1e      	ldr	r3, [pc, #120]	; (8005010 <LoRaInit+0x46c>)
 8004f98:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004f9c:	4b1c      	ldr	r3, [pc, #112]	; (8005010 <LoRaInit+0x46c>)
 8004f9e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <LoRaInit+0x40a>
		return USARTLoRa.ResStatus;
 8004fa6:	4b1a      	ldr	r3, [pc, #104]	; (8005010 <LoRaInit+0x46c>)
 8004fa8:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004fac:	e026      	b.n	8004ffc <LoRaInit+0x458>

	//----------------Set Application Session Key--------------------------------------
	LoRaCommand(huart, CF_AppsKey);
 8004fae:	491b      	ldr	r1, [pc, #108]	; (800501c <LoRaInit+0x478>)
 8004fb0:	6878      	ldr	r0, [r7, #4]
 8004fb2:	f000 f899 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8004fb6:	4914      	ldr	r1, [pc, #80]	; (8005008 <LoRaInit+0x464>)
 8004fb8:	4814      	ldr	r0, [pc, #80]	; (800500c <LoRaInit+0x468>)
 8004fba:	f000 f90d 	bl	80051d8 <Check_2ResMsg>
 8004fbe:	4603      	mov	r3, r0
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	4b13      	ldr	r3, [pc, #76]	; (8005010 <LoRaInit+0x46c>)
 8004fc4:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus!=LoRa_OK)
 8004fc8:	4b11      	ldr	r3, [pc, #68]	; (8005010 <LoRaInit+0x46c>)
 8004fca:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <LoRaInit+0x436>
		return USARTLoRa.ResStatus;
 8004fd2:	4b0f      	ldr	r3, [pc, #60]	; (8005010 <LoRaInit+0x46c>)
 8004fd4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004fd8:	e010      	b.n	8004ffc <LoRaInit+0x458>
	//Save configure
	USARTLoRa.ResStatus=LoRaSaveCF(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 fbb8 	bl	8005750 <LoRaSaveCF>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	461a      	mov	r2, r3
 8004fe4:	4b0a      	ldr	r3, [pc, #40]	; (8005010 <LoRaInit+0x46c>)
 8004fe6:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8004fea:	4b09      	ldr	r3, [pc, #36]	; (8005010 <LoRaInit+0x46c>)
 8004fec:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d003      	beq.n	8004ffc <LoRaInit+0x458>
		return USARTLoRa.ResStatus;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	; (8005010 <LoRaInit+0x46c>)
 8004ff6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8004ffa:	e7ff      	b.n	8004ffc <LoRaInit+0x458>

}
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	3770      	adds	r7, #112	; 0x70
 8005000:	46bd      	mov	sp, r7
 8005002:	bd80      	pop	{r7, pc}
 8005004:	0800ddb0 	.word	0x0800ddb0
 8005008:	0800dcfc 	.word	0x0800dcfc
 800500c:	0800dd0c 	.word	0x0800dd0c
 8005010:	20002520 	.word	0x20002520
 8005014:	0800ddd0 	.word	0x0800ddd0
 8005018:	0800ddec 	.word	0x0800ddec
 800501c:	0800de20 	.word	0x0800de20

08005020 <ActiveABPMode>:

LoRa_StatusTypeDef ActiveABPMode(UART_HandleTypeDef *huart)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b082      	sub	sp, #8
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, ActiveABP);
 8005028:	4914      	ldr	r1, [pc, #80]	; (800507c <ActiveABPMode+0x5c>)
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f000 f85c 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_JoinResMsg();
 8005030:	f000 f92a 	bl	8005288 <Check_JoinResMsg>
 8005034:	4603      	mov	r3, r0
 8005036:	461a      	mov	r2, r3
 8005038:	4b11      	ldr	r3, [pc, #68]	; (8005080 <ActiveABPMode+0x60>)
 800503a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus == LoRa_OK)
 800503e:	4b10      	ldr	r3, [pc, #64]	; (8005080 <ActiveABPMode+0x60>)
 8005040:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005044:	2b00      	cmp	r3, #0
 8005046:	d111      	bne.n	800506c <ActiveABPMode+0x4c>
	{
		USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> accepted\n", "\n\r>> unsuccess\n");
 8005048:	490e      	ldr	r1, [pc, #56]	; (8005084 <ActiveABPMode+0x64>)
 800504a:	480f      	ldr	r0, [pc, #60]	; (8005088 <ActiveABPMode+0x68>)
 800504c:	f000 f8c4 	bl	80051d8 <Check_2ResMsg>
 8005050:	4603      	mov	r3, r0
 8005052:	461a      	mov	r2, r3
 8005054:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <ActiveABPMode+0x60>)
 8005056:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		if(USARTLoRa.ResStatus != LoRa_OK)
 800505a:	4b09      	ldr	r3, [pc, #36]	; (8005080 <ActiveABPMode+0x60>)
 800505c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005060:	2b00      	cmp	r3, #0
 8005062:	d007      	beq.n	8005074 <ActiveABPMode+0x54>
			return USARTLoRa.ResStatus;
 8005064:	4b06      	ldr	r3, [pc, #24]	; (8005080 <ActiveABPMode+0x60>)
 8005066:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800506a:	e003      	b.n	8005074 <ActiveABPMode+0x54>
	}
	else
		return USARTLoRa.ResStatus;
 800506c:	4b04      	ldr	r3, [pc, #16]	; (8005080 <ActiveABPMode+0x60>)
 800506e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005072:	e7ff      	b.n	8005074 <ActiveABPMode+0x54>
}
 8005074:	4618      	mov	r0, r3
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	0800de54 	.word	0x0800de54
 8005080:	20002520 	.word	0x20002520
 8005084:	0800de64 	.word	0x0800de64
 8005088:	0800de74 	.word	0x0800de74

0800508c <LoRaTransmitData>:

LoRa_StatusTypeDef LoRaTransmitData(UART_HandleTypeDef *huart)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b0a0      	sub	sp, #128	; 0x80
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
	char RoLaTxCMD[Uart_Buffer_Size];
    sprintf(RoLaTxCMD,"%s%s",SendUcfP1, USARTLoRa.DataHexBuffer);
 8005094:	f107 0008 	add.w	r0, r7, #8
 8005098:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <LoRaTransmitData+0x4c>)
 800509a:	4a10      	ldr	r2, [pc, #64]	; (80050dc <LoRaTransmitData+0x50>)
 800509c:	4910      	ldr	r1, [pc, #64]	; (80050e0 <LoRaTransmitData+0x54>)
 800509e:	f007 f8ad 	bl	800c1fc <siprintf>
	LoRaCommand(huart, RoLaTxCMD);
 80050a2:	f107 0308 	add.w	r3, r7, #8
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f81d 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_Tx1stResMsg();
 80050ae:	f000 f95d 	bl	800536c <Check_Tx1stResMsg>
 80050b2:	4603      	mov	r3, r0
 80050b4:	461a      	mov	r2, r3
 80050b6:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <LoRaTransmitData+0x58>)
 80050b8:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus == LoRa_OK)
 80050bc:	4b09      	ldr	r3, [pc, #36]	; (80050e4 <LoRaTransmitData+0x58>)
 80050be:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <LoRaTransmitData+0x3e>
		return LoRa_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e002      	b.n	80050d0 <LoRaTransmitData+0x44>
	else
		return USARTLoRa.ResStatus;
 80050ca:	4b06      	ldr	r3, [pc, #24]	; (80050e4 <LoRaTransmitData+0x58>)
 80050cc:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3780      	adds	r7, #128	; 0x80
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}
 80050d8:	200025c0 	.word	0x200025c0
 80050dc:	0800de84 	.word	0x0800de84
 80050e0:	0800de94 	.word	0x0800de94
 80050e4:	20002520 	.word	0x20002520

080050e8 <LoRaCommand>:



void LoRaCommand(UART_HandleTypeDef *huart,  uint32_t *cmd)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
	memset(USARTLoRa.buffer, 0, strlen(USARTLoRa.buffer) ); //clear usart buffer
 80050f2:	4819      	ldr	r0, [pc, #100]	; (8005158 <LoRaCommand+0x70>)
 80050f4:	f7fb f8e6 	bl	80002c4 <strlen>
 80050f8:	4603      	mov	r3, r0
 80050fa:	461a      	mov	r2, r3
 80050fc:	2100      	movs	r1, #0
 80050fe:	4816      	ldr	r0, [pc, #88]	; (8005158 <LoRaCommand+0x70>)
 8005100:	f006 fc18 	bl	800b934 <memset>
	sprintf(USARTLoRa.buffer,cmd);
 8005104:	6839      	ldr	r1, [r7, #0]
 8005106:	4814      	ldr	r0, [pc, #80]	; (8005158 <LoRaCommand+0x70>)
 8005108:	f007 f878 	bl	800c1fc <siprintf>
	USARTLoRa.bufferSize = min(Uart_Buffer_Size, strlen(USARTLoRa.buffer));
 800510c:	4812      	ldr	r0, [pc, #72]	; (8005158 <LoRaCommand+0x70>)
 800510e:	f7fb f8d9 	bl	80002c4 <strlen>
 8005112:	4603      	mov	r3, r0
 8005114:	2b76      	cmp	r3, #118	; 0x76
 8005116:	d804      	bhi.n	8005122 <LoRaCommand+0x3a>
 8005118:	480f      	ldr	r0, [pc, #60]	; (8005158 <LoRaCommand+0x70>)
 800511a:	f7fb f8d3 	bl	80002c4 <strlen>
 800511e:	4603      	mov	r3, r0
 8005120:	e000      	b.n	8005124 <LoRaCommand+0x3c>
 8005122:	2376      	movs	r3, #118	; 0x76
 8005124:	4a0d      	ldr	r2, [pc, #52]	; (800515c <LoRaCommand+0x74>)
 8005126:	f8c2 3298 	str.w	r3, [r2, #664]	; 0x298
	USARTLoRa.sendTimeout = 50 ;
 800512a:	4b0c      	ldr	r3, [pc, #48]	; (800515c <LoRaCommand+0x74>)
 800512c:	2232      	movs	r2, #50	; 0x32
 800512e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
	* @param huart   UART handle.
	* @param pData   Pointer to data buffer.
	* @param Size    Amount of data to be received.
	* @param Timeout Timeout duration.(ms)
	*/
	while(HAL_UART_Transmit(huart, &USARTLoRa.buffer, USARTLoRa.bufferSize, USARTLoRa.sendTimeout )!=HAL_OK);
 8005132:	bf00      	nop
 8005134:	4b09      	ldr	r3, [pc, #36]	; (800515c <LoRaCommand+0x74>)
 8005136:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800513a:	b29a      	uxth	r2, r3
 800513c:	4b07      	ldr	r3, [pc, #28]	; (800515c <LoRaCommand+0x74>)
 800513e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005142:	4905      	ldr	r1, [pc, #20]	; (8005158 <LoRaCommand+0x70>)
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	f005 fb63 	bl	800a810 <HAL_UART_Transmit>
 800514a:	4603      	mov	r3, r0
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1f1      	bne.n	8005134 <LoRaCommand+0x4c>

}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	20002640 	.word	0x20002640
 800515c:	20002520 	.word	0x20002520

08005160 <LoRaResCheck>:
LoRa_StatusTypeDef LoRaResCheck(uint32_t *Res)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]

	//while(!USARTLoRa.Revflag);
	memset(USARTLoRa.Res_Check, 0, strlen(USARTLoRa.Res_Check) ); //clear LoRa response check string
 8005168:	4818      	ldr	r0, [pc, #96]	; (80051cc <LoRaResCheck+0x6c>)
 800516a:	f7fb f8ab 	bl	80002c4 <strlen>
 800516e:	4603      	mov	r3, r0
 8005170:	461a      	mov	r2, r3
 8005172:	2100      	movs	r1, #0
 8005174:	4815      	ldr	r0, [pc, #84]	; (80051cc <LoRaResCheck+0x6c>)
 8005176:	f006 fbdd 	bl	800b934 <memset>
	sprintf(USARTLoRa.Res_Check,Res);
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	4813      	ldr	r0, [pc, #76]	; (80051cc <LoRaResCheck+0x6c>)
 800517e:	f007 f83d 	bl	800c1fc <siprintf>
	//USARTLoRa.Revflag=0;

	memset(USARTLoRa.RevDatabk, 0, strlen(USARTLoRa.RevDatabk) ); //clear LoRa response check string
 8005182:	4813      	ldr	r0, [pc, #76]	; (80051d0 <LoRaResCheck+0x70>)
 8005184:	f7fb f89e 	bl	80002c4 <strlen>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	2100      	movs	r1, #0
 800518e:	4810      	ldr	r0, [pc, #64]	; (80051d0 <LoRaResCheck+0x70>)
 8005190:	f006 fbd0 	bl	800b934 <memset>
	sprintf(USARTLoRa.RevDatabk, USARTLoRa.RevData);
 8005194:	490f      	ldr	r1, [pc, #60]	; (80051d4 <LoRaResCheck+0x74>)
 8005196:	480e      	ldr	r0, [pc, #56]	; (80051d0 <LoRaResCheck+0x70>)
 8005198:	f007 f830 	bl	800c1fc <siprintf>

	if(strcmp( USARTLoRa.RevData, USARTLoRa.Res_Check ) == 0)
 800519c:	490b      	ldr	r1, [pc, #44]	; (80051cc <LoRaResCheck+0x6c>)
 800519e:	480d      	ldr	r0, [pc, #52]	; (80051d4 <LoRaResCheck+0x74>)
 80051a0:	f7fb f886 	bl	80002b0 <strcmp>
 80051a4:	4603      	mov	r3, r0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d10a      	bne.n	80051c0 <LoRaResCheck+0x60>
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80051aa:	480a      	ldr	r0, [pc, #40]	; (80051d4 <LoRaResCheck+0x74>)
 80051ac:	f7fb f88a 	bl	80002c4 <strlen>
 80051b0:	4603      	mov	r3, r0
 80051b2:	461a      	mov	r2, r3
 80051b4:	2100      	movs	r1, #0
 80051b6:	4807      	ldr	r0, [pc, #28]	; (80051d4 <LoRaResCheck+0x74>)
 80051b8:	f006 fbbc 	bl	800b934 <memset>
		return LoRa_OK;
 80051bc:	2300      	movs	r3, #0
 80051be:	e000      	b.n	80051c2 <LoRaResCheck+0x62>
	}
	else
	{
		return LoRa_Res_Err;
 80051c0:	2301      	movs	r3, #1
	}
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3708      	adds	r7, #8
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	2000278b 	.word	0x2000278b
 80051d0:	20002720 	.word	0x20002720
 80051d4:	200026c0 	.word	0x200026c0

080051d8 <Check_2ResMsg>:


LoRa_StatusTypeDef Check_2ResMsg(uint32_t *Res1, uint32_t *Res2)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
	//wait data Response
	while(!USARTLoRa.Revflag);
 80051e2:	bf00      	nop
 80051e4:	4b23      	ldr	r3, [pc, #140]	; (8005274 <Check_2ResMsg+0x9c>)
 80051e6:	785b      	ldrb	r3, [r3, #1]
 80051e8:	f083 0301 	eor.w	r3, r3, #1
 80051ec:	b2db      	uxtb	r3, r3
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d1f8      	bne.n	80051e4 <Check_2ResMsg+0xc>
	USARTLoRa.Revflag=0;
 80051f2:	4b20      	ldr	r3, [pc, #128]	; (8005274 <Check_2ResMsg+0x9c>)
 80051f4:	2200      	movs	r2, #0
 80051f6:	705a      	strb	r2, [r3, #1]
	if((USARTLoRa.ResStatus=LoRaResCheck(Res1))==LoRa_OK)
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f7ff ffb1 	bl	8005160 <LoRaResCheck>
 80051fe:	4603      	mov	r3, r0
 8005200:	461a      	mov	r2, r3
 8005202:	4b1c      	ldr	r3, [pc, #112]	; (8005274 <Check_2ResMsg+0x9c>)
 8005204:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 8005208:	4b1a      	ldr	r3, [pc, #104]	; (8005274 <Check_2ResMsg+0x9c>)
 800520a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d107      	bne.n	8005222 <Check_2ResMsg+0x4a>
	{
		if(Res1 =="\n\r>> joined\n")
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	4a18      	ldr	r2, [pc, #96]	; (8005278 <Check_2ResMsg+0xa0>)
 8005216:	4293      	cmp	r3, r2
 8005218:	d101      	bne.n	800521e <Check_2ResMsg+0x46>
			return LoRa_joined;
 800521a:	2313      	movs	r3, #19
 800521c:	e026      	b.n	800526c <Check_2ResMsg+0x94>
		else
			return LoRa_OK;
 800521e:	2300      	movs	r3, #0
 8005220:	e024      	b.n	800526c <Check_2ResMsg+0x94>

	}
	else if((USARTLoRa.ResStatus=LoRaResCheck(Res2))==LoRa_OK)
 8005222:	6838      	ldr	r0, [r7, #0]
 8005224:	f7ff ff9c 	bl	8005160 <LoRaResCheck>
 8005228:	4603      	mov	r3, r0
 800522a:	461a      	mov	r2, r3
 800522c:	4b11      	ldr	r3, [pc, #68]	; (8005274 <Check_2ResMsg+0x9c>)
 800522e:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 8005232:	4b10      	ldr	r3, [pc, #64]	; (8005274 <Check_2ResMsg+0x9c>)
 8005234:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005238:	2b00      	cmp	r3, #0
 800523a:	d10d      	bne.n	8005258 <Check_2ResMsg+0x80>
	{
		if(Res2 =="\n\r>> unjoined\n")
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	4a0f      	ldr	r2, [pc, #60]	; (800527c <Check_2ResMsg+0xa4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d101      	bne.n	8005248 <Check_2ResMsg+0x70>
			return LoRa_unjoined;
 8005244:	2314      	movs	r3, #20
 8005246:	e011      	b.n	800526c <Check_2ResMsg+0x94>
		else if(Res2 =="\n\r>> unsuccess\n")
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	4a0d      	ldr	r2, [pc, #52]	; (8005280 <Check_2ResMsg+0xa8>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d101      	bne.n	8005254 <Check_2ResMsg+0x7c>
			return LoRa_Join_FAIL;
 8005250:	2306      	movs	r3, #6
 8005252:	e00b      	b.n	800526c <Check_2ResMsg+0x94>
		else
			return LoRa_Res_Err;
 8005254:	2301      	movs	r3, #1
 8005256:	e009      	b.n	800526c <Check_2ResMsg+0x94>
	}

	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005258:	480a      	ldr	r0, [pc, #40]	; (8005284 <Check_2ResMsg+0xac>)
 800525a:	f7fb f833 	bl	80002c4 <strlen>
 800525e:	4603      	mov	r3, r0
 8005260:	461a      	mov	r2, r3
 8005262:	2100      	movs	r1, #0
 8005264:	4807      	ldr	r0, [pc, #28]	; (8005284 <Check_2ResMsg+0xac>)
 8005266:	f006 fb65 	bl	800b934 <memset>
		return LoRa_unexpected_Err;
 800526a:	2317      	movs	r3, #23
	}
}
 800526c:	4618      	mov	r0, r3
 800526e:	3708      	adds	r7, #8
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	20002520 	.word	0x20002520
 8005278:	0800de9c 	.word	0x0800de9c
 800527c:	0800deac 	.word	0x0800deac
 8005280:	0800de64 	.word	0x0800de64
 8005284:	200026c0 	.word	0x200026c0

08005288 <Check_JoinResMsg>:

LoRa_StatusTypeDef Check_JoinResMsg()
{
 8005288:	b580      	push	{r7, lr}
 800528a:	af00      	add	r7, sp, #0
	//wait data Response
	while(!USARTLoRa.Revflag);
 800528c:	bf00      	nop
 800528e:	4b30      	ldr	r3, [pc, #192]	; (8005350 <Check_JoinResMsg+0xc8>)
 8005290:	785b      	ldrb	r3, [r3, #1]
 8005292:	f083 0301 	eor.w	r3, r3, #1
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f8      	bne.n	800528e <Check_JoinResMsg+0x6>
	USARTLoRa.Revflag=0;
 800529c:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <Check_JoinResMsg+0xc8>)
 800529e:	2200      	movs	r2, #0
 80052a0:	705a      	strb	r2, [r3, #1]
	if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n"))==LoRa_OK)
 80052a2:	482c      	ldr	r0, [pc, #176]	; (8005354 <Check_JoinResMsg+0xcc>)
 80052a4:	f7ff ff5c 	bl	8005160 <LoRaResCheck>
 80052a8:	4603      	mov	r3, r0
 80052aa:	461a      	mov	r2, r3
 80052ac:	4b28      	ldr	r3, [pc, #160]	; (8005350 <Check_JoinResMsg+0xc8>)
 80052ae:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80052b2:	4b27      	ldr	r3, [pc, #156]	; (8005350 <Check_JoinResMsg+0xc8>)
 80052b4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d101      	bne.n	80052c0 <Check_JoinResMsg+0x38>
		return LoRa_OK;
 80052bc:	2300      	movs	r3, #0
 80052be:	e045      	b.n	800534c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Invalid\n"))==LoRa_OK)
 80052c0:	4825      	ldr	r0, [pc, #148]	; (8005358 <Check_JoinResMsg+0xd0>)
 80052c2:	f7ff ff4d 	bl	8005160 <LoRaResCheck>
 80052c6:	4603      	mov	r3, r0
 80052c8:	461a      	mov	r2, r3
 80052ca:	4b21      	ldr	r3, [pc, #132]	; (8005350 <Check_JoinResMsg+0xc8>)
 80052cc:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80052d0:	4b1f      	ldr	r3, [pc, #124]	; (8005350 <Check_JoinResMsg+0xc8>)
 80052d2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <Check_JoinResMsg+0x56>
		return LoRa_Join_Invalid;
 80052da:	2302      	movs	r3, #2
 80052dc:	e036      	b.n	800534c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> keys_not_init\n"))==LoRa_OK)
 80052de:	481f      	ldr	r0, [pc, #124]	; (800535c <Check_JoinResMsg+0xd4>)
 80052e0:	f7ff ff3e 	bl	8005160 <LoRaResCheck>
 80052e4:	4603      	mov	r3, r0
 80052e6:	461a      	mov	r2, r3
 80052e8:	4b19      	ldr	r3, [pc, #100]	; (8005350 <Check_JoinResMsg+0xc8>)
 80052ea:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80052ee:	4b18      	ldr	r3, [pc, #96]	; (8005350 <Check_JoinResMsg+0xc8>)
 80052f0:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <Check_JoinResMsg+0x74>
		return LoRa_Join_keys_not_init;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e027      	b.n	800534c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> no_free_ch\n"))==LoRa_OK)
 80052fc:	4818      	ldr	r0, [pc, #96]	; (8005360 <Check_JoinResMsg+0xd8>)
 80052fe:	f7ff ff2f 	bl	8005160 <LoRaResCheck>
 8005302:	4603      	mov	r3, r0
 8005304:	461a      	mov	r2, r3
 8005306:	4b12      	ldr	r3, [pc, #72]	; (8005350 <Check_JoinResMsg+0xc8>)
 8005308:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800530c:	4b10      	ldr	r3, [pc, #64]	; (8005350 <Check_JoinResMsg+0xc8>)
 800530e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d101      	bne.n	800531a <Check_JoinResMsg+0x92>
		return LoRa_Join_no_free_ch;
 8005316:	2304      	movs	r3, #4
 8005318:	e018      	b.n	800534c <Check_JoinResMsg+0xc4>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> busy\n"))==LoRa_OK)
 800531a:	4812      	ldr	r0, [pc, #72]	; (8005364 <Check_JoinResMsg+0xdc>)
 800531c:	f7ff ff20 	bl	8005160 <LoRaResCheck>
 8005320:	4603      	mov	r3, r0
 8005322:	461a      	mov	r2, r3
 8005324:	4b0a      	ldr	r3, [pc, #40]	; (8005350 <Check_JoinResMsg+0xc8>)
 8005326:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800532a:	4b09      	ldr	r3, [pc, #36]	; (8005350 <Check_JoinResMsg+0xc8>)
 800532c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <Check_JoinResMsg+0xb0>
		return LoRa_Join_busy;
 8005334:	2305      	movs	r3, #5
 8005336:	e009      	b.n	800534c <Check_JoinResMsg+0xc4>
	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005338:	480b      	ldr	r0, [pc, #44]	; (8005368 <Check_JoinResMsg+0xe0>)
 800533a:	f7fa ffc3 	bl	80002c4 <strlen>
 800533e:	4603      	mov	r3, r0
 8005340:	461a      	mov	r2, r3
 8005342:	2100      	movs	r1, #0
 8005344:	4808      	ldr	r0, [pc, #32]	; (8005368 <Check_JoinResMsg+0xe0>)
 8005346:	f006 faf5 	bl	800b934 <memset>
		return LoRa_unexpected_Err;
 800534a:	2317      	movs	r3, #23
	}
}
 800534c:	4618      	mov	r0, r3
 800534e:	bd80      	pop	{r7, pc}
 8005350:	20002520 	.word	0x20002520
 8005354:	0800dd0c 	.word	0x0800dd0c
 8005358:	0800dcfc 	.word	0x0800dcfc
 800535c:	0800debc 	.word	0x0800debc
 8005360:	0800ded0 	.word	0x0800ded0
 8005364:	0800dee4 	.word	0x0800dee4
 8005368:	200026c0 	.word	0x200026c0

0800536c <Check_Tx1stResMsg>:

LoRa_StatusTypeDef Check_Tx1stResMsg()
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
	//wait data Response
	while(!USARTLoRa.Revflag);
 8005370:	bf00      	nop
 8005372:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <Check_Tx1stResMsg+0x104>)
 8005374:	785b      	ldrb	r3, [r3, #1]
 8005376:	f083 0301 	eor.w	r3, r3, #1
 800537a:	b2db      	uxtb	r3, r3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d1f8      	bne.n	8005372 <Check_Tx1stResMsg+0x6>
	USARTLoRa.Revflag=0;
 8005380:	4b3b      	ldr	r3, [pc, #236]	; (8005470 <Check_Tx1stResMsg+0x104>)
 8005382:	2200      	movs	r2, #0
 8005384:	705a      	strb	r2, [r3, #1]
	if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n"))==LoRa_OK)
 8005386:	483b      	ldr	r0, [pc, #236]	; (8005474 <Check_Tx1stResMsg+0x108>)
 8005388:	f7ff feea 	bl	8005160 <LoRaResCheck>
 800538c:	4603      	mov	r3, r0
 800538e:	461a      	mov	r2, r3
 8005390:	4b37      	ldr	r3, [pc, #220]	; (8005470 <Check_Tx1stResMsg+0x104>)
 8005392:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 8005396:	4b36      	ldr	r3, [pc, #216]	; (8005470 <Check_Tx1stResMsg+0x104>)
 8005398:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <Check_Tx1stResMsg+0x38>
		return LoRa_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e063      	b.n	800546c <Check_Tx1stResMsg+0x100>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Invalid\n"))==LoRa_OK)
 80053a4:	4834      	ldr	r0, [pc, #208]	; (8005478 <Check_Tx1stResMsg+0x10c>)
 80053a6:	f7ff fedb 	bl	8005160 <LoRaResCheck>
 80053aa:	4603      	mov	r3, r0
 80053ac:	461a      	mov	r2, r3
 80053ae:	4b30      	ldr	r3, [pc, #192]	; (8005470 <Check_Tx1stResMsg+0x104>)
 80053b0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80053b4:	4b2e      	ldr	r3, [pc, #184]	; (8005470 <Check_Tx1stResMsg+0x104>)
 80053b6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <Check_Tx1stResMsg+0x56>
		return LoRa_Tx_Invalid;
 80053be:	2309      	movs	r3, #9
 80053c0:	e054      	b.n	800546c <Check_Tx1stResMsg+0x100>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> not_joined\n"))==LoRa_OK)
 80053c2:	482e      	ldr	r0, [pc, #184]	; (800547c <Check_Tx1stResMsg+0x110>)
 80053c4:	f7ff fecc 	bl	8005160 <LoRaResCheck>
 80053c8:	4603      	mov	r3, r0
 80053ca:	461a      	mov	r2, r3
 80053cc:	4b28      	ldr	r3, [pc, #160]	; (8005470 <Check_Tx1stResMsg+0x104>)
 80053ce:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80053d2:	4b27      	ldr	r3, [pc, #156]	; (8005470 <Check_Tx1stResMsg+0x104>)
 80053d4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <Check_Tx1stResMsg+0x74>
		return LoRa_Tx_not_joined;
 80053dc:	230a      	movs	r3, #10
 80053de:	e045      	b.n	800546c <Check_Tx1stResMsg+0x100>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> no_free_ch\n"))==LoRa_OK)
 80053e0:	4827      	ldr	r0, [pc, #156]	; (8005480 <Check_Tx1stResMsg+0x114>)
 80053e2:	f7ff febd 	bl	8005160 <LoRaResCheck>
 80053e6:	4603      	mov	r3, r0
 80053e8:	461a      	mov	r2, r3
 80053ea:	4b21      	ldr	r3, [pc, #132]	; (8005470 <Check_Tx1stResMsg+0x104>)
 80053ec:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80053f0:	4b1f      	ldr	r3, [pc, #124]	; (8005470 <Check_Tx1stResMsg+0x104>)
 80053f2:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d101      	bne.n	80053fe <Check_Tx1stResMsg+0x92>
		return LoRa_Tx_no_free_ch;
 80053fa:	230b      	movs	r3, #11
 80053fc:	e036      	b.n	800546c <Check_Tx1stResMsg+0x100>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> busy\n"))==LoRa_OK)
 80053fe:	4821      	ldr	r0, [pc, #132]	; (8005484 <Check_Tx1stResMsg+0x118>)
 8005400:	f7ff feae 	bl	8005160 <LoRaResCheck>
 8005404:	4603      	mov	r3, r0
 8005406:	461a      	mov	r2, r3
 8005408:	4b19      	ldr	r3, [pc, #100]	; (8005470 <Check_Tx1stResMsg+0x104>)
 800540a:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800540e:	4b18      	ldr	r3, [pc, #96]	; (8005470 <Check_Tx1stResMsg+0x104>)
 8005410:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <Check_Tx1stResMsg+0xb0>
		return LoRa_Tx_busy;
 8005418:	230c      	movs	r3, #12
 800541a:	e027      	b.n	800546c <Check_Tx1stResMsg+0x100>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> invalid_data_length\n"))==LoRa_OK)
 800541c:	481a      	ldr	r0, [pc, #104]	; (8005488 <Check_Tx1stResMsg+0x11c>)
 800541e:	f7ff fe9f 	bl	8005160 <LoRaResCheck>
 8005422:	4603      	mov	r3, r0
 8005424:	461a      	mov	r2, r3
 8005426:	4b12      	ldr	r3, [pc, #72]	; (8005470 <Check_Tx1stResMsg+0x104>)
 8005428:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800542c:	4b10      	ldr	r3, [pc, #64]	; (8005470 <Check_Tx1stResMsg+0x104>)
 800542e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <Check_Tx1stResMsg+0xce>
		return LoRa_Tx_invalid_data_length;
 8005436:	230d      	movs	r3, #13
 8005438:	e018      	b.n	800546c <Check_Tx1stResMsg+0x100>
	else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> exceeded_data_length\n"))==LoRa_OK)
 800543a:	4814      	ldr	r0, [pc, #80]	; (800548c <Check_Tx1stResMsg+0x120>)
 800543c:	f7ff fe90 	bl	8005160 <LoRaResCheck>
 8005440:	4603      	mov	r3, r0
 8005442:	461a      	mov	r2, r3
 8005444:	4b0a      	ldr	r3, [pc, #40]	; (8005470 <Check_Tx1stResMsg+0x104>)
 8005446:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <Check_Tx1stResMsg+0x104>)
 800544c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005450:	2b00      	cmp	r3, #0
 8005452:	d101      	bne.n	8005458 <Check_Tx1stResMsg+0xec>
		return LoRa_Tx_exceeded_data_length;
 8005454:	230e      	movs	r3, #14
 8005456:	e009      	b.n	800546c <Check_Tx1stResMsg+0x100>

	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005458:	480d      	ldr	r0, [pc, #52]	; (8005490 <Check_Tx1stResMsg+0x124>)
 800545a:	f7fa ff33 	bl	80002c4 <strlen>
 800545e:	4603      	mov	r3, r0
 8005460:	461a      	mov	r2, r3
 8005462:	2100      	movs	r1, #0
 8005464:	480a      	ldr	r0, [pc, #40]	; (8005490 <Check_Tx1stResMsg+0x124>)
 8005466:	f006 fa65 	bl	800b934 <memset>
		return LoRa_unexpected_Err;
 800546a:	2317      	movs	r3, #23
	}
}
 800546c:	4618      	mov	r0, r3
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20002520 	.word	0x20002520
 8005474:	0800dd0c 	.word	0x0800dd0c
 8005478:	0800dcfc 	.word	0x0800dcfc
 800547c:	0800def0 	.word	0x0800def0
 8005480:	0800ded0 	.word	0x0800ded0
 8005484:	0800dee4 	.word	0x0800dee4
 8005488:	0800df04 	.word	0x0800df04
 800548c:	0800df20 	.word	0x0800df20
 8005490:	200026c0 	.word	0x200026c0

08005494 <Check_Tx2stResMsg>:

LoRa_StatusTypeDef Check_Tx2stResMsg()
{
 8005494:	b580      	push	{r7, lr}
 8005496:	af00      	add	r7, sp, #0
	if(USARTLoRa.Revflag)
 8005498:	4b22      	ldr	r3, [pc, #136]	; (8005524 <Check_Tx2stResMsg+0x90>)
 800549a:	785b      	ldrb	r3, [r3, #1]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d03d      	beq.n	800551c <Check_Tx2stResMsg+0x88>
	{
		USARTLoRa.Revflag=0;
 80054a0:	4b20      	ldr	r3, [pc, #128]	; (8005524 <Check_Tx2stResMsg+0x90>)
 80054a2:	2200      	movs	r2, #0
 80054a4:	705a      	strb	r2, [r3, #1]
		if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> tx_ok\n"))==LoRa_OK)
 80054a6:	4820      	ldr	r0, [pc, #128]	; (8005528 <Check_Tx2stResMsg+0x94>)
 80054a8:	f7ff fe5a 	bl	8005160 <LoRaResCheck>
 80054ac:	4603      	mov	r3, r0
 80054ae:	461a      	mov	r2, r3
 80054b0:	4b1c      	ldr	r3, [pc, #112]	; (8005524 <Check_Tx2stResMsg+0x90>)
 80054b2:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80054b6:	4b1b      	ldr	r3, [pc, #108]	; (8005524 <Check_Tx2stResMsg+0x90>)
 80054b8:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d101      	bne.n	80054c4 <Check_Tx2stResMsg+0x30>
			return LoRa_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e02c      	b.n	800551e <Check_Tx2stResMsg+0x8a>
		else if((USARTLoRa.ResStatus=LoRaResCheck("\n\r>> err\n"))==LoRa_OK)
 80054c4:	4819      	ldr	r0, [pc, #100]	; (800552c <Check_Tx2stResMsg+0x98>)
 80054c6:	f7ff fe4b 	bl	8005160 <LoRaResCheck>
 80054ca:	4603      	mov	r3, r0
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b15      	ldr	r3, [pc, #84]	; (8005524 <Check_Tx2stResMsg+0x90>)
 80054d0:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
 80054d4:	4b13      	ldr	r3, [pc, #76]	; (8005524 <Check_Tx2stResMsg+0x90>)
 80054d6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <Check_Tx2stResMsg+0x4e>
			return LoRa_Tx2_err;
 80054de:	230f      	movs	r3, #15
 80054e0:	e01d      	b.n	800551e <Check_Tx2stResMsg+0x8a>
		else if(USARTLoRa.LoRaRxflag == 1)
 80054e2:	4b10      	ldr	r3, [pc, #64]	; (8005524 <Check_Tx2stResMsg+0x90>)
 80054e4:	78db      	ldrb	r3, [r3, #3]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00d      	beq.n	8005506 <Check_Tx2stResMsg+0x72>
		{
			USARTLoRa.LoRaRxflag = 0;
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <Check_Tx2stResMsg+0x90>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	70da      	strb	r2, [r3, #3]
			memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80054f0:	480f      	ldr	r0, [pc, #60]	; (8005530 <Check_Tx2stResMsg+0x9c>)
 80054f2:	f7fa fee7 	bl	80002c4 <strlen>
 80054f6:	4603      	mov	r3, r0
 80054f8:	461a      	mov	r2, r3
 80054fa:	2100      	movs	r1, #0
 80054fc:	480c      	ldr	r0, [pc, #48]	; (8005530 <Check_Tx2stResMsg+0x9c>)
 80054fe:	f006 fa19 	bl	800b934 <memset>
			return LoRa_Tx2_RxReceived;
 8005502:	2310      	movs	r3, #16
 8005504:	e00b      	b.n	800551e <Check_Tx2stResMsg+0x8a>
		}
		else
		{
			memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005506:	480a      	ldr	r0, [pc, #40]	; (8005530 <Check_Tx2stResMsg+0x9c>)
 8005508:	f7fa fedc 	bl	80002c4 <strlen>
 800550c:	4603      	mov	r3, r0
 800550e:	461a      	mov	r2, r3
 8005510:	2100      	movs	r1, #0
 8005512:	4807      	ldr	r0, [pc, #28]	; (8005530 <Check_Tx2stResMsg+0x9c>)
 8005514:	f006 fa0e 	bl	800b934 <memset>
			return LoRa_unexpected_Err;
 8005518:	2317      	movs	r3, #23
 800551a:	e000      	b.n	800551e <Check_Tx2stResMsg+0x8a>
		}

	}
	else
		return LoRa_TxData_WaitRes;
 800551c:	2308      	movs	r3, #8
}
 800551e:	4618      	mov	r0, r3
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20002520 	.word	0x20002520
 8005528:	0800df3c 	.word	0x0800df3c
 800552c:	0800df48 	.word	0x0800df48
 8005530:	200026c0 	.word	0x200026c0

08005534 <LoRaChipReset>:

void LoRaChipReset(UART_HandleTypeDef *huart)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
	//USARTLoRa.ResetRevflag=1;
	LoRaCommand(huart, LoRaReset);
 800553c:	4913      	ldr	r1, [pc, #76]	; (800558c <LoRaChipReset+0x58>)
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f7ff fdd2 	bl	80050e8 <LoRaCommand>
	//receive reset response
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005544:	4812      	ldr	r0, [pc, #72]	; (8005590 <LoRaChipReset+0x5c>)
 8005546:	f7fa febd 	bl	80002c4 <strlen>
 800554a:	4603      	mov	r3, r0
 800554c:	461a      	mov	r2, r3
 800554e:	2100      	movs	r1, #0
 8005550:	480f      	ldr	r0, [pc, #60]	; (8005590 <LoRaChipReset+0x5c>)
 8005552:	f006 f9ef 	bl	800b934 <memset>
	while(!USARTLoRa.Revflag);
 8005556:	bf00      	nop
 8005558:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <LoRaChipReset+0x60>)
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	f083 0301 	eor.w	r3, r3, #1
 8005560:	b2db      	uxtb	r3, r3
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1f8      	bne.n	8005558 <LoRaChipReset+0x24>
	USARTLoRa.Revflag=0;
 8005566:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <LoRaChipReset+0x60>)
 8005568:	2200      	movs	r2, #0
 800556a:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResetRevflag=0;
 800556c:	4b09      	ldr	r3, [pc, #36]	; (8005594 <LoRaChipReset+0x60>)
 800556e:	2200      	movs	r2, #0
 8005570:	709a      	strb	r2, [r3, #2]
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005572:	4807      	ldr	r0, [pc, #28]	; (8005590 <LoRaChipReset+0x5c>)
 8005574:	f7fa fea6 	bl	80002c4 <strlen>
 8005578:	4603      	mov	r3, r0
 800557a:	461a      	mov	r2, r3
 800557c:	2100      	movs	r1, #0
 800557e:	4804      	ldr	r0, [pc, #16]	; (8005590 <LoRaChipReset+0x5c>)
 8005580:	f006 f9d8 	bl	800b934 <memset>
}
 8005584:	bf00      	nop
 8005586:	3708      	adds	r7, #8
 8005588:	46bd      	mov	sp, r7
 800558a:	bd80      	pop	{r7, pc}
 800558c:	0800df54 	.word	0x0800df54
 8005590:	200026c0 	.word	0x200026c0
 8005594:	20002520 	.word	0x20002520

08005598 <LoRaFactorReset>:

void LoRaFactorReset(UART_HandleTypeDef *huart)
{
 8005598:	b580      	push	{r7, lr}
 800559a:	b082      	sub	sp, #8
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	//USARTLoRa.ResetRevflag=1;
	LoRaCommand(huart, LoRaFacReset);
 80055a0:	4913      	ldr	r1, [pc, #76]	; (80055f0 <LoRaFactorReset+0x58>)
 80055a2:	6878      	ldr	r0, [r7, #4]
 80055a4:	f7ff fda0 	bl	80050e8 <LoRaCommand>
	//receive reset response
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80055a8:	4812      	ldr	r0, [pc, #72]	; (80055f4 <LoRaFactorReset+0x5c>)
 80055aa:	f7fa fe8b 	bl	80002c4 <strlen>
 80055ae:	4603      	mov	r3, r0
 80055b0:	461a      	mov	r2, r3
 80055b2:	2100      	movs	r1, #0
 80055b4:	480f      	ldr	r0, [pc, #60]	; (80055f4 <LoRaFactorReset+0x5c>)
 80055b6:	f006 f9bd 	bl	800b934 <memset>
	while(!USARTLoRa.Revflag);
 80055ba:	bf00      	nop
 80055bc:	4b0e      	ldr	r3, [pc, #56]	; (80055f8 <LoRaFactorReset+0x60>)
 80055be:	785b      	ldrb	r3, [r3, #1]
 80055c0:	f083 0301 	eor.w	r3, r3, #1
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f8      	bne.n	80055bc <LoRaFactorReset+0x24>
	USARTLoRa.Revflag=0;
 80055ca:	4b0b      	ldr	r3, [pc, #44]	; (80055f8 <LoRaFactorReset+0x60>)
 80055cc:	2200      	movs	r2, #0
 80055ce:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResetRevflag=0;
 80055d0:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <LoRaFactorReset+0x60>)
 80055d2:	2200      	movs	r2, #0
 80055d4:	709a      	strb	r2, [r3, #2]
	memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80055d6:	4807      	ldr	r0, [pc, #28]	; (80055f4 <LoRaFactorReset+0x5c>)
 80055d8:	f7fa fe74 	bl	80002c4 <strlen>
 80055dc:	4603      	mov	r3, r0
 80055de:	461a      	mov	r2, r3
 80055e0:	2100      	movs	r1, #0
 80055e2:	4804      	ldr	r0, [pc, #16]	; (80055f4 <LoRaFactorReset+0x5c>)
 80055e4:	f006 f9a6 	bl	800b934 <memset>
}
 80055e8:	bf00      	nop
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}
 80055f0:	0800df60 	.word	0x0800df60
 80055f4:	200026c0 	.word	0x200026c0
 80055f8:	20002520 	.word	0x20002520

080055fc <WakeUpTrigger>:

LoRa_StatusTypeDef WakeUpTrigger(UART_HandleTypeDef *huart)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, WKUPtigger);
 8005604:	4921      	ldr	r1, [pc, #132]	; (800568c <WakeUpTrigger+0x90>)
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f7ff fd6e 	bl	80050e8 <LoRaCommand>
	//wait data Response
	while(!USARTLoRa.Revflag)
 800560c:	e00b      	b.n	8005626 <WakeUpTrigger+0x2a>
	{
		LoRachipCrashDetect_HDRST(&htim2);
 800560e:	4820      	ldr	r0, [pc, #128]	; (8005690 <WakeUpTrigger+0x94>)
 8005610:	f000 f8ee 	bl	80057f0 <LoRachipCrashDetect_HDRST>
		if(USARTLoRa.ResStatus==LoRa_HDRest)
 8005614:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <WakeUpTrigger+0x98>)
 8005616:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800561a:	2b18      	cmp	r3, #24
 800561c:	d103      	bne.n	8005626 <WakeUpTrigger+0x2a>
			return USARTLoRa.ResStatus;
 800561e:	4b1d      	ldr	r3, [pc, #116]	; (8005694 <WakeUpTrigger+0x98>)
 8005620:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005624:	e02e      	b.n	8005684 <WakeUpTrigger+0x88>
	while(!USARTLoRa.Revflag)
 8005626:	4b1b      	ldr	r3, [pc, #108]	; (8005694 <WakeUpTrigger+0x98>)
 8005628:	785b      	ldrb	r3, [r3, #1]
 800562a:	f083 0301 	eor.w	r3, r3, #1
 800562e:	b2db      	uxtb	r3, r3
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1ec      	bne.n	800560e <WakeUpTrigger+0x12>
	}
	LoRachipCrashDetect_Stop(&htim2);
 8005634:	4816      	ldr	r0, [pc, #88]	; (8005690 <WakeUpTrigger+0x94>)
 8005636:	f000 f939 	bl	80058ac <LoRachipCrashDetect_Stop>
	USARTLoRa.Revflag = 0;
 800563a:	4b16      	ldr	r3, [pc, #88]	; (8005694 <WakeUpTrigger+0x98>)
 800563c:	2200      	movs	r2, #0
 800563e:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Unknown command!\n");
 8005640:	4815      	ldr	r0, [pc, #84]	; (8005698 <WakeUpTrigger+0x9c>)
 8005642:	f7ff fd8d 	bl	8005160 <LoRaResCheck>
 8005646:	4603      	mov	r3, r0
 8005648:	461a      	mov	r2, r3
 800564a:	4b12      	ldr	r3, [pc, #72]	; (8005694 <WakeUpTrigger+0x98>)
 800564c:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8005650:	4b10      	ldr	r3, [pc, #64]	; (8005694 <WakeUpTrigger+0x98>)
 8005652:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d013      	beq.n	8005682 <WakeUpTrigger+0x86>
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 800565a:	4810      	ldr	r0, [pc, #64]	; (800569c <WakeUpTrigger+0xa0>)
 800565c:	f7fa fe32 	bl	80002c4 <strlen>
 8005660:	4603      	mov	r3, r0
 8005662:	461a      	mov	r2, r3
 8005664:	2100      	movs	r1, #0
 8005666:	480d      	ldr	r0, [pc, #52]	; (800569c <WakeUpTrigger+0xa0>)
 8005668:	f006 f964 	bl	800b934 <memset>
		if(USARTLoRa.ResetRevflag)
 800566c:	4b09      	ldr	r3, [pc, #36]	; (8005694 <WakeUpTrigger+0x98>)
 800566e:	789b      	ldrb	r3, [r3, #2]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d004      	beq.n	800567e <WakeUpTrigger+0x82>
		{
			USARTLoRa.ResetRevflag = 0;
 8005674:	4b07      	ldr	r3, [pc, #28]	; (8005694 <WakeUpTrigger+0x98>)
 8005676:	2200      	movs	r2, #0
 8005678:	709a      	strb	r2, [r3, #2]
			return LoRa_PowerUp;
 800567a:	2312      	movs	r3, #18
 800567c:	e002      	b.n	8005684 <WakeUpTrigger+0x88>
		}
		else
			return LoRa_WaKeUp;
 800567e:	2311      	movs	r3, #17
 8005680:	e000      	b.n	8005684 <WakeUpTrigger+0x88>
	}
	else
		return LoRa_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3708      	adds	r7, #8
 8005688:	46bd      	mov	sp, r7
 800568a:	bd80      	pop	{r7, pc}
 800568c:	0800df74 	.word	0x0800df74
 8005690:	200027e0 	.word	0x200027e0
 8005694:	20002520 	.word	0x20002520
 8005698:	0800df7c 	.word	0x0800df7c
 800569c:	200026c0 	.word	0x200026c0

080056a0 <CheckJoinStatus>:

LoRa_StatusTypeDef CheckJoinStatus(UART_HandleTypeDef *huart)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, CkJoinSt);
 80056a8:	4909      	ldr	r1, [pc, #36]	; (80056d0 <CheckJoinStatus+0x30>)
 80056aa:	6878      	ldr	r0, [r7, #4]
 80056ac:	f7ff fd1c 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> joined\n", "\n\r>> unjoined\n");
 80056b0:	4908      	ldr	r1, [pc, #32]	; (80056d4 <CheckJoinStatus+0x34>)
 80056b2:	4809      	ldr	r0, [pc, #36]	; (80056d8 <CheckJoinStatus+0x38>)
 80056b4:	f7ff fd90 	bl	80051d8 <Check_2ResMsg>
 80056b8:	4603      	mov	r3, r0
 80056ba:	461a      	mov	r2, r3
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <CheckJoinStatus+0x3c>)
 80056be:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	return USARTLoRa.ResStatus;
 80056c2:	4b06      	ldr	r3, [pc, #24]	; (80056dc <CheckJoinStatus+0x3c>)
 80056c4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1

}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3708      	adds	r7, #8
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}
 80056d0:	0800df94 	.word	0x0800df94
 80056d4:	0800deac 	.word	0x0800deac
 80056d8:	0800de9c 	.word	0x0800de9c
 80056dc:	20002520 	.word	0x20002520

080056e0 <EnterSleep>:

LoRa_StatusTypeDef EnterSleep(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b082      	sub	sp, #8
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, Sleep4200s);
 80056e8:	4915      	ldr	r1, [pc, #84]	; (8005740 <EnterSleep+0x60>)
 80056ea:	6878      	ldr	r0, [r7, #4]
 80056ec:	f7ff fcfc 	bl	80050e8 <LoRaCommand>

	//wait data Response
	while(!USARTLoRa.Revflag);
 80056f0:	bf00      	nop
 80056f2:	4b14      	ldr	r3, [pc, #80]	; (8005744 <EnterSleep+0x64>)
 80056f4:	785b      	ldrb	r3, [r3, #1]
 80056f6:	f083 0301 	eor.w	r3, r3, #1
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f8      	bne.n	80056f2 <EnterSleep+0x12>
	USARTLoRa.Revflag = 0;
 8005700:	4b10      	ldr	r3, [pc, #64]	; (8005744 <EnterSleep+0x64>)
 8005702:	2200      	movs	r2, #0
 8005704:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> sleep 4200 sec uart_on\n");
 8005706:	4810      	ldr	r0, [pc, #64]	; (8005748 <EnterSleep+0x68>)
 8005708:	f7ff fd2a 	bl	8005160 <LoRaResCheck>
 800570c:	4603      	mov	r3, r0
 800570e:	461a      	mov	r2, r3
 8005710:	4b0c      	ldr	r3, [pc, #48]	; (8005744 <EnterSleep+0x64>)
 8005712:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus == LoRa_OK)
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <EnterSleep+0x64>)
 8005718:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800571c:	2b00      	cmp	r3, #0
 800571e:	d101      	bne.n	8005724 <EnterSleep+0x44>
	{
		return LoRa_Sleep;
 8005720:	2315      	movs	r3, #21
 8005722:	e009      	b.n	8005738 <EnterSleep+0x58>
	}
	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005724:	4809      	ldr	r0, [pc, #36]	; (800574c <EnterSleep+0x6c>)
 8005726:	f7fa fdcd 	bl	80002c4 <strlen>
 800572a:	4603      	mov	r3, r0
 800572c:	461a      	mov	r2, r3
 800572e:	2100      	movs	r1, #0
 8005730:	4806      	ldr	r0, [pc, #24]	; (800574c <EnterSleep+0x6c>)
 8005732:	f006 f8ff 	bl	800b934 <memset>
		return LoRa_unexpected_Err;
 8005736:	2317      	movs	r3, #23
	}
}
 8005738:	4618      	mov	r0, r3
 800573a:	3708      	adds	r7, #8
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	0800dfa8 	.word	0x0800dfa8
 8005744:	20002520 	.word	0x20002520
 8005748:	0800dfc0 	.word	0x0800dfc0
 800574c:	200026c0 	.word	0x200026c0

08005750 <LoRaSaveCF>:

LoRa_StatusTypeDef LoRaSaveCF(UART_HandleTypeDef *huart)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
	LoRaCommand(huart, LoRaSave);
 8005758:	4920      	ldr	r1, [pc, #128]	; (80057dc <LoRaSaveCF+0x8c>)
 800575a:	6878      	ldr	r0, [r7, #4]
 800575c:	f7ff fcc4 	bl	80050e8 <LoRaCommand>
	USARTLoRa.ResStatus=Check_2ResMsg("\n\r>> Ok\n", "\n\r>> Invalid\n");
 8005760:	491f      	ldr	r1, [pc, #124]	; (80057e0 <LoRaSaveCF+0x90>)
 8005762:	4820      	ldr	r0, [pc, #128]	; (80057e4 <LoRaSaveCF+0x94>)
 8005764:	f7ff fd38 	bl	80051d8 <Check_2ResMsg>
 8005768:	4603      	mov	r3, r0
 800576a:	461a      	mov	r2, r3
 800576c:	4b1e      	ldr	r3, [pc, #120]	; (80057e8 <LoRaSaveCF+0x98>)
 800576e:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus != LoRa_OK)
 8005772:	4b1d      	ldr	r3, [pc, #116]	; (80057e8 <LoRaSaveCF+0x98>)
 8005774:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <LoRaSaveCF+0x34>
		return USARTLoRa.ResStatus;
 800577c:	4b1a      	ldr	r3, [pc, #104]	; (80057e8 <LoRaSaveCF+0x98>)
 800577e:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005782:	e027      	b.n	80057d4 <LoRaSaveCF+0x84>

	LoRaCommand(huart, LoRaSave);
 8005784:	4915      	ldr	r1, [pc, #84]	; (80057dc <LoRaSaveCF+0x8c>)
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7ff fcae 	bl	80050e8 <LoRaCommand>
	//wait data Response
	while(!USARTLoRa.Revflag);
 800578c:	bf00      	nop
 800578e:	4b16      	ldr	r3, [pc, #88]	; (80057e8 <LoRaSaveCF+0x98>)
 8005790:	785b      	ldrb	r3, [r3, #1]
 8005792:	f083 0301 	eor.w	r3, r3, #1
 8005796:	b2db      	uxtb	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1f8      	bne.n	800578e <LoRaSaveCF+0x3e>
	USARTLoRa.Revflag = 0;
 800579c:	4b12      	ldr	r3, [pc, #72]	; (80057e8 <LoRaSaveCF+0x98>)
 800579e:	2200      	movs	r2, #0
 80057a0:	705a      	strb	r2, [r3, #1]
	USARTLoRa.ResStatus=LoRaResCheck("\n\r>> Ok\n");
 80057a2:	4810      	ldr	r0, [pc, #64]	; (80057e4 <LoRaSaveCF+0x94>)
 80057a4:	f7ff fcdc 	bl	8005160 <LoRaResCheck>
 80057a8:	4603      	mov	r3, r0
 80057aa:	461a      	mov	r2, r3
 80057ac:	4b0e      	ldr	r3, [pc, #56]	; (80057e8 <LoRaSaveCF+0x98>)
 80057ae:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
	if(USARTLoRa.ResStatus == LoRa_OK)
 80057b2:	4b0d      	ldr	r3, [pc, #52]	; (80057e8 <LoRaSaveCF+0x98>)
 80057b4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d101      	bne.n	80057c0 <LoRaSaveCF+0x70>
		return LoRa_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e009      	b.n	80057d4 <LoRaSaveCF+0x84>
	else
	{
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 80057c0:	480a      	ldr	r0, [pc, #40]	; (80057ec <LoRaSaveCF+0x9c>)
 80057c2:	f7fa fd7f 	bl	80002c4 <strlen>
 80057c6:	4603      	mov	r3, r0
 80057c8:	461a      	mov	r2, r3
 80057ca:	2100      	movs	r1, #0
 80057cc:	4807      	ldr	r0, [pc, #28]	; (80057ec <LoRaSaveCF+0x9c>)
 80057ce:	f006 f8b1 	bl	800b934 <memset>
		return LoRa_unexpected_Err;
 80057d2:	2317      	movs	r3, #23
	}
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	0800dfe0 	.word	0x0800dfe0
 80057e0:	0800dcfc 	.word	0x0800dcfc
 80057e4:	0800dd0c 	.word	0x0800dd0c
 80057e8:	20002520 	.word	0x20002520
 80057ec:	200026c0 	.word	0x200026c0

080057f0 <LoRachipCrashDetect_HDRST>:
LoRa_StatusTypeDef LoRachipCrashDetect_HDRST(TIM_HandleTypeDef *htim)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
	//ChipCrashDetectTimer start
	if(USARTLoRa.CrashDetectStartflag == 0)
 80057f8:	4b28      	ldr	r3, [pc, #160]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 80057fa:	791b      	ldrb	r3, [r3, #4]
 80057fc:	f083 0301 	eor.w	r3, r3, #1
 8005800:	b2db      	uxtb	r3, r3
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <LoRachipCrashDetect_HDRST+0x22>
	{
		HAL_TIM_Base_Start_IT(&htim2);
 8005806:	4826      	ldr	r0, [pc, #152]	; (80058a0 <LoRachipCrashDetect_HDRST+0xb0>)
 8005808:	f004 fb84 	bl	8009f14 <HAL_TIM_Base_Start_IT>
		USARTLoRa.CrashDetectStartflag = 1;
 800580c:	4b23      	ldr	r3, [pc, #140]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 800580e:	2201      	movs	r2, #1
 8005810:	711a      	strb	r2, [r3, #4]
	}
	//if LoRa chip no response than 100ms, Hardware Reset the chip
	if(USARTLoRa.CrashTimerCount>=100)
 8005812:	4b22      	ldr	r3, [pc, #136]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 8005814:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005818:	2b63      	cmp	r3, #99	; 0x63
 800581a:	dd3a      	ble.n	8005892 <LoRachipCrashDetect_HDRST+0xa2>
	{
		LoRachipCrashDetect_Stop(&htim);
 800581c:	1d3b      	adds	r3, r7, #4
 800581e:	4618      	mov	r0, r3
 8005820:	f000 f844 	bl	80058ac <LoRachipCrashDetect_Stop>
		//Hardware Reset
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_RESET);
 8005824:	2200      	movs	r2, #0
 8005826:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800582a:	481e      	ldr	r0, [pc, #120]	; (80058a4 <LoRachipCrashDetect_HDRST+0xb4>)
 800582c:	f001 feb4 	bl	8007598 <HAL_GPIO_WritePin>
		HAL_Delay(1);
 8005830:	2001      	movs	r0, #1
 8005832:	f000 fecd 	bl	80065d0 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8005836:	2201      	movs	r2, #1
 8005838:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800583c:	4819      	ldr	r0, [pc, #100]	; (80058a4 <LoRachipCrashDetect_HDRST+0xb4>)
 800583e:	f001 feab 	bl	8007598 <HAL_GPIO_WritePin>

		//receive reset response
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005842:	4819      	ldr	r0, [pc, #100]	; (80058a8 <LoRachipCrashDetect_HDRST+0xb8>)
 8005844:	f7fa fd3e 	bl	80002c4 <strlen>
 8005848:	4603      	mov	r3, r0
 800584a:	461a      	mov	r2, r3
 800584c:	2100      	movs	r1, #0
 800584e:	4816      	ldr	r0, [pc, #88]	; (80058a8 <LoRachipCrashDetect_HDRST+0xb8>)
 8005850:	f006 f870 	bl	800b934 <memset>
		while(!USARTLoRa.Revflag);
 8005854:	bf00      	nop
 8005856:	4b11      	ldr	r3, [pc, #68]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 8005858:	785b      	ldrb	r3, [r3, #1]
 800585a:	f083 0301 	eor.w	r3, r3, #1
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b00      	cmp	r3, #0
 8005862:	d1f8      	bne.n	8005856 <LoRachipCrashDetect_HDRST+0x66>
		USARTLoRa.Revflag=0;
 8005864:	4b0d      	ldr	r3, [pc, #52]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 8005866:	2200      	movs	r2, #0
 8005868:	705a      	strb	r2, [r3, #1]
		USARTLoRa.ResetRevflag=0;
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 800586c:	2200      	movs	r2, #0
 800586e:	709a      	strb	r2, [r3, #2]
		memset(USARTLoRa.RevData, 0, strlen(USARTLoRa.RevData) ); //clear LoRa RevData
 8005870:	480d      	ldr	r0, [pc, #52]	; (80058a8 <LoRachipCrashDetect_HDRST+0xb8>)
 8005872:	f7fa fd27 	bl	80002c4 <strlen>
 8005876:	4603      	mov	r3, r0
 8005878:	461a      	mov	r2, r3
 800587a:	2100      	movs	r1, #0
 800587c:	480a      	ldr	r0, [pc, #40]	; (80058a8 <LoRachipCrashDetect_HDRST+0xb8>)
 800587e:	f006 f859 	bl	800b934 <memset>
		USARTLoRa.ResStatus = LoRa_HDRest;
 8005882:	4b06      	ldr	r3, [pc, #24]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 8005884:	2218      	movs	r2, #24
 8005886:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
		return USARTLoRa.ResStatus;
 800588a:	4b04      	ldr	r3, [pc, #16]	; (800589c <LoRachipCrashDetect_HDRST+0xac>)
 800588c:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 8005890:	e7ff      	b.n	8005892 <LoRachipCrashDetect_HDRST+0xa2>
	}
}
 8005892:	4618      	mov	r0, r3
 8005894:	3708      	adds	r7, #8
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
 800589a:	bf00      	nop
 800589c:	20002520 	.word	0x20002520
 80058a0:	200027e0 	.word	0x200027e0
 80058a4:	48000c00 	.word	0x48000c00
 80058a8:	200026c0 	.word	0x200026c0

080058ac <LoRachipCrashDetect_Stop>:
void LoRachipCrashDetect_Stop(TIM_HandleTypeDef *htim)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
	USARTLoRa.CrashTimerCount=0;
 80058b4:	4b06      	ldr	r3, [pc, #24]	; (80058d0 <LoRachipCrashDetect_Stop+0x24>)
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
	HAL_TIM_Base_Stop_IT(&htim2);
 80058bc:	4805      	ldr	r0, [pc, #20]	; (80058d4 <LoRachipCrashDetect_Stop+0x28>)
 80058be:	f004 fb53 	bl	8009f68 <HAL_TIM_Base_Stop_IT>
	USARTLoRa.CrashDetectStartflag = 0;
 80058c2:	4b03      	ldr	r3, [pc, #12]	; (80058d0 <LoRachipCrashDetect_Stop+0x24>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	711a      	strb	r2, [r3, #4]
}
 80058c8:	bf00      	nop
 80058ca:	3708      	adds	r7, #8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	20002520 	.word	0x20002520
 80058d4:	200027e0 	.word	0x200027e0

080058d8 <EnterStandbyPWR_Mode>:
/* Private variables ---------------------------------------------------------*/
PWRST_t PWRST;


void EnterStandbyPWR_Mode(RTC_HandleTypeDef *hrtc)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b082      	sub	sp, #8
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
	HAL_PWR_EnableWakeUpPin(PWR_WAKEUP_PIN2);
	*/

	//-------RTC Wake up setting---------------------
	//Set StnadbyTime
	PWRST.StandbyTime_Sec = 1 ;
 80058e0:	4b0a      	ldr	r3, [pc, #40]	; (800590c <EnterStandbyPWR_Mode+0x34>)
 80058e2:	2201      	movs	r2, #1
 80058e4:	805a      	strh	r2, [r3, #2]
	//set RTC WakeUpTimer
	if (HAL_RTCEx_SetWakeUpTimer_IT(hrtc, PWRST.StandbyTime_Sec, RTC_WAKEUPCLOCK_CK_SPRE_16BITS) != HAL_OK)
 80058e6:	4b09      	ldr	r3, [pc, #36]	; (800590c <EnterStandbyPWR_Mode+0x34>)
 80058e8:	885b      	ldrh	r3, [r3, #2]
 80058ea:	2204      	movs	r2, #4
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f003 fb54 	bl	8008f9c <HAL_RTCEx_SetWakeUpTimer_IT>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d001      	beq.n	80058fe <EnterStandbyPWR_Mode+0x26>
	{
		Error_Handler();
 80058fa:	f000 fc21 	bl	8006140 <Error_Handler>
	}
	/* Request to enter STANDBY mode  */
	HAL_PWR_EnterSTANDBYMode();
 80058fe:	f001 fed1 	bl	80076a4 <HAL_PWR_EnterSTANDBYMode>
}
 8005902:	bf00      	nop
 8005904:	3708      	adds	r7, #8
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	20002820 	.word	0x20002820

08005910 <RUN_PWR_Mode_Init>:

void RUN_PWR_Mode_Init(RTC_HandleTypeDef *hrtc)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b082      	sub	sp, #8
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
		HAL_PWR_DisableWakeUpPin(PWR_WAKEUP_PIN2);
	}
	*/
	//-------RTC Wake up setting---------------------
	//Disable RTC WakeUpTimer
	HAL_RTCEx_DeactivateWakeUpTimer(hrtc);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f003 fbd3 	bl	80090c4 <HAL_RTCEx_DeactivateWakeUpTimer>
}
 800591e:	bf00      	nop
 8005920:	3708      	adds	r7, #8
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
	...

08005928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800592c:	f000 fddf 	bl	80064ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005930:	f000 f8ae 	bl	8005a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005934:	f000 fa2e 	bl	8005d94 <MX_GPIO_Init>
  MX_RTC_Init();
 8005938:	f000 f948 	bl	8005bcc <MX_RTC_Init>
  MX_SPI1_Init();
 800593c:	f000 f96e 	bl	8005c1c <MX_SPI1_Init>
  MX_USART3_UART_Init();
 8005940:	f000 f9f8 	bl	8005d34 <MX_USART3_UART_Init>
  MX_IWDG_Init();
 8005944:	f000 f924 	bl	8005b90 <MX_IWDG_Init>
  MX_TIM2_Init();
 8005948:	f000 f9a6 	bl	8005c98 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  //TODO--Wayne20200925
  RUN_PWR_Mode_Init(&hrtc);
 800594c:	4845      	ldr	r0, [pc, #276]	; (8005a64 <main+0x13c>)
 800594e:	f7ff ffdf 	bl	8005910 <RUN_PWR_Mode_Init>
  USARTLoRa.Status=WakeUp;
 8005952:	4b45      	ldr	r3, [pc, #276]	; (8005a68 <main+0x140>)
 8005954:	2200      	movs	r2, #0
 8005956:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
//  USARTLoRa.Status=CMDdebug;
  while(HAL_UART_Receive_IT(&huart3,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 800595a:	bf00      	nop
 800595c:	2201      	movs	r2, #1
 800595e:	4943      	ldr	r1, [pc, #268]	; (8005a6c <main+0x144>)
 8005960:	4843      	ldr	r0, [pc, #268]	; (8005a70 <main+0x148>)
 8005962:	f004 ffe9 	bl	800a938 <HAL_UART_Receive_IT>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1f7      	bne.n	800595c <main+0x34>
  //delay_init(168);
  //delay_init(80);//STM32L4A6 HCLK=80MHz
  delay_init(16);//STM32L4A6 HCLK=16MHz
 800596c:	2010      	movs	r0, #16
 800596e:	f7fe ff15 	bl	800479c <delay_init>
  ADXL345_Init();
 8005972:	f7fe f8d1 	bl	8003b18 <ADXL345_Init>

  IWDGFreezeBySTDBY();
 8005976:	f000 fba3 	bl	80060c0 <IWDGFreezeBySTDBY>
  setting Device power mode:
  PWRST.PowerMode =
  			 	 ---RunMode
  			 	 ---StandbyMode
  */
  PWRST.PowerMode = StandbyMode;
 800597a:	4b3e      	ldr	r3, [pc, #248]	; (8005a74 <main+0x14c>)
 800597c:	2201      	movs	r2, #1
 800597e:	711a      	strb	r2, [r3, #4]
  NodeStatus = TrigAcquire;
 8005980:	4b3d      	ldr	r3, [pc, #244]	; (8005a78 <main+0x150>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
// 			dataReady = false;
// 		}
//     }
//     FeatureExtraction();
//     sampleIndex = 0;
	  switch(NodeStatus)
 8005986:	4b3c      	ldr	r3, [pc, #240]	; (8005a78 <main+0x150>)
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	2b03      	cmp	r3, #3
 800598c:	d8fb      	bhi.n	8005986 <main+0x5e>
 800598e:	a201      	add	r2, pc, #4	; (adr r2, 8005994 <main+0x6c>)
 8005990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005994:	080059a5 	.word	0x080059a5
 8005998:	080059b3 	.word	0x080059b3
 800599c:	08005a11 	.word	0x08005a11
 80059a0:	08005a23 	.word	0x08005a23
	  {
	  	case TrigAcquire:
	  		TrigAcqFlag = true;
 80059a4:	4b35      	ldr	r3, [pc, #212]	; (8005a7c <main+0x154>)
 80059a6:	2200      	movs	r2, #0
 80059a8:	701a      	strb	r2, [r3, #0]
	  		NodeStatus = DataAcquire;
 80059aa:	4b33      	ldr	r3, [pc, #204]	; (8005a78 <main+0x150>)
 80059ac:	2201      	movs	r2, #1
 80059ae:	701a      	strb	r2, [r3, #0]
//	  		//reset Data Ready Interrupt, Start acquire data.
//	  		readRegister(DATA0,data,6);
	  		  break;
 80059b0:	e057      	b.n	8005a62 <main+0x13a>

	  	case DataAcquire:
	  		if(TrigAcqFlag == true)
 80059b2:	4b32      	ldr	r3, [pc, #200]	; (8005a7c <main+0x154>)
 80059b4:	781b      	ldrb	r3, [r3, #0]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d11a      	bne.n	80059f0 <main+0xc8>
	  		{
	  			TrigAcqFlag = false;
 80059ba:	4b30      	ldr	r3, [pc, #192]	; (8005a7c <main+0x154>)
 80059bc:	2201      	movs	r2, #1
 80059be:	701a      	strb	r2, [r3, #0]
	  			//reset Data Ready Interrupt, Start acquire data.
	  			readRegister(DATA0,data,6);
 80059c0:	2206      	movs	r2, #6
 80059c2:	492f      	ldr	r1, [pc, #188]	; (8005a80 <main+0x158>)
 80059c4:	2032      	movs	r0, #50	; 0x32
 80059c6:	f7fd feed 	bl	80037a4 <readRegister>
	  		}
	  		//if(sampleIndex < dataLength/2)
		  	while(sampleIndex < dataLength/2)
 80059ca:	e011      	b.n	80059f0 <main+0xc8>
		  	{
		  		if(DRDY=1)
 80059cc:	4b2d      	ldr	r3, [pc, #180]	; (8005a84 <main+0x15c>)
 80059ce:	2201      	movs	r2, #1
 80059d0:	701a      	strb	r2, [r3, #0]
		  		{
			  		//Acquire data
			  		AcquireData(&data);
 80059d2:	482b      	ldr	r0, [pc, #172]	; (8005a80 <main+0x158>)
 80059d4:	f7fe f8d4 	bl	8003b80 <AcquireData>
			  		sampleIndex++;
 80059d8:	4b2b      	ldr	r3, [pc, #172]	; (8005a88 <main+0x160>)
 80059da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3301      	adds	r3, #1
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	b21a      	sxth	r2, r3
 80059e6:	4b28      	ldr	r3, [pc, #160]	; (8005a88 <main+0x160>)
 80059e8:	801a      	strh	r2, [r3, #0]
			  		DRDY=0;
 80059ea:	4b26      	ldr	r3, [pc, #152]	; (8005a84 <main+0x15c>)
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
		  	while(sampleIndex < dataLength/2)
 80059f0:	4b25      	ldr	r3, [pc, #148]	; (8005a88 <main+0x160>)
 80059f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80059f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80059fa:	dbe7      	blt.n	80059cc <main+0xa4>
			  	}
		  	}
			//else if(sampleIndex == dataLength/2)
	  		if(sampleIndex == dataLength/2)
 80059fc:	4b22      	ldr	r3, [pc, #136]	; (8005a88 <main+0x160>)
 80059fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a06:	d12b      	bne.n	8005a60 <main+0x138>
	  			NodeStatus = DataCalculate;
 8005a08:	4b1b      	ldr	r3, [pc, #108]	; (8005a78 <main+0x150>)
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	701a      	strb	r2, [r3, #0]
	  		  break;
 8005a0e:	e027      	b.n	8005a60 <main+0x138>

	  	case DataCalculate:
	  		FeatureExtraction();
 8005a10:	f7fe fa30 	bl	8003e74 <FeatureExtraction>
    		sampleIndex = 0;
 8005a14:	4b1c      	ldr	r3, [pc, #112]	; (8005a88 <main+0x160>)
 8005a16:	2200      	movs	r2, #0
 8005a18:	801a      	strh	r2, [r3, #0]
	  		NodeStatus = TransmitWithPWRST;
 8005a1a:	4b17      	ldr	r3, [pc, #92]	; (8005a78 <main+0x150>)
 8005a1c:	2203      	movs	r2, #3
 8005a1e:	701a      	strb	r2, [r3, #0]
	  		  break;
 8005a20:	e01f      	b.n	8005a62 <main+0x13a>

	  	case TransmitWithPWRST:
	  		if(PWRST.PowerMode == StandbyMode)
 8005a22:	4b14      	ldr	r3, [pc, #80]	; (8005a74 <main+0x14c>)
 8005a24:	791b      	ldrb	r3, [r3, #4]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00c      	beq.n	8005a44 <main+0x11c>
			{
    			//TODO:ADXL345 Standby Entry
    			ADXL_Standby(ON);
 8005a2a:	2000      	movs	r0, #0
 8005a2c:	f7fe f843 	bl	8003ab6 <ADXL_Standby>

    			//TODO:Lora send data
    			LoRa_USART(&huart3);
 8005a30:	480f      	ldr	r0, [pc, #60]	; (8005a70 <main+0x148>)
 8005a32:	f7fe fedb 	bl	80047ec <LoRa_USART>

    			//IWDG_Refresh
    			HAL_IWDG_Refresh(&hiwdg);
 8005a36:	4815      	ldr	r0, [pc, #84]	; (8005a8c <main+0x164>)
 8005a38:	f001 fe24 	bl	8007684 <HAL_IWDG_Refresh>

    			//TODO:MCU Standby Entry
    			EnterStandbyPWR_Mode(&hrtc);
 8005a3c:	4809      	ldr	r0, [pc, #36]	; (8005a64 <main+0x13c>)
 8005a3e:	f7ff ff4b 	bl	80058d8 <EnterStandbyPWR_Mode>

    			//IWDG_Refresh
    			HAL_IWDG_Refresh(&hiwdg);

    		}
	  		  break;
 8005a42:	e00e      	b.n	8005a62 <main+0x13a>
    			USARTLoRa.ResStatus = LoRa_OK;
 8005a44:	4b08      	ldr	r3, [pc, #32]	; (8005a68 <main+0x140>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	f883 22a1 	strb.w	r2, [r3, #673]	; 0x2a1
    			LoRa_USART(&huart3);
 8005a4c:	4808      	ldr	r0, [pc, #32]	; (8005a70 <main+0x148>)
 8005a4e:	f7fe fecd 	bl	80047ec <LoRa_USART>
    			NodeStatus = TrigAcquire;
 8005a52:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <main+0x150>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	701a      	strb	r2, [r3, #0]
    			HAL_IWDG_Refresh(&hiwdg);
 8005a58:	480c      	ldr	r0, [pc, #48]	; (8005a8c <main+0x164>)
 8005a5a:	f001 fe13 	bl	8007684 <HAL_IWDG_Refresh>
	  		  break;
 8005a5e:	e000      	b.n	8005a62 <main+0x13a>
	  		  break;
 8005a60:	bf00      	nop
	  switch(NodeStatus)
 8005a62:	e790      	b.n	8005986 <main+0x5e>
 8005a64:	2000a8ec 	.word	0x2000a8ec
 8005a68:	20002520 	.word	0x20002520
 8005a6c:	200026b6 	.word	0x200026b6
 8005a70:	20002828 	.word	0x20002828
 8005a74:	20002820 	.word	0x20002820
 8005a78:	2000a910 	.word	0x2000a910
 8005a7c:	20000004 	.word	0x20000004
 8005a80:	20000250 	.word	0x20000250
 8005a84:	2000024f 	.word	0x2000024f
 8005a88:	20000256 	.word	0x20000256
 8005a8c:	200028a8 	.word	0x200028a8

08005a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b0ba      	sub	sp, #232	; 0xe8
 8005a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a96:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005a9a:	2244      	movs	r2, #68	; 0x44
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f005 ff48 	bl	800b934 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005aa4:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	605a      	str	r2, [r3, #4]
 8005aae:	609a      	str	r2, [r3, #8]
 8005ab0:	60da      	str	r2, [r3, #12]
 8005ab2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ab4:	1d3b      	adds	r3, r7, #4
 8005ab6:	228c      	movs	r2, #140	; 0x8c
 8005ab8:	2100      	movs	r1, #0
 8005aba:	4618      	mov	r0, r3
 8005abc:	f005 ff3a 	bl	800b934 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 8005ac0:	2318      	movs	r3, #24
 8005ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8005acc:	2301      	movs	r3, #1
 8005ace:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8005ad8:	2360      	movs	r3, #96	; 0x60
 8005ada:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005ade:	2302      	movs	r3, #2
 8005ae0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLM = 1;
 8005aea:	2301      	movs	r3, #1
 8005aec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLN = 16;
 8005af0:	2310      	movs	r3, #16
 8005af2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005af6:	2302      	movs	r3, #2
 8005af8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005afc:	2302      	movs	r3, #2
 8005afe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005b02:	2302      	movs	r3, #2
 8005b04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005b08:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 fe47 	bl	80077a0 <HAL_RCC_OscConfig>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8005b18:	f000 fb12 	bl	8006140 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005b1c:	230f      	movs	r3, #15
 8005b1e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005b22:	2303      	movs	r3, #3
 8005b24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8005b28:	2380      	movs	r3, #128	; 0x80
 8005b2a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005b2e:	2300      	movs	r3, #0
 8005b30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005b34:	2300      	movs	r3, #0
 8005b36:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005b3a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8005b3e:	2100      	movs	r1, #0
 8005b40:	4618      	mov	r0, r3
 8005b42:	f002 fa53 	bl	8007fec <HAL_RCC_ClockConfig>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8005b4c:	f000 faf8 	bl	8006140 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3;
 8005b50:	4b0e      	ldr	r3, [pc, #56]	; (8005b8c <SystemClock_Config+0xfc>)
 8005b52:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8005b54:	2300      	movs	r3, #0
 8005b56:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8005b58:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b60:	1d3b      	adds	r3, r7, #4
 8005b62:	4618      	mov	r0, r3
 8005b64:	f002 fc46 	bl	80083f4 <HAL_RCCEx_PeriphCLKConfig>
 8005b68:	4603      	mov	r3, r0
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d001      	beq.n	8005b72 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8005b6e:	f000 fae7 	bl	8006140 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005b72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005b76:	f001 fdbd 	bl	80076f4 <HAL_PWREx_ControlVoltageScaling>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8005b80:	f000 fade 	bl	8006140 <Error_Handler>
  }
}
 8005b84:	bf00      	nop
 8005b86:	37e8      	adds	r7, #232	; 0xe8
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	00020004 	.word	0x00020004

08005b90 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8005b94:	4b0b      	ldr	r3, [pc, #44]	; (8005bc4 <MX_IWDG_Init+0x34>)
 8005b96:	4a0c      	ldr	r2, [pc, #48]	; (8005bc8 <MX_IWDG_Init+0x38>)
 8005b98:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8005b9a:	4b0a      	ldr	r3, [pc, #40]	; (8005bc4 <MX_IWDG_Init+0x34>)
 8005b9c:	2204      	movs	r2, #4
 8005b9e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4000;
 8005ba0:	4b08      	ldr	r3, [pc, #32]	; (8005bc4 <MX_IWDG_Init+0x34>)
 8005ba2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8005ba6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8005ba8:	4b06      	ldr	r3, [pc, #24]	; (8005bc4 <MX_IWDG_Init+0x34>)
 8005baa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8005bae:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8005bb0:	4804      	ldr	r0, [pc, #16]	; (8005bc4 <MX_IWDG_Init+0x34>)
 8005bb2:	f001 fd21 	bl	80075f8 <HAL_IWDG_Init>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d001      	beq.n	8005bc0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 8005bbc:	f000 fac0 	bl	8006140 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8005bc0:	bf00      	nop
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	200028a8 	.word	0x200028a8
 8005bc8:	40003000 	.word	0x40003000

08005bcc <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 8005bd0:	4b10      	ldr	r3, [pc, #64]	; (8005c14 <MX_RTC_Init+0x48>)
 8005bd2:	4a11      	ldr	r2, [pc, #68]	; (8005c18 <MX_RTC_Init+0x4c>)
 8005bd4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8005bd6:	4b0f      	ldr	r3, [pc, #60]	; (8005c14 <MX_RTC_Init+0x48>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	; (8005c14 <MX_RTC_Init+0x48>)
 8005bde:	227f      	movs	r2, #127	; 0x7f
 8005be0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8005be2:	4b0c      	ldr	r3, [pc, #48]	; (8005c14 <MX_RTC_Init+0x48>)
 8005be4:	22ff      	movs	r2, #255	; 0xff
 8005be6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8005be8:	4b0a      	ldr	r3, [pc, #40]	; (8005c14 <MX_RTC_Init+0x48>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8005bee:	4b09      	ldr	r3, [pc, #36]	; (8005c14 <MX_RTC_Init+0x48>)
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8005bf4:	4b07      	ldr	r3, [pc, #28]	; (8005c14 <MX_RTC_Init+0x48>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8005bfa:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <MX_RTC_Init+0x48>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8005c00:	4804      	ldr	r0, [pc, #16]	; (8005c14 <MX_RTC_Init+0x48>)
 8005c02:	f003 f8b9 	bl	8008d78 <HAL_RTC_Init>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d001      	beq.n	8005c10 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8005c0c:	f000 fa98 	bl	8006140 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8005c10:	bf00      	nop
 8005c12:	bd80      	pop	{r7, pc}
 8005c14:	2000a8ec 	.word	0x2000a8ec
 8005c18:	40002800 	.word	0x40002800

08005c1c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8005c20:	4b1b      	ldr	r3, [pc, #108]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c22:	4a1c      	ldr	r2, [pc, #112]	; (8005c94 <MX_SPI1_Init+0x78>)
 8005c24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c28:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005c2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8005c2e:	4b18      	ldr	r3, [pc, #96]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8005c34:	4b16      	ldr	r3, [pc, #88]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c36:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005c3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8005c3c:	4b14      	ldr	r3, [pc, #80]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c3e:	2202      	movs	r2, #2
 8005c40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8005c42:	4b13      	ldr	r3, [pc, #76]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c44:	2201      	movs	r2, #1
 8005c46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8005c48:	4b11      	ldr	r3, [pc, #68]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005c4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8005c50:	4b0f      	ldr	r3, [pc, #60]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c52:	2218      	movs	r2, #24
 8005c54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8005c56:	4b0e      	ldr	r3, [pc, #56]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8005c5c:	4b0c      	ldr	r3, [pc, #48]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c5e:	2200      	movs	r2, #0
 8005c60:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8005c68:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8005c6e:	4b08      	ldr	r3, [pc, #32]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c76:	2200      	movs	r2, #0
 8005c78:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8005c7a:	4805      	ldr	r0, [pc, #20]	; (8005c90 <MX_SPI1_Init+0x74>)
 8005c7c:	f003 fa7f 	bl	800917e <HAL_SPI_Init>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8005c86:	f000 fa5b 	bl	8006140 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8005c8a:	bf00      	nop
 8005c8c:	bd80      	pop	{r7, pc}
 8005c8e:	bf00      	nop
 8005c90:	20012920 	.word	0x20012920
 8005c94:	40013000 	.word	0x40013000

08005c98 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b088      	sub	sp, #32
 8005c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c9e:	f107 0310 	add.w	r3, r7, #16
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	605a      	str	r2, [r3, #4]
 8005ca8:	609a      	str	r2, [r3, #8]
 8005caa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005cac:	1d3b      	adds	r3, r7, #4
 8005cae:	2200      	movs	r2, #0
 8005cb0:	601a      	str	r2, [r3, #0]
 8005cb2:	605a      	str	r2, [r3, #4]
 8005cb4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005cb6:	4b1e      	ldr	r3, [pc, #120]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1600-1;
 8005cbe:	4b1c      	ldr	r3, [pc, #112]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005cc0:	f240 623f 	movw	r2, #1599	; 0x63f
 8005cc4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc6:	4b1a      	ldr	r3, [pc, #104]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005cc8:	2200      	movs	r2, #0
 8005cca:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8005ccc:	4b18      	ldr	r3, [pc, #96]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005cce:	2209      	movs	r2, #9
 8005cd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cd2:	4b17      	ldr	r3, [pc, #92]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cd8:	4b15      	ldr	r3, [pc, #84]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005cde:	4814      	ldr	r0, [pc, #80]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005ce0:	f004 f8ed 	bl	8009ebe <HAL_TIM_Base_Init>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d001      	beq.n	8005cee <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8005cea:	f000 fa29 	bl	8006140 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cf2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005cf4:	f107 0310 	add.w	r3, r7, #16
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	480d      	ldr	r0, [pc, #52]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005cfc:	f004 fa7e 	bl	800a1fc <HAL_TIM_ConfigClockSource>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d001      	beq.n	8005d0a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8005d06:	f000 fa1b 	bl	8006140 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d0e:	2300      	movs	r3, #0
 8005d10:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d12:	1d3b      	adds	r3, r7, #4
 8005d14:	4619      	mov	r1, r3
 8005d16:	4806      	ldr	r0, [pc, #24]	; (8005d30 <MX_TIM2_Init+0x98>)
 8005d18:	f004 fc86 	bl	800a628 <HAL_TIMEx_MasterConfigSynchronization>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005d22:	f000 fa0d 	bl	8006140 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005d26:	bf00      	nop
 8005d28:	3720      	adds	r7, #32
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}
 8005d2e:	bf00      	nop
 8005d30:	200027e0 	.word	0x200027e0

08005d34 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005d38:	4b14      	ldr	r3, [pc, #80]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d3a:	4a15      	ldr	r2, [pc, #84]	; (8005d90 <MX_USART3_UART_Init+0x5c>)
 8005d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8005d3e:	4b13      	ldr	r3, [pc, #76]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005d46:	4b11      	ldr	r3, [pc, #68]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d48:	2200      	movs	r2, #0
 8005d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005d4c:	4b0f      	ldr	r3, [pc, #60]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d4e:	2200      	movs	r2, #0
 8005d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005d52:	4b0e      	ldr	r3, [pc, #56]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d54:	2200      	movs	r2, #0
 8005d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005d58:	4b0c      	ldr	r3, [pc, #48]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d5a:	220c      	movs	r2, #12
 8005d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005d5e:	4b0b      	ldr	r3, [pc, #44]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d60:	2200      	movs	r2, #0
 8005d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005d64:	4b09      	ldr	r3, [pc, #36]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d66:	2200      	movs	r2, #0
 8005d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005d6a:	4b08      	ldr	r3, [pc, #32]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005d70:	4b06      	ldr	r3, [pc, #24]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8005d76:	4805      	ldr	r0, [pc, #20]	; (8005d8c <MX_USART3_UART_Init+0x58>)
 8005d78:	f004 fcfc 	bl	800a774 <HAL_UART_Init>
 8005d7c:	4603      	mov	r3, r0
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d001      	beq.n	8005d86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8005d82:	f000 f9dd 	bl	8006140 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8005d86:	bf00      	nop
 8005d88:	bd80      	pop	{r7, pc}
 8005d8a:	bf00      	nop
 8005d8c:	20002828 	.word	0x20002828
 8005d90:	40004800 	.word	0x40004800

08005d94 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b08a      	sub	sp, #40	; 0x28
 8005d98:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d9a:	f107 0314 	add.w	r3, r7, #20
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	609a      	str	r2, [r3, #8]
 8005da6:	60da      	str	r2, [r3, #12]
 8005da8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005daa:	4b4d      	ldr	r3, [pc, #308]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005dac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dae:	4a4c      	ldr	r2, [pc, #304]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005db0:	f043 0304 	orr.w	r3, r3, #4
 8005db4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005db6:	4b4a      	ldr	r3, [pc, #296]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005db8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dba:	f003 0304 	and.w	r3, r3, #4
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005dc2:	4b47      	ldr	r3, [pc, #284]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dc6:	4a46      	ldr	r2, [pc, #280]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005dc8:	f043 0301 	orr.w	r3, r3, #1
 8005dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dce:	4b44      	ldr	r3, [pc, #272]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	f003 0301 	and.w	r3, r3, #1
 8005dd6:	60fb      	str	r3, [r7, #12]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dda:	4b41      	ldr	r3, [pc, #260]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	4a40      	ldr	r2, [pc, #256]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005de0:	f043 0308 	orr.w	r3, r3, #8
 8005de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005de6:	4b3e      	ldr	r3, [pc, #248]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dea:	f003 0308 	and.w	r3, r3, #8
 8005dee:	60bb      	str	r3, [r7, #8]
 8005df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005df2:	4b3b      	ldr	r3, [pc, #236]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005df6:	4a3a      	ldr	r2, [pc, #232]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005df8:	f043 0302 	orr.w	r3, r3, #2
 8005dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005dfe:	4b38      	ldr	r3, [pc, #224]	; (8005ee0 <MX_GPIO_Init+0x14c>)
 8005e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e02:	f003 0302 	and.w	r3, r3, #2
 8005e06:	607b      	str	r3, [r7, #4]
 8005e08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	2110      	movs	r1, #16
 8005e0e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e12:	f001 fbc1 	bl	8007598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_10, GPIO_PIN_SET);
 8005e16:	2201      	movs	r2, #1
 8005e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005e1c:	4831      	ldr	r0, [pc, #196]	; (8005ee4 <MX_GPIO_Init+0x150>)
 8005e1e:	f001 fbbb 	bl	8007598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005e22:	2200      	movs	r2, #0
 8005e24:	2180      	movs	r1, #128	; 0x80
 8005e26:	4830      	ldr	r0, [pc, #192]	; (8005ee8 <MX_GPIO_Init+0x154>)
 8005e28:	f001 fbb6 	bl	8007598 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005e2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005e32:	4b2e      	ldr	r3, [pc, #184]	; (8005eec <MX_GPIO_Init+0x158>)
 8005e34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e36:	2300      	movs	r3, #0
 8005e38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005e3a:	f107 0314 	add.w	r3, r7, #20
 8005e3e:	4619      	mov	r1, r3
 8005e40:	482b      	ldr	r0, [pc, #172]	; (8005ef0 <MX_GPIO_Init+0x15c>)
 8005e42:	f001 f9ff 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005e46:	2304      	movs	r3, #4
 8005e48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005e4a:	4b28      	ldr	r3, [pc, #160]	; (8005eec <MX_GPIO_Init+0x158>)
 8005e4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e52:	f107 0314 	add.w	r3, r7, #20
 8005e56:	4619      	mov	r1, r3
 8005e58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e5c:	f001 f9f2 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005e60:	2310      	movs	r3, #16
 8005e62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e64:	2301      	movs	r3, #1
 8005e66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e68:	2300      	movs	r3, #0
 8005e6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e70:	f107 0314 	add.w	r3, r7, #20
 8005e74:	4619      	mov	r1, r3
 8005e76:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e7a:	f001 f9e3 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005e7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005e82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005e84:	2301      	movs	r3, #1
 8005e86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e90:	f107 0314 	add.w	r3, r7, #20
 8005e94:	4619      	mov	r1, r3
 8005e96:	4813      	ldr	r0, [pc, #76]	; (8005ee4 <MX_GPIO_Init+0x150>)
 8005e98:	f001 f9d4 	bl	8007244 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005e9c:	2380      	movs	r3, #128	; 0x80
 8005e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005eac:	f107 0314 	add.w	r3, r7, #20
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	480d      	ldr	r0, [pc, #52]	; (8005ee8 <MX_GPIO_Init+0x154>)
 8005eb4:	f001 f9c6 	bl	8007244 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 1, 0);
 8005eb8:	2200      	movs	r2, #0
 8005eba:	2101      	movs	r1, #1
 8005ebc:	2008      	movs	r0, #8
 8005ebe:	f000 fc84 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8005ec2:	2008      	movs	r0, #8
 8005ec4:	f000 fc9d 	bl	8006802 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2101      	movs	r1, #1
 8005ecc:	2028      	movs	r0, #40	; 0x28
 8005ece:	f000 fc7c 	bl	80067ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005ed2:	2028      	movs	r0, #40	; 0x28
 8005ed4:	f000 fc95 	bl	8006802 <HAL_NVIC_EnableIRQ>

}
 8005ed8:	bf00      	nop
 8005eda:	3728      	adds	r7, #40	; 0x28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40021000 	.word	0x40021000
 8005ee4:	48000c00 	.word	0x48000c00
 8005ee8:	48000400 	.word	0x48000400
 8005eec:	10110000 	.word	0x10110000
 8005ef0:	48000800 	.word	0x48000800

08005ef4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
//TODO-Wayne0200924
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	4603      	mov	r3, r0
 8005efc:	80fb      	strh	r3, [r7, #6]
// 	  {
// 		  if(!PWRST.WLUP_BTstatus )
// 			  PWRST.WLUP_BTstatus = 1;
// 	  }
//   }
  if(GPIO_Pin == GPIO_PIN_2)//SPI data ready
 8005efe:	88fb      	ldrh	r3, [r7, #6]
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d10a      	bne.n	8005f1a <HAL_GPIO_EXTI_Callback+0x26>
	{
	  if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_2)==GPIO_PIN_SET)
 8005f04:	2104      	movs	r1, #4
 8005f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f0a:	f001 fb2d 	bl	8007568 <HAL_GPIO_ReadPin>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d102      	bne.n	8005f1a <HAL_GPIO_EXTI_Callback+0x26>
	  {
	  	DRDY=1;
 8005f14:	4b03      	ldr	r3, [pc, #12]	; (8005f24 <HAL_GPIO_EXTI_Callback+0x30>)
 8005f16:	2201      	movs	r2, #1
 8005f18:	701a      	strb	r2, [r3, #0]
//		  }

	  }

    }
}
 8005f1a:	bf00      	nop
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	2000024f 	.word	0x2000024f

08005f28 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b086      	sub	sp, #24
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file
   */

  USARTLoRa.RevStrCount++; //all string receive count
 8005f30:	4b5d      	ldr	r3, [pc, #372]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f32:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8005f36:	3301      	adds	r3, #1
 8005f38:	b2da      	uxtb	r2, r3
 8005f3a:	4b5b      	ldr	r3, [pc, #364]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f3c:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  if(USARTLoRa.Rbuffer==0x0A)//when receive 0x0a("\n" Line feeds string),it is a effective command
 8005f40:	4b59      	ldr	r3, [pc, #356]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f42:	f893 3196 	ldrb.w	r3, [r3, #406]	; 0x196
 8005f46:	2b0a      	cmp	r3, #10
 8005f48:	d114      	bne.n	8005f74 <HAL_UART_RxCpltCallback+0x4c>
  {
	  USARTLoRa.RevStrEndCount++;//0x0a("\n" Line feeds string) count
 8005f4a:	4b57      	ldr	r3, [pc, #348]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f4c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005f50:	3301      	adds	r3, #1
 8005f52:	b2da      	uxtb	r2, r3
 8005f54:	4b54      	ldr	r3, [pc, #336]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f56:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
	  if( USARTLoRa.RevStrEndCount==1	&&	USARTLoRa.RevStrCount > 1)
 8005f5a:	4b53      	ldr	r3, [pc, #332]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f5c:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d107      	bne.n	8005f74 <HAL_UART_RxCpltCallback+0x4c>
 8005f64:	4b50      	ldr	r3, [pc, #320]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f66:	f893 3291 	ldrb.w	r3, [r3, #657]	; 0x291
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d902      	bls.n	8005f74 <HAL_UART_RxCpltCallback+0x4c>
		  USARTLoRa.ResetRevflag = 1;
 8005f6e:	4b4e      	ldr	r3, [pc, #312]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f70:	2201      	movs	r2, #1
 8005f72:	709a      	strb	r2, [r3, #2]
  }

  if(!USARTLoRa.ResetRevflag)//if LoRa not reset
 8005f74:	4b4c      	ldr	r3, [pc, #304]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f76:	789b      	ldrb	r3, [r3, #2]
 8005f78:	f083 0301 	eor.w	r3, r3, #1
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d04a      	beq.n	8006018 <HAL_UART_RxCpltCallback+0xf0>
  {
  	  USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 8005f82:	4b49      	ldr	r3, [pc, #292]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f84:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
 8005f88:	1c5a      	adds	r2, r3, #1
 8005f8a:	b2d1      	uxtb	r1, r2
 8005f8c:	4a46      	ldr	r2, [pc, #280]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f8e:	f882 1292 	strb.w	r1, [r2, #658]	; 0x292
 8005f92:	4619      	mov	r1, r3
 8005f94:	4b44      	ldr	r3, [pc, #272]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f96:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 8005f9a:	4b43      	ldr	r3, [pc, #268]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005f9c:	440b      	add	r3, r1
 8005f9e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
  	  if(USARTLoRa.RevStrEndCount == 2)
 8005fa2:	4b41      	ldr	r3, [pc, #260]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005fa4:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8005fa8:	2b02      	cmp	r3, #2
 8005faa:	d15e      	bne.n	800606a <HAL_UART_RxCpltCallback+0x142>
  	  {
  		  USARTLoRa.Revflag = 1;
 8005fac:	4b3e      	ldr	r3, [pc, #248]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	705a      	strb	r2, [r3, #1]
  		  USARTLoRa.RxCount= 0;
 8005fb2:	4b3d      	ldr	r3, [pc, #244]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
  		  USARTLoRa.RevStrEndCount = 0;
 8005fba:	4b3b      	ldr	r3, [pc, #236]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
  		  USARTLoRa.RevStrCount = 0;
 8005fc2:	4b39      	ldr	r3, [pc, #228]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
  		  char c;
  		  char RxHead_Check[] = "\n\r>> mac rx";
 8005fca:	4a38      	ldr	r2, [pc, #224]	; (80060ac <HAL_UART_RxCpltCallback+0x184>)
 8005fcc:	f107 0308 	add.w	r3, r7, #8
 8005fd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8005fd2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  		  for(c=0;c<=10;c++)
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]
 8005fda:	e00d      	b.n	8005ff8 <HAL_UART_RxCpltCallback+0xd0>
  		  {
  			USARTLoRa.RxHead[c]=USARTLoRa.RevData[c];
 8005fdc:	7dfa      	ldrb	r2, [r7, #23]
 8005fde:	7dfb      	ldrb	r3, [r7, #23]
 8005fe0:	4931      	ldr	r1, [pc, #196]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005fe2:	440a      	add	r2, r1
 8005fe4:	f892 11a0 	ldrb.w	r1, [r2, #416]	; 0x1a0
 8005fe8:	4a2f      	ldr	r2, [pc, #188]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8005fea:	4413      	add	r3, r2
 8005fec:	460a      	mov	r2, r1
 8005fee:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  		  for(c=0;c<=10;c++)
 8005ff2:	7dfb      	ldrb	r3, [r7, #23]
 8005ff4:	3301      	adds	r3, #1
 8005ff6:	75fb      	strb	r3, [r7, #23]
 8005ff8:	7dfb      	ldrb	r3, [r7, #23]
 8005ffa:	2b0a      	cmp	r3, #10
 8005ffc:	d9ee      	bls.n	8005fdc <HAL_UART_RxCpltCallback+0xb4>
  		  }
  		  if(strcmp(USARTLoRa.RxHead, RxHead_Check ) == 0)
 8005ffe:	f107 0308 	add.w	r3, r7, #8
 8006002:	4619      	mov	r1, r3
 8006004:	482a      	ldr	r0, [pc, #168]	; (80060b0 <HAL_UART_RxCpltCallback+0x188>)
 8006006:	f7fa f953 	bl	80002b0 <strcmp>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d12c      	bne.n	800606a <HAL_UART_RxCpltCallback+0x142>
  			USARTLoRa.LoRaRxflag = 1;
 8006010:	4b25      	ldr	r3, [pc, #148]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8006012:	2201      	movs	r2, #1
 8006014:	70da      	strb	r2, [r3, #3]
 8006016:	e028      	b.n	800606a <HAL_UART_RxCpltCallback+0x142>
  	  }
    }
    else
    {
    	if(USARTLoRa.RevStrEndCount > 6)
 8006018:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 800601a:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 800601e:	2b06      	cmp	r3, #6
 8006020:	d923      	bls.n	800606a <HAL_UART_RxCpltCallback+0x142>
    	{
    		USARTLoRa.RevData[USARTLoRa.RxCount++]= USARTLoRa.Rbuffer;
 8006022:	4b21      	ldr	r3, [pc, #132]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8006024:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	b2d1      	uxtb	r1, r2
 800602c:	4a1e      	ldr	r2, [pc, #120]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 800602e:	f882 1292 	strb.w	r1, [r2, #658]	; 0x292
 8006032:	4619      	mov	r1, r3
 8006034:	4b1c      	ldr	r3, [pc, #112]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8006036:	f893 2196 	ldrb.w	r2, [r3, #406]	; 0x196
 800603a:	4b1b      	ldr	r3, [pc, #108]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 800603c:	440b      	add	r3, r1
 800603e:	f883 21a0 	strb.w	r2, [r3, #416]	; 0x1a0
    		if(USARTLoRa.RevStrEndCount == 9)
 8006042:	4b19      	ldr	r3, [pc, #100]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8006044:	f893 3290 	ldrb.w	r3, [r3, #656]	; 0x290
 8006048:	2b09      	cmp	r3, #9
 800604a:	d10e      	bne.n	800606a <HAL_UART_RxCpltCallback+0x142>
    		{
    			USARTLoRa.Revflag = 1;
 800604c:	4b16      	ldr	r3, [pc, #88]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 800604e:	2201      	movs	r2, #1
 8006050:	705a      	strb	r2, [r3, #1]
    			USARTLoRa.RxCount= 0;
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8006054:	2200      	movs	r2, #0
 8006056:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
    			USARTLoRa.RevStrEndCount = 0;
 800605a:	4b13      	ldr	r3, [pc, #76]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 800605c:	2200      	movs	r2, #0
 800605e:	f883 2290 	strb.w	r2, [r3, #656]	; 0x290
    			USARTLoRa.RevStrCount = 0;
 8006062:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8006064:	2200      	movs	r2, #0
 8006066:	f883 2291 	strb.w	r2, [r3, #657]	; 0x291
    		}
    	}

    }

  if(USARTLoRa.RxCount>=70)//if don't receive "\n" Line feeds string full over to 64 byte, clear data
 800606a:	4b0f      	ldr	r3, [pc, #60]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 800606c:	f893 3292 	ldrb.w	r3, [r3, #658]	; 0x292
 8006070:	2b45      	cmp	r3, #69	; 0x45
 8006072:	d90c      	bls.n	800608e <HAL_UART_RxCpltCallback+0x166>
  {
	  USARTLoRa.RxCount=0;
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <HAL_UART_RxCpltCallback+0x180>)
 8006076:	2200      	movs	r2, #0
 8006078:	f883 2292 	strb.w	r2, [r3, #658]	; 0x292
  	  memset( USARTLoRa.RevData, 0, strlen((const char*)USARTLoRa.RevData) ); //clear Receive data
 800607c:	480d      	ldr	r0, [pc, #52]	; (80060b4 <HAL_UART_RxCpltCallback+0x18c>)
 800607e:	f7fa f921 	bl	80002c4 <strlen>
 8006082:	4603      	mov	r3, r0
 8006084:	461a      	mov	r2, r3
 8006086:	2100      	movs	r1, #0
 8006088:	480a      	ldr	r0, [pc, #40]	; (80060b4 <HAL_UART_RxCpltCallback+0x18c>)
 800608a:	f005 fc53 	bl	800b934 <memset>
  }
  while(HAL_UART_Receive_IT(&huart3,&USARTLoRa.Rbuffer,1)!=HAL_OK);
 800608e:	bf00      	nop
 8006090:	2201      	movs	r2, #1
 8006092:	4909      	ldr	r1, [pc, #36]	; (80060b8 <HAL_UART_RxCpltCallback+0x190>)
 8006094:	4809      	ldr	r0, [pc, #36]	; (80060bc <HAL_UART_RxCpltCallback+0x194>)
 8006096:	f004 fc4f 	bl	800a938 <HAL_UART_Receive_IT>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1f7      	bne.n	8006090 <HAL_UART_RxCpltCallback+0x168>
}
 80060a0:	bf00      	nop
 80060a2:	3718      	adds	r7, #24
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	20002520 	.word	0x20002520
 80060ac:	0800dfec 	.word	0x0800dfec
 80060b0:	20002780 	.word	0x20002780
 80060b4:	200026c0 	.word	0x200026c0
 80060b8:	200026b6 	.word	0x200026b6
 80060bc:	20002828 	.word	0x20002828

080060c0 <IWDGFreezeBySTDBY>:


void IWDGFreezeBySTDBY(void)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	af00      	add	r7, sp, #0

	 HAL_FLASH_Unlock();
 80060c4:	f000 fbf8 	bl	80068b8 <HAL_FLASH_Unlock>

	 __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR); //clear FLASH Option validity error flag
 80060c8:	4b0d      	ldr	r3, [pc, #52]	; (8006100 <IWDGFreezeBySTDBY+0x40>)
 80060ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80060ce:	611a      	str	r2, [r3, #16]

	 HAL_FLASH_OB_Unlock();
 80060d0:	f000 fc24 	bl	800691c <HAL_FLASH_OB_Unlock>



	 HAL_FLASHEx_OBGetConfig(&pOBInit); //Get Option bit setting
 80060d4:	480b      	ldr	r0, [pc, #44]	; (8006104 <IWDGFreezeBySTDBY+0x44>)
 80060d6:	f000 fd13 	bl	8006b00 <HAL_FLASHEx_OBGetConfig>


	 //setup IWDG Freeze in standby mode
	 pOBInit.OptionType = OPTIONBYTE_USER;
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <IWDGFreezeBySTDBY+0x44>)
 80060dc:	2204      	movs	r2, #4
 80060de:	601a      	str	r2, [r3, #0]

	 pOBInit.USERType = OB_USER_IWDG_STDBY;
 80060e0:	4b08      	ldr	r3, [pc, #32]	; (8006104 <IWDGFreezeBySTDBY+0x44>)
 80060e2:	2220      	movs	r2, #32
 80060e4:	615a      	str	r2, [r3, #20]

	 pOBInit.USERConfig = OB_IWDG_STDBY_FREEZE;
 80060e6:	4b07      	ldr	r3, [pc, #28]	; (8006104 <IWDGFreezeBySTDBY+0x44>)
 80060e8:	2200      	movs	r2, #0
 80060ea:	619a      	str	r2, [r3, #24]

	 HAL_FLASHEx_OBProgram(&pOBInit);
 80060ec:	4805      	ldr	r0, [pc, #20]	; (8006104 <IWDGFreezeBySTDBY+0x44>)
 80060ee:	f000 fc99 	bl	8006a24 <HAL_FLASHEx_OBProgram>



	 HAL_FLASH_OB_Lock();
 80060f2:	f000 fc2f 	bl	8006954 <HAL_FLASH_OB_Lock>

	 HAL_FLASH_Lock();
 80060f6:	f000 fc01 	bl	80068fc <HAL_FLASH_Lock>
}
 80060fa:	bf00      	nop
 80060fc:	bd80      	pop	{r7, pc}
 80060fe:	bf00      	nop
 8006100:	40022000 	.word	0x40022000
 8006104:	2000a8c4 	.word	0x2000a8c4

08006108 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006108:	b480      	push	{r7}
 800610a:	b083      	sub	sp, #12
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == htim2.Instance)
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b08      	ldr	r3, [pc, #32]	; (8006138 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	429a      	cmp	r2, r3
 800611a:	d106      	bne.n	800612a <HAL_TIM_PeriodElapsedCallback+0x22>
    {
    	USARTLoRa.CrashTimerCount++;
 800611c:	4b07      	ldr	r3, [pc, #28]	; (800613c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800611e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006122:	3301      	adds	r3, #1
 8006124:	4a05      	ldr	r2, [pc, #20]	; (800613c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8006126:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
    }
}
 800612a:	bf00      	nop
 800612c:	370c      	adds	r7, #12
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	200027e0 	.word	0x200027e0
 800613c:	20002520 	.word	0x20002520

08006140 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
	...

08006150 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006156:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <HAL_MspInit+0x44>)
 8006158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800615a:	4a0e      	ldr	r2, [pc, #56]	; (8006194 <HAL_MspInit+0x44>)
 800615c:	f043 0301 	orr.w	r3, r3, #1
 8006160:	6613      	str	r3, [r2, #96]	; 0x60
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <HAL_MspInit+0x44>)
 8006164:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006166:	f003 0301 	and.w	r3, r3, #1
 800616a:	607b      	str	r3, [r7, #4]
 800616c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800616e:	4b09      	ldr	r3, [pc, #36]	; (8006194 <HAL_MspInit+0x44>)
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	4a08      	ldr	r2, [pc, #32]	; (8006194 <HAL_MspInit+0x44>)
 8006174:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006178:	6593      	str	r3, [r2, #88]	; 0x58
 800617a:	4b06      	ldr	r3, [pc, #24]	; (8006194 <HAL_MspInit+0x44>)
 800617c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800617e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006186:	bf00      	nop
 8006188:	370c      	adds	r7, #12
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40021000 	.word	0x40021000

08006198 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8006198:	b480      	push	{r7}
 800619a:	b083      	sub	sp, #12
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a08      	ldr	r2, [pc, #32]	; (80061c8 <HAL_RTC_MspInit+0x30>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d107      	bne.n	80061ba <HAL_RTC_MspInit+0x22>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80061aa:	4b08      	ldr	r3, [pc, #32]	; (80061cc <HAL_RTC_MspInit+0x34>)
 80061ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061b0:	4a06      	ldr	r2, [pc, #24]	; (80061cc <HAL_RTC_MspInit+0x34>)
 80061b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80061ba:	bf00      	nop
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c4:	4770      	bx	lr
 80061c6:	bf00      	nop
 80061c8:	40002800 	.word	0x40002800
 80061cc:	40021000 	.word	0x40021000

080061d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b08a      	sub	sp, #40	; 0x28
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061d8:	f107 0314 	add.w	r3, r7, #20
 80061dc:	2200      	movs	r2, #0
 80061de:	601a      	str	r2, [r3, #0]
 80061e0:	605a      	str	r2, [r3, #4]
 80061e2:	609a      	str	r2, [r3, #8]
 80061e4:	60da      	str	r2, [r3, #12]
 80061e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a17      	ldr	r2, [pc, #92]	; (800624c <HAL_SPI_MspInit+0x7c>)
 80061ee:	4293      	cmp	r3, r2
 80061f0:	d128      	bne.n	8006244 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80061f2:	4b17      	ldr	r3, [pc, #92]	; (8006250 <HAL_SPI_MspInit+0x80>)
 80061f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061f6:	4a16      	ldr	r2, [pc, #88]	; (8006250 <HAL_SPI_MspInit+0x80>)
 80061f8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061fc:	6613      	str	r3, [r2, #96]	; 0x60
 80061fe:	4b14      	ldr	r3, [pc, #80]	; (8006250 <HAL_SPI_MspInit+0x80>)
 8006200:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006206:	613b      	str	r3, [r7, #16]
 8006208:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620a:	4b11      	ldr	r3, [pc, #68]	; (8006250 <HAL_SPI_MspInit+0x80>)
 800620c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800620e:	4a10      	ldr	r2, [pc, #64]	; (8006250 <HAL_SPI_MspInit+0x80>)
 8006210:	f043 0301 	orr.w	r3, r3, #1
 8006214:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006216:	4b0e      	ldr	r3, [pc, #56]	; (8006250 <HAL_SPI_MspInit+0x80>)
 8006218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8006222:	23e0      	movs	r3, #224	; 0xe0
 8006224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006226:	2302      	movs	r3, #2
 8006228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800622a:	2301      	movs	r3, #1
 800622c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800622e:	2303      	movs	r3, #3
 8006230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8006232:	2305      	movs	r3, #5
 8006234:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006236:	f107 0314 	add.w	r3, r7, #20
 800623a:	4619      	mov	r1, r3
 800623c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006240:	f001 f800 	bl	8007244 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8006244:	bf00      	nop
 8006246:	3728      	adds	r7, #40	; 0x28
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	40013000 	.word	0x40013000
 8006250:	40021000 	.word	0x40021000

08006254 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006264:	d113      	bne.n	800628e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006266:	4b0c      	ldr	r3, [pc, #48]	; (8006298 <HAL_TIM_Base_MspInit+0x44>)
 8006268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800626a:	4a0b      	ldr	r2, [pc, #44]	; (8006298 <HAL_TIM_Base_MspInit+0x44>)
 800626c:	f043 0301 	orr.w	r3, r3, #1
 8006270:	6593      	str	r3, [r2, #88]	; 0x58
 8006272:	4b09      	ldr	r3, [pc, #36]	; (8006298 <HAL_TIM_Base_MspInit+0x44>)
 8006274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006276:	f003 0301 	and.w	r3, r3, #1
 800627a:	60fb      	str	r3, [r7, #12]
 800627c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800627e:	2200      	movs	r2, #0
 8006280:	2100      	movs	r1, #0
 8006282:	201c      	movs	r0, #28
 8006284:	f000 faa1 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006288:	201c      	movs	r0, #28
 800628a:	f000 faba 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800628e:	bf00      	nop
 8006290:	3710      	adds	r7, #16
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}
 8006296:	bf00      	nop
 8006298:	40021000 	.word	0x40021000

0800629c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80062a4:	f107 0314 	add.w	r3, r7, #20
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]
 80062ac:	605a      	str	r2, [r3, #4]
 80062ae:	609a      	str	r2, [r3, #8]
 80062b0:	60da      	str	r2, [r3, #12]
 80062b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1b      	ldr	r2, [pc, #108]	; (8006328 <HAL_UART_MspInit+0x8c>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d130      	bne.n	8006320 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80062be:	4b1b      	ldr	r3, [pc, #108]	; (800632c <HAL_UART_MspInit+0x90>)
 80062c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062c2:	4a1a      	ldr	r2, [pc, #104]	; (800632c <HAL_UART_MspInit+0x90>)
 80062c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062c8:	6593      	str	r3, [r2, #88]	; 0x58
 80062ca:	4b18      	ldr	r3, [pc, #96]	; (800632c <HAL_UART_MspInit+0x90>)
 80062cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80062d2:	613b      	str	r3, [r7, #16]
 80062d4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80062d6:	4b15      	ldr	r3, [pc, #84]	; (800632c <HAL_UART_MspInit+0x90>)
 80062d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062da:	4a14      	ldr	r2, [pc, #80]	; (800632c <HAL_UART_MspInit+0x90>)
 80062dc:	f043 0308 	orr.w	r3, r3, #8
 80062e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80062e2:	4b12      	ldr	r3, [pc, #72]	; (800632c <HAL_UART_MspInit+0x90>)
 80062e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062e6:	f003 0308 	and.w	r3, r3, #8
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80062ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80062f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062f4:	2302      	movs	r3, #2
 80062f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80062f8:	2301      	movs	r3, #1
 80062fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062fc:	2303      	movs	r3, #3
 80062fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006300:	2307      	movs	r3, #7
 8006302:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006304:	f107 0314 	add.w	r3, r7, #20
 8006308:	4619      	mov	r1, r3
 800630a:	4809      	ldr	r0, [pc, #36]	; (8006330 <HAL_UART_MspInit+0x94>)
 800630c:	f000 ff9a 	bl	8007244 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006310:	2200      	movs	r2, #0
 8006312:	2100      	movs	r1, #0
 8006314:	2027      	movs	r0, #39	; 0x27
 8006316:	f000 fa58 	bl	80067ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800631a:	2027      	movs	r0, #39	; 0x27
 800631c:	f000 fa71 	bl	8006802 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8006320:	bf00      	nop
 8006322:	3728      	adds	r7, #40	; 0x28
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	40004800 	.word	0x40004800
 800632c:	40021000 	.word	0x40021000
 8006330:	48000c00 	.word	0x48000c00

08006334 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006338:	bf00      	nop
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006342:	b480      	push	{r7}
 8006344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006346:	e7fe      	b.n	8006346 <HardFault_Handler+0x4>

08006348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800634c:	e7fe      	b.n	800634c <MemManage_Handler+0x4>

0800634e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800634e:	b480      	push	{r7}
 8006350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006352:	e7fe      	b.n	8006352 <BusFault_Handler+0x4>

08006354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006354:	b480      	push	{r7}
 8006356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006358:	e7fe      	b.n	8006358 <UsageFault_Handler+0x4>

0800635a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800635a:	b480      	push	{r7}
 800635c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800635e:	bf00      	nop
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006368:	b480      	push	{r7}
 800636a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800636c:	bf00      	nop
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006388:	f000 f904 	bl	8006594 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800638c:	bf00      	nop
 800638e:	bd80      	pop	{r7, pc}

08006390 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8006394:	2004      	movs	r0, #4
 8006396:	f001 f917 	bl	80075c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800639a:	bf00      	nop
 800639c:	bd80      	pop	{r7, pc}
	...

080063a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80063a4:	4802      	ldr	r0, [pc, #8]	; (80063b0 <TIM2_IRQHandler+0x10>)
 80063a6:	f003 fe0a 	bl	8009fbe <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80063aa:	bf00      	nop
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	200027e0 	.word	0x200027e0

080063b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80063b8:	4802      	ldr	r0, [pc, #8]	; (80063c4 <USART3_IRQHandler+0x10>)
 80063ba:	f004 fb5f 	bl	800aa7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80063be:	bf00      	nop
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20002828 	.word	0x20002828

080063c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80063cc:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80063d0:	f001 f8fa 	bl	80075c8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80063d4:	bf00      	nop
 80063d6:	bd80      	pop	{r7, pc}

080063d8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	b084      	sub	sp, #16
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80063e0:	4b11      	ldr	r3, [pc, #68]	; (8006428 <_sbrk+0x50>)
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d102      	bne.n	80063ee <_sbrk+0x16>
		heap_end = &end;
 80063e8:	4b0f      	ldr	r3, [pc, #60]	; (8006428 <_sbrk+0x50>)
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <_sbrk+0x54>)
 80063ec:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80063ee:	4b0e      	ldr	r3, [pc, #56]	; (8006428 <_sbrk+0x50>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80063f4:	4b0c      	ldr	r3, [pc, #48]	; (8006428 <_sbrk+0x50>)
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4413      	add	r3, r2
 80063fc:	466a      	mov	r2, sp
 80063fe:	4293      	cmp	r3, r2
 8006400:	d907      	bls.n	8006412 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8006402:	f005 fa6d 	bl	800b8e0 <__errno>
 8006406:	4602      	mov	r2, r0
 8006408:	230c      	movs	r3, #12
 800640a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800640c:	f04f 33ff 	mov.w	r3, #4294967295
 8006410:	e006      	b.n	8006420 <_sbrk+0x48>
	}

	heap_end += incr;
 8006412:	4b05      	ldr	r3, [pc, #20]	; (8006428 <_sbrk+0x50>)
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4413      	add	r3, r2
 800641a:	4a03      	ldr	r2, [pc, #12]	; (8006428 <_sbrk+0x50>)
 800641c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800641e:	68fb      	ldr	r3, [r7, #12]
}
 8006420:	4618      	mov	r0, r3
 8006422:	3710      	adds	r7, #16
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	20000258 	.word	0x20000258
 800642c:	2001a998 	.word	0x2001a998

08006430 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006434:	4b17      	ldr	r3, [pc, #92]	; (8006494 <SystemInit+0x64>)
 8006436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800643a:	4a16      	ldr	r2, [pc, #88]	; (8006494 <SystemInit+0x64>)
 800643c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8006444:	4b14      	ldr	r3, [pc, #80]	; (8006498 <SystemInit+0x68>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a13      	ldr	r2, [pc, #76]	; (8006498 <SystemInit+0x68>)
 800644a:	f043 0301 	orr.w	r3, r3, #1
 800644e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8006450:	4b11      	ldr	r3, [pc, #68]	; (8006498 <SystemInit+0x68>)
 8006452:	2200      	movs	r2, #0
 8006454:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <SystemInit+0x68>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	4a0f      	ldr	r2, [pc, #60]	; (8006498 <SystemInit+0x68>)
 800645c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8006460:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8006464:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8006466:	4b0c      	ldr	r3, [pc, #48]	; (8006498 <SystemInit+0x68>)
 8006468:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800646c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800646e:	4b0a      	ldr	r3, [pc, #40]	; (8006498 <SystemInit+0x68>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a09      	ldr	r2, [pc, #36]	; (8006498 <SystemInit+0x68>)
 8006474:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006478:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800647a:	4b07      	ldr	r3, [pc, #28]	; (8006498 <SystemInit+0x68>)
 800647c:	2200      	movs	r2, #0
 800647e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006480:	4b04      	ldr	r3, [pc, #16]	; (8006494 <SystemInit+0x64>)
 8006482:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006486:	609a      	str	r2, [r3, #8]
#endif
}
 8006488:	bf00      	nop
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr
 8006492:	bf00      	nop
 8006494:	e000ed00 	.word	0xe000ed00
 8006498:	40021000 	.word	0x40021000

0800649c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800649c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80064d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80064a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80064a2:	e003      	b.n	80064ac <LoopCopyDataInit>

080064a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80064a4:	4b0c      	ldr	r3, [pc, #48]	; (80064d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80064a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80064a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80064aa:	3104      	adds	r1, #4

080064ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80064ac:	480b      	ldr	r0, [pc, #44]	; (80064dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80064ae:	4b0c      	ldr	r3, [pc, #48]	; (80064e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80064b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80064b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80064b4:	d3f6      	bcc.n	80064a4 <CopyDataInit>
	ldr	r2, =_sbss
 80064b6:	4a0b      	ldr	r2, [pc, #44]	; (80064e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80064b8:	e002      	b.n	80064c0 <LoopFillZerobss>

080064ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80064ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80064bc:	f842 3b04 	str.w	r3, [r2], #4

080064c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80064c0:	4b09      	ldr	r3, [pc, #36]	; (80064e8 <LoopForever+0x16>)
	cmp	r2, r3
 80064c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80064c4:	d3f9      	bcc.n	80064ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80064c6:	f7ff ffb3 	bl	8006430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80064ca:	f005 fa0f 	bl	800b8ec <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80064ce:	f7ff fa2b 	bl	8005928 <main>

080064d2 <LoopForever>:

LoopForever:
    b LoopForever
 80064d2:	e7fe      	b.n	80064d2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80064d4:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 80064d8:	080140ec 	.word	0x080140ec
	ldr	r0, =_sdata
 80064dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80064e0:	20000208 	.word	0x20000208
	ldr	r2, =_sbss
 80064e4:	20000220 	.word	0x20000220
	ldr	r3, = _ebss
 80064e8:	2001a998 	.word	0x2001a998

080064ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80064ec:	e7fe      	b.n	80064ec <ADC1_2_IRQHandler>

080064ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80064f8:	2003      	movs	r0, #3
 80064fa:	f000 f95b 	bl	80067b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80064fe:	2000      	movs	r0, #0
 8006500:	f000 f80e 	bl	8006520 <HAL_InitTick>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d002      	beq.n	8006510 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800650a:	2301      	movs	r3, #1
 800650c:	71fb      	strb	r3, [r7, #7]
 800650e:	e001      	b.n	8006514 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8006510:	f7ff fe1e 	bl	8006150 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8006514:	79fb      	ldrb	r3, [r7, #7]
}
 8006516:	4618      	mov	r0, r3
 8006518:	3708      	adds	r7, #8
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800652c:	4b16      	ldr	r3, [pc, #88]	; (8006588 <HAL_InitTick+0x68>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d022      	beq.n	800657a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8006534:	4b15      	ldr	r3, [pc, #84]	; (800658c <HAL_InitTick+0x6c>)
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	4b13      	ldr	r3, [pc, #76]	; (8006588 <HAL_InitTick+0x68>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8006540:	fbb1 f3f3 	udiv	r3, r1, r3
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	4618      	mov	r0, r3
 800654a:	f000 f968 	bl	800681e <HAL_SYSTICK_Config>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10f      	bne.n	8006574 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2b0f      	cmp	r3, #15
 8006558:	d809      	bhi.n	800656e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800655a:	2200      	movs	r2, #0
 800655c:	6879      	ldr	r1, [r7, #4]
 800655e:	f04f 30ff 	mov.w	r0, #4294967295
 8006562:	f000 f932 	bl	80067ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006566:	4a0a      	ldr	r2, [pc, #40]	; (8006590 <HAL_InitTick+0x70>)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6013      	str	r3, [r2, #0]
 800656c:	e007      	b.n	800657e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800656e:	2301      	movs	r3, #1
 8006570:	73fb      	strb	r3, [r7, #15]
 8006572:	e004      	b.n	800657e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006574:	2301      	movs	r3, #1
 8006576:	73fb      	strb	r3, [r7, #15]
 8006578:	e001      	b.n	800657e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	20000010 	.word	0x20000010
 800658c:	20000008 	.word	0x20000008
 8006590:	2000000c 	.word	0x2000000c

08006594 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006594:	b480      	push	{r7}
 8006596:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <HAL_IncTick+0x1c>)
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b05      	ldr	r3, [pc, #20]	; (80065b4 <HAL_IncTick+0x20>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4413      	add	r3, r2
 80065a2:	4a03      	ldr	r2, [pc, #12]	; (80065b0 <HAL_IncTick+0x1c>)
 80065a4:	6013      	str	r3, [r2, #0]
}
 80065a6:	bf00      	nop
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr
 80065b0:	2001a990 	.word	0x2001a990
 80065b4:	20000010 	.word	0x20000010

080065b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80065b8:	b480      	push	{r7}
 80065ba:	af00      	add	r7, sp, #0
  return uwTick;
 80065bc:	4b03      	ldr	r3, [pc, #12]	; (80065cc <HAL_GetTick+0x14>)
 80065be:	681b      	ldr	r3, [r3, #0]
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	46bd      	mov	sp, r7
 80065c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c8:	4770      	bx	lr
 80065ca:	bf00      	nop
 80065cc:	2001a990 	.word	0x2001a990

080065d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80065d8:	f7ff ffee 	bl	80065b8 <HAL_GetTick>
 80065dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d004      	beq.n	80065f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80065ea:	4b09      	ldr	r3, [pc, #36]	; (8006610 <HAL_Delay+0x40>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	68fa      	ldr	r2, [r7, #12]
 80065f0:	4413      	add	r3, r2
 80065f2:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80065f4:	bf00      	nop
 80065f6:	f7ff ffdf 	bl	80065b8 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	68fa      	ldr	r2, [r7, #12]
 8006602:	429a      	cmp	r2, r3
 8006604:	d8f7      	bhi.n	80065f6 <HAL_Delay+0x26>
  {
  }
}
 8006606:	bf00      	nop
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20000010 	.word	0x20000010

08006614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006614:	b480      	push	{r7}
 8006616:	b085      	sub	sp, #20
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f003 0307 	and.w	r3, r3, #7
 8006622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006624:	4b0c      	ldr	r3, [pc, #48]	; (8006658 <__NVIC_SetPriorityGrouping+0x44>)
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800662a:	68ba      	ldr	r2, [r7, #8]
 800662c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006630:	4013      	ands	r3, r2
 8006632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800663c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006646:	4a04      	ldr	r2, [pc, #16]	; (8006658 <__NVIC_SetPriorityGrouping+0x44>)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	60d3      	str	r3, [r2, #12]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr
 8006658:	e000ed00 	.word	0xe000ed00

0800665c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800665c:	b480      	push	{r7}
 800665e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006660:	4b04      	ldr	r3, [pc, #16]	; (8006674 <__NVIC_GetPriorityGrouping+0x18>)
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	0a1b      	lsrs	r3, r3, #8
 8006666:	f003 0307 	and.w	r3, r3, #7
}
 800666a:	4618      	mov	r0, r3
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr
 8006674:	e000ed00 	.word	0xe000ed00

08006678 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006686:	2b00      	cmp	r3, #0
 8006688:	db0b      	blt.n	80066a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	f003 021f 	and.w	r2, r3, #31
 8006690:	4907      	ldr	r1, [pc, #28]	; (80066b0 <__NVIC_EnableIRQ+0x38>)
 8006692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006696:	095b      	lsrs	r3, r3, #5
 8006698:	2001      	movs	r0, #1
 800669a:	fa00 f202 	lsl.w	r2, r0, r2
 800669e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
 80066ae:	bf00      	nop
 80066b0:	e000e100 	.word	0xe000e100

080066b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	4603      	mov	r3, r0
 80066bc:	6039      	str	r1, [r7, #0]
 80066be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80066c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	db0a      	blt.n	80066de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	b2da      	uxtb	r2, r3
 80066cc:	490c      	ldr	r1, [pc, #48]	; (8006700 <__NVIC_SetPriority+0x4c>)
 80066ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80066d2:	0112      	lsls	r2, r2, #4
 80066d4:	b2d2      	uxtb	r2, r2
 80066d6:	440b      	add	r3, r1
 80066d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80066dc:	e00a      	b.n	80066f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	b2da      	uxtb	r2, r3
 80066e2:	4908      	ldr	r1, [pc, #32]	; (8006704 <__NVIC_SetPriority+0x50>)
 80066e4:	79fb      	ldrb	r3, [r7, #7]
 80066e6:	f003 030f 	and.w	r3, r3, #15
 80066ea:	3b04      	subs	r3, #4
 80066ec:	0112      	lsls	r2, r2, #4
 80066ee:	b2d2      	uxtb	r2, r2
 80066f0:	440b      	add	r3, r1
 80066f2:	761a      	strb	r2, [r3, #24]
}
 80066f4:	bf00      	nop
 80066f6:	370c      	adds	r7, #12
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr
 8006700:	e000e100 	.word	0xe000e100
 8006704:	e000ed00 	.word	0xe000ed00

08006708 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006708:	b480      	push	{r7}
 800670a:	b089      	sub	sp, #36	; 0x24
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f003 0307 	and.w	r3, r3, #7
 800671a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800671c:	69fb      	ldr	r3, [r7, #28]
 800671e:	f1c3 0307 	rsb	r3, r3, #7
 8006722:	2b04      	cmp	r3, #4
 8006724:	bf28      	it	cs
 8006726:	2304      	movcs	r3, #4
 8006728:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	3304      	adds	r3, #4
 800672e:	2b06      	cmp	r3, #6
 8006730:	d902      	bls.n	8006738 <NVIC_EncodePriority+0x30>
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	3b03      	subs	r3, #3
 8006736:	e000      	b.n	800673a <NVIC_EncodePriority+0x32>
 8006738:	2300      	movs	r3, #0
 800673a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800673c:	f04f 32ff 	mov.w	r2, #4294967295
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	fa02 f303 	lsl.w	r3, r2, r3
 8006746:	43da      	mvns	r2, r3
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	401a      	ands	r2, r3
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006750:	f04f 31ff 	mov.w	r1, #4294967295
 8006754:	697b      	ldr	r3, [r7, #20]
 8006756:	fa01 f303 	lsl.w	r3, r1, r3
 800675a:	43d9      	mvns	r1, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006760:	4313      	orrs	r3, r2
         );
}
 8006762:	4618      	mov	r0, r3
 8006764:	3724      	adds	r7, #36	; 0x24
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
	...

08006770 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	3b01      	subs	r3, #1
 800677c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006780:	d301      	bcc.n	8006786 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006782:	2301      	movs	r3, #1
 8006784:	e00f      	b.n	80067a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006786:	4a0a      	ldr	r2, [pc, #40]	; (80067b0 <SysTick_Config+0x40>)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	3b01      	subs	r3, #1
 800678c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800678e:	210f      	movs	r1, #15
 8006790:	f04f 30ff 	mov.w	r0, #4294967295
 8006794:	f7ff ff8e 	bl	80066b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006798:	4b05      	ldr	r3, [pc, #20]	; (80067b0 <SysTick_Config+0x40>)
 800679a:	2200      	movs	r2, #0
 800679c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <SysTick_Config+0x40>)
 80067a0:	2207      	movs	r2, #7
 80067a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3708      	adds	r7, #8
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	e000e010 	.word	0xe000e010

080067b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b082      	sub	sp, #8
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f7ff ff29 	bl	8006614 <__NVIC_SetPriorityGrouping>
}
 80067c2:	bf00      	nop
 80067c4:	3708      	adds	r7, #8
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b086      	sub	sp, #24
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	4603      	mov	r3, r0
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
 80067d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80067d8:	2300      	movs	r3, #0
 80067da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80067dc:	f7ff ff3e 	bl	800665c <__NVIC_GetPriorityGrouping>
 80067e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	68b9      	ldr	r1, [r7, #8]
 80067e6:	6978      	ldr	r0, [r7, #20]
 80067e8:	f7ff ff8e 	bl	8006708 <NVIC_EncodePriority>
 80067ec:	4602      	mov	r2, r0
 80067ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80067f2:	4611      	mov	r1, r2
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7ff ff5d 	bl	80066b4 <__NVIC_SetPriority>
}
 80067fa:	bf00      	nop
 80067fc:	3718      	adds	r7, #24
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}

08006802 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	4603      	mov	r3, r0
 800680a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800680c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006810:	4618      	mov	r0, r3
 8006812:	f7ff ff31 	bl	8006678 <__NVIC_EnableIRQ>
}
 8006816:	bf00      	nop
 8006818:	3708      	adds	r7, #8
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b082      	sub	sp, #8
 8006822:	af00      	add	r7, sp, #0
 8006824:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ffa2 	bl	8006770 <SysTick_Config>
 800682c:	4603      	mov	r3, r0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b084      	sub	sp, #16
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800683e:	2300      	movs	r3, #0
 8006840:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8006848:	b2db      	uxtb	r3, r3
 800684a:	2b02      	cmp	r3, #2
 800684c:	d005      	beq.n	800685a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2204      	movs	r2, #4
 8006852:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
 8006858:	e029      	b.n	80068ae <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 020e 	bic.w	r2, r2, #14
 8006868:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	681a      	ldr	r2, [r3, #0]
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0201 	bic.w	r2, r2, #1
 8006878:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800687e:	f003 021c 	and.w	r2, r3, #28
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006886:	2101      	movs	r1, #1
 8006888:	fa01 f202 	lsl.w	r2, r1, r2
 800688c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2201      	movs	r2, #1
 8006892:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	2200      	movs	r2, #0
 800689a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d003      	beq.n	80068ae <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	4798      	blx	r3
    }
  }
  return status;
 80068ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3710      	adds	r7, #16
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068c2:	4b0b      	ldr	r3, [pc, #44]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068c4:	695b      	ldr	r3, [r3, #20]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	da0b      	bge.n	80068e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80068ca:	4b09      	ldr	r3, [pc, #36]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068cc:	4a09      	ldr	r2, [pc, #36]	; (80068f4 <HAL_FLASH_Unlock+0x3c>)
 80068ce:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068d2:	4a09      	ldr	r2, [pc, #36]	; (80068f8 <HAL_FLASH_Unlock+0x40>)
 80068d4:	609a      	str	r2, [r3, #8]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80068d6:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <HAL_FLASH_Unlock+0x38>)
 80068d8:	695b      	ldr	r3, [r3, #20]
 80068da:	2b00      	cmp	r3, #0
 80068dc:	da01      	bge.n	80068e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80068de:	2301      	movs	r3, #1
 80068e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80068e2:	79fb      	ldrb	r3, [r7, #7]
}
 80068e4:	4618      	mov	r0, r3
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	40022000 	.word	0x40022000
 80068f4:	45670123 	.word	0x45670123
 80068f8:	cdef89ab 	.word	0xcdef89ab

080068fc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006900:	4b05      	ldr	r3, [pc, #20]	; (8006918 <HAL_FLASH_Lock+0x1c>)
 8006902:	695b      	ldr	r3, [r3, #20]
 8006904:	4a04      	ldr	r2, [pc, #16]	; (8006918 <HAL_FLASH_Lock+0x1c>)
 8006906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800690a:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr
 8006918:	40022000 	.word	0x40022000

0800691c <HAL_FLASH_OB_Unlock>:
/**
  * @brief  Unlock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Unlock(void)
{
 800691c:	b480      	push	{r7}
 800691e:	af00      	add	r7, sp, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_OPTLOCK) != 0U)
 8006920:	4b09      	ldr	r3, [pc, #36]	; (8006948 <HAL_FLASH_OB_Unlock+0x2c>)
 8006922:	695b      	ldr	r3, [r3, #20]
 8006924:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006928:	2b00      	cmp	r3, #0
 800692a:	d007      	beq.n	800693c <HAL_FLASH_OB_Unlock+0x20>
  {
    /* Authorizes the Option Byte register programming */
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY1);
 800692c:	4b06      	ldr	r3, [pc, #24]	; (8006948 <HAL_FLASH_OB_Unlock+0x2c>)
 800692e:	4a07      	ldr	r2, [pc, #28]	; (800694c <HAL_FLASH_OB_Unlock+0x30>)
 8006930:	60da      	str	r2, [r3, #12]
    WRITE_REG(FLASH->OPTKEYR, FLASH_OPTKEY2);
 8006932:	4b05      	ldr	r3, [pc, #20]	; (8006948 <HAL_FLASH_OB_Unlock+0x2c>)
 8006934:	4a06      	ldr	r2, [pc, #24]	; (8006950 <HAL_FLASH_OB_Unlock+0x34>)
 8006936:	60da      	str	r2, [r3, #12]
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8006938:	2300      	movs	r3, #0
 800693a:	e000      	b.n	800693e <HAL_FLASH_OB_Unlock+0x22>
    return HAL_ERROR;
 800693c:	2301      	movs	r3, #1
}
 800693e:	4618      	mov	r0, r3
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr
 8006948:	40022000 	.word	0x40022000
 800694c:	08192a3b 	.word	0x08192a3b
 8006950:	4c5d6e7f 	.word	0x4c5d6e7f

08006954 <HAL_FLASH_OB_Lock>:
/**
  * @brief  Lock the FLASH Option Bytes Registers access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_OB_Lock(void)
{
 8006954:	b480      	push	{r7}
 8006956:	af00      	add	r7, sp, #0
  /* Set the OPTLOCK Bit to lock the FLASH Option Byte Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_OPTLOCK);
 8006958:	4b05      	ldr	r3, [pc, #20]	; (8006970 <HAL_FLASH_OB_Lock+0x1c>)
 800695a:	695b      	ldr	r3, [r3, #20]
 800695c:	4a04      	ldr	r2, [pc, #16]	; (8006970 <HAL_FLASH_OB_Lock+0x1c>)
 800695e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006962:	6153      	str	r3, [r2, #20]

  return HAL_OK;
 8006964:	2300      	movs	r3, #0
}
 8006966:	4618      	mov	r0, r3
 8006968:	46bd      	mov	sp, r7
 800696a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800696e:	4770      	bx	lr
 8006970:	40022000 	.word	0x40022000

08006974 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800697c:	f7ff fe1c 	bl	80065b8 <HAL_GetTick>
 8006980:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8006982:	e00d      	b.n	80069a0 <FLASH_WaitForLastOperation+0x2c>
  {
    if(Timeout != HAL_MAX_DELAY)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d009      	beq.n	80069a0 <FLASH_WaitForLastOperation+0x2c>
    {
      if((HAL_GetTick() - tickstart) >= Timeout)
 800698c:	f7ff fe14 	bl	80065b8 <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	d801      	bhi.n	80069a0 <FLASH_WaitForLastOperation+0x2c>
      {
        return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e038      	b.n	8006a12 <FLASH_WaitForLastOperation+0x9e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80069a0:	4b1e      	ldr	r3, [pc, #120]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 80069a2:	691b      	ldr	r3, [r3, #16]
 80069a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80069a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069ac:	d0ea      	beq.n	8006984 <FLASH_WaitForLastOperation+0x10>
      }
    }
  }

  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 80069ae:	4b1b      	ldr	r3, [pc, #108]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 80069b0:	691a      	ldr	r2, [r3, #16]
 80069b2:	f24c 33fa 	movw	r3, #50170	; 0xc3fa
 80069b6:	4013      	ands	r3, r2
 80069b8:	60bb      	str	r3, [r7, #8]

  if(error != 0u)
 80069ba:	68bb      	ldr	r3, [r7, #8]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d01e      	beq.n	80069fe <FLASH_WaitForLastOperation+0x8a>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80069c0:	4b17      	ldr	r3, [pc, #92]	; (8006a20 <FLASH_WaitForLastOperation+0xac>)
 80069c2:	685a      	ldr	r2, [r3, #4]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	4a15      	ldr	r2, [pc, #84]	; (8006a20 <FLASH_WaitForLastOperation+0xac>)
 80069ca:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d007      	beq.n	80069e6 <FLASH_WaitForLastOperation+0x72>
 80069d6:	4b11      	ldr	r3, [pc, #68]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 80069d8:	699a      	ldr	r2, [r3, #24]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 80069e0:	490e      	ldr	r1, [pc, #56]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 80069e2:	4313      	orrs	r3, r2
 80069e4:	618b      	str	r3, [r1, #24]
 80069e6:	68bb      	ldr	r3, [r7, #8]
 80069e8:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d004      	beq.n	80069fa <FLASH_WaitForLastOperation+0x86>
 80069f0:	4a0a      	ldr	r2, [pc, #40]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 80069f2:	68bb      	ldr	r3, [r7, #8]
 80069f4:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80069f8:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80069fa:	2301      	movs	r3, #1
 80069fc:	e009      	b.n	8006a12 <FLASH_WaitForLastOperation+0x9e>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80069fe:	4b07      	ldr	r3, [pc, #28]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d102      	bne.n	8006a10 <FLASH_WaitForLastOperation+0x9c>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a0a:	4b04      	ldr	r3, [pc, #16]	; (8006a1c <FLASH_WaitForLastOperation+0xa8>)
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3710      	adds	r7, #16
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	40022000 	.word	0x40022000
 8006a20:	20000014 	.word	0x20000014

08006a24 <HAL_FLASHEx_OBProgram>:
  *         contains the configuration information for the programming.
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_OBProgram(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a2c:	2300      	movs	r3, #0
 8006a2e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006a30:	4b32      	ldr	r3, [pc, #200]	; (8006afc <HAL_FLASHEx_OBProgram+0xd8>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d101      	bne.n	8006a3c <HAL_FLASHEx_OBProgram+0x18>
 8006a38:	2302      	movs	r3, #2
 8006a3a:	e05a      	b.n	8006af2 <HAL_FLASHEx_OBProgram+0xce>
 8006a3c:	4b2f      	ldr	r3, [pc, #188]	; (8006afc <HAL_FLASHEx_OBProgram+0xd8>)
 8006a3e:	2201      	movs	r2, #1
 8006a40:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_OPTIONBYTE(pOBInit->OptionType));

  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006a42:	4b2e      	ldr	r3, [pc, #184]	; (8006afc <HAL_FLASHEx_OBProgram+0xd8>)
 8006a44:	2200      	movs	r2, #0
 8006a46:	605a      	str	r2, [r3, #4]

  /* Write protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_WRP) != 0U)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00d      	beq.n	8006a70 <HAL_FLASHEx_OBProgram+0x4c>
  {
    /* Configure of Write protection on the selected area */
    if(FLASH_OB_WRPConfig(pOBInit->WRPArea, pOBInit->WRPStartOffset, pOBInit->WRPEndOffset) != HAL_OK)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6858      	ldr	r0, [r3, #4]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6899      	ldr	r1, [r3, #8]
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	461a      	mov	r2, r3
 8006a62:	f000 f89b 	bl	8006b9c <FLASH_OB_WRPConfig>
 8006a66:	4603      	mov	r3, r0
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d001      	beq.n	8006a70 <HAL_FLASHEx_OBProgram+0x4c>
    {
      status = HAL_ERROR;
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	73fb      	strb	r3, [r7, #15]
    }

  }

  /* Read protection configuration */
  if((pOBInit->OptionType & OPTIONBYTE_RDP) != 0U)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0302 	and.w	r3, r3, #2
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d009      	beq.n	8006a90 <HAL_FLASHEx_OBProgram+0x6c>
  {
    /* Configure the Read protection level */
    if(FLASH_OB_RDPConfig(pOBInit->RDPLevel) != HAL_OK)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	691b      	ldr	r3, [r3, #16]
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 f8ef 	bl	8006c64 <FLASH_OB_RDPConfig>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d001      	beq.n	8006a90 <HAL_FLASHEx_OBProgram+0x6c>
    {
      status = HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* User Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_USER) != 0U)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d00c      	beq.n	8006ab6 <HAL_FLASHEx_OBProgram+0x92>
  {
    /* Configure the user option bytes */
    if(FLASH_OB_UserConfig(pOBInit->USERType, pOBInit->USERConfig) != HAL_OK)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	695a      	ldr	r2, [r3, #20]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f000 f90a 	bl	8006cc0 <FLASH_OB_UserConfig>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <HAL_FLASHEx_OBProgram+0x92>
    {
      status = HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* PCROP Configuration */
  if((pOBInit->OptionType & OPTIONBYTE_PCROP) != 0U)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f003 0308 	and.w	r3, r3, #8
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d013      	beq.n	8006aea <HAL_FLASHEx_OBProgram+0xc6>
  {
    if (pOBInit->PCROPStartAddr != pOBInit->PCROPEndAddr)
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a1a      	ldr	r2, [r3, #32]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d00d      	beq.n	8006aea <HAL_FLASHEx_OBProgram+0xc6>
    {
      /* Configure the Proprietary code readout protection */
      if(FLASH_OB_PCROPConfig(pOBInit->PCROPConfig, pOBInit->PCROPStartAddr, pOBInit->PCROPEndAddr) != HAL_OK)
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69d8      	ldr	r0, [r3, #28]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a19      	ldr	r1, [r3, #32]
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ada:	461a      	mov	r2, r3
 8006adc:	f000 fa06 	bl	8006eec <FLASH_OB_PCROPConfig>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d001      	beq.n	8006aea <HAL_FLASHEx_OBProgram+0xc6>
      {
        status = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006aea:	4b04      	ldr	r3, [pc, #16]	; (8006afc <HAL_FLASHEx_OBProgram+0xd8>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	701a      	strb	r2, [r3, #0]

  return status;
 8006af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3710      	adds	r7, #16
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20000014 	.word	0x20000014

08006b00 <HAL_FLASHEx_OBGetConfig>:
  *         which area is requested for the WRP and PCROP, else no information will be returned
  *
  * @retval None
  */
void HAL_FLASHEx_OBGetConfig(FLASH_OBProgramInitTypeDef *pOBInit)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
  pOBInit->OptionType = (OPTIONBYTE_RDP | OPTIONBYTE_USER);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2206      	movs	r2, #6
 8006b0c:	601a      	str	r2, [r3, #0]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00b      	beq.n	8006b2e <HAL_FLASHEx_OBGetConfig+0x2e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	685b      	ldr	r3, [r3, #4]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d007      	beq.n	8006b2e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685b      	ldr	r3, [r3, #4]
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB) ||
 8006b22:	2b02      	cmp	r3, #2
 8006b24:	d003      	beq.n	8006b2e <HAL_FLASHEx_OBGetConfig+0x2e>
     (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK2_AREAB))
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	2b04      	cmp	r3, #4
 8006b2c:	d10f      	bne.n	8006b4e <HAL_FLASHEx_OBGetConfig+0x4e>
#else
  if((pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAA) || (pOBInit->WRPArea == OB_WRPAREA_BANK1_AREAB))
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_WRP;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f043 0201 	orr.w	r2, r3, #1
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	601a      	str	r2, [r3, #0]
    /* Get write protection on the selected area */
    FLASH_OB_GetWRP(pOBInit->WRPArea, &(pOBInit->WRPStartOffset), &(pOBInit->WRPEndOffset));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6858      	ldr	r0, [r3, #4]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f103 0108 	add.w	r1, r3, #8
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	330c      	adds	r3, #12
 8006b48:	461a      	mov	r2, r3
 8006b4a:	f000 fa7b 	bl	8007044 <FLASH_OB_GetWRP>
  }

  /* Get Read protection level */
  pOBInit->RDPLevel = FLASH_OB_GetRDP();
 8006b4e:	f000 fac3 	bl	80070d8 <FLASH_OB_GetRDP>
 8006b52:	4602      	mov	r2, r0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	611a      	str	r2, [r3, #16]

  /* Get the user option bytes */
  pOBInit->USERConfig = FLASH_OB_GetUser();
 8006b58:	f000 fad8 	bl	800710c <FLASH_OB_GetUser>
 8006b5c:	4602      	mov	r2, r0
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	619a      	str	r2, [r3, #24]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  if((pOBInit->PCROPConfig == FLASH_BANK_1) || (pOBInit->PCROPConfig == FLASH_BANK_2))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	69db      	ldr	r3, [r3, #28]
 8006b66:	2b01      	cmp	r3, #1
 8006b68:	d003      	beq.n	8006b72 <HAL_FLASHEx_OBGetConfig+0x72>
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	69db      	ldr	r3, [r3, #28]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d110      	bne.n	8006b94 <HAL_FLASHEx_OBGetConfig+0x94>
#else
  if(pOBInit->PCROPConfig == FLASH_BANK_1)
#endif
  {
    pOBInit->OptionType |= OPTIONBYTE_PCROP;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f043 0208 	orr.w	r2, r3, #8
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	601a      	str	r2, [r3, #0]
    /* Get the Proprietary code readout protection */
    FLASH_OB_GetPCROP(&(pOBInit->PCROPConfig), &(pOBInit->PCROPStartAddr), &(pOBInit->PCROPEndAddr));
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	f103 001c 	add.w	r0, r3, #28
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f103 0120 	add.w	r1, r3, #32
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	3324      	adds	r3, #36	; 0x24
 8006b8e:	461a      	mov	r2, r3
 8006b90:	f000 fad0 	bl	8007134 <FLASH_OB_GetPCROP>
  }
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <FLASH_OB_WRPConfig>:
  *          This parameter can be page number between WRPStartOffset and (max number of pages in the bank - 1)
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_WRPConfig(uint32_t WRPArea, uint32_t WRPStartOffset, uint32_t WRDPEndOffset)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b086      	sub	sp, #24
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_WRPAREA(WRPArea));
  assert_param(IS_FLASH_PAGE(WRPStartOffset));
  assert_param(IS_FLASH_PAGE(WRDPEndOffset));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ba8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006bac:	f7ff fee2 	bl	8006974 <FLASH_WaitForLastOperation>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	75fb      	strb	r3, [r7, #23]

  if(status == HAL_OK)
 8006bb4:	7dfb      	ldrb	r3, [r7, #23]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d14c      	bne.n	8006c54 <FLASH_OB_WRPConfig+0xb8>
  {
    /* Configure the write protected area */
    if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d10b      	bne.n	8006bd8 <FLASH_OB_WRPConfig+0x3c>
    {
      MODIFY_REG(FLASH->WRP1AR, (FLASH_WRP1AR_WRP1A_STRT | FLASH_WRP1AR_WRP1A_END),
 8006bc0:	4b27      	ldr	r3, [pc, #156]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc4:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	0419      	lsls	r1, r3, #16
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	430b      	orrs	r3, r1
 8006bd0:	4923      	ldr	r1, [pc, #140]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006bd2:	4313      	orrs	r3, r2
 8006bd4:	62cb      	str	r3, [r1, #44]	; 0x2c
 8006bd6:	e02b      	b.n	8006c30 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d10b      	bne.n	8006bf6 <FLASH_OB_WRPConfig+0x5a>
    {
      MODIFY_REG(FLASH->WRP1BR, (FLASH_WRP1BR_WRP1B_STRT | FLASH_WRP1BR_WRP1B_END),
 8006bde:	4b20      	ldr	r3, [pc, #128]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006be2:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	0419      	lsls	r1, r3, #16
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	430b      	orrs	r3, r1
 8006bee:	491c      	ldr	r1, [pc, #112]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	630b      	str	r3, [r1, #48]	; 0x30
 8006bf4:	e01c      	b.n	8006c30 <FLASH_OB_WRPConfig+0x94>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d10b      	bne.n	8006c14 <FLASH_OB_WRPConfig+0x78>
    {
      MODIFY_REG(FLASH->WRP2AR, (FLASH_WRP2AR_WRP2A_STRT | FLASH_WRP2AR_WRP2A_END),
 8006bfc:	4b18      	ldr	r3, [pc, #96]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c00:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	0419      	lsls	r1, r3, #16
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	430b      	orrs	r3, r1
 8006c0c:	4914      	ldr	r1, [pc, #80]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c12:	e00d      	b.n	8006c30 <FLASH_OB_WRPConfig+0x94>
                 (WRPStartOffset | (WRDPEndOffset << 16)));
    }
    else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b04      	cmp	r3, #4
 8006c18:	d10a      	bne.n	8006c30 <FLASH_OB_WRPConfig+0x94>
    {
      MODIFY_REG(FLASH->WRP2BR, (FLASH_WRP2BR_WRP2B_STRT | FLASH_WRP2BR_WRP2B_END),
 8006c1a:	4b11      	ldr	r3, [pc, #68]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1e:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	0419      	lsls	r1, r3, #16
 8006c26:	68bb      	ldr	r3, [r7, #8]
 8006c28:	430b      	orrs	r3, r1
 8006c2a:	490d      	ldr	r1, [pc, #52]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	650b      	str	r3, [r1, #80]	; 0x50
    {
      /* Nothing to do */
    }

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006c30:	4b0b      	ldr	r3, [pc, #44]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006c32:	695b      	ldr	r3, [r3, #20]
 8006c34:	4a0a      	ldr	r2, [pc, #40]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006c36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3a:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c3c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c40:	f7ff fe98 	bl	8006974 <FLASH_WaitForLastOperation>
 8006c44:	4603      	mov	r3, r0
 8006c46:	75fb      	strb	r3, [r7, #23]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006c48:	4b05      	ldr	r3, [pc, #20]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006c4a:	695b      	ldr	r3, [r3, #20]
 8006c4c:	4a04      	ldr	r2, [pc, #16]	; (8006c60 <FLASH_OB_WRPConfig+0xc4>)
 8006c4e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006c52:	6153      	str	r3, [r2, #20]
  }

  return status;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c56:	4618      	mov	r0, r3
 8006c58:	3718      	adds	r7, #24
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}
 8006c5e:	bf00      	nop
 8006c60:	40022000 	.word	0x40022000

08006c64 <FLASH_OB_RDPConfig>:
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_RDPConfig(uint32_t RDPLevel)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b084      	sub	sp, #16
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_OB_RDP_LEVEL(RDPLevel));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c70:	f7ff fe80 	bl	8006974 <FLASH_WaitForLastOperation>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d119      	bne.n	8006cb2 <FLASH_OB_RDPConfig+0x4e>
  {
    /* Configure the RDP level in the option bytes register */
    MODIFY_REG(FLASH->OPTR, FLASH_OPTR_RDP, RDPLevel);
 8006c7e:	4b0f      	ldr	r3, [pc, #60]	; (8006cbc <FLASH_OB_RDPConfig+0x58>)
 8006c80:	6a1b      	ldr	r3, [r3, #32]
 8006c82:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006c86:	490d      	ldr	r1, [pc, #52]	; (8006cbc <FLASH_OB_RDPConfig+0x58>)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006c8e:	4b0b      	ldr	r3, [pc, #44]	; (8006cbc <FLASH_OB_RDPConfig+0x58>)
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <FLASH_OB_RDPConfig+0x58>)
 8006c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c98:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006c9a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c9e:	f7ff fe69 	bl	8006974 <FLASH_WaitForLastOperation>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006ca6:	4b05      	ldr	r3, [pc, #20]	; (8006cbc <FLASH_OB_RDPConfig+0x58>)
 8006ca8:	695b      	ldr	r3, [r3, #20]
 8006caa:	4a04      	ldr	r2, [pc, #16]	; (8006cbc <FLASH_OB_RDPConfig+0x58>)
 8006cac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006cb0:	6153      	str	r3, [r2, #20]
  }

  return status;
 8006cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	40022000 	.word	0x40022000

08006cc0 <FLASH_OB_UserConfig>:
  *         DUALBANK(Bit21), nBOOT1(Bit23), SRAM2_PE(Bit24) and SRAM2_RST(Bit25).
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef FLASH_OB_UserConfig(uint32_t UserType, uint32_t UserConfig)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t optr_reg_val = 0;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	617b      	str	r3, [r7, #20]
  uint32_t optr_reg_mask = 0;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_OB_USER_TYPE(UserType));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006cd2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006cd6:	f7ff fe4d 	bl	8006974 <FLASH_WaitForLastOperation>
 8006cda:	4603      	mov	r3, r0
 8006cdc:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8006cde:	7bfb      	ldrb	r3, [r7, #15]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f040 80fc 	bne.w	8006ede <FLASH_OB_UserConfig+0x21e>
  {
    if((UserType & OB_USER_BOR_LEV) != 0U)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d009      	beq.n	8006d04 <FLASH_OB_UserConfig+0x44>
    {
      /* BOR level option byte should be modified */
      assert_param(IS_OB_USER_BOR_LEVEL(UserConfig & FLASH_OPTR_BOR_LEV));

      /* Set value and mask for BOR level option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BOR_LEV);
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	4313      	orrs	r3, r2
 8006cfa:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BOR_LEV;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8006d02:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STOP) != 0U)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f003 0302 	and.w	r3, r3, #2
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d009      	beq.n	8006d22 <FLASH_OB_UserConfig+0x62>
    {
      /* nRST_STOP option byte should be modified */
      assert_param(IS_OB_USER_STOP(UserConfig & FLASH_OPTR_nRST_STOP));

      /* Set value and mask for nRST_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STOP);
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d14:	697a      	ldr	r2, [r7, #20]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STOP;
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d20:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_STDBY) != 0U)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	f003 0304 	and.w	r3, r3, #4
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d009      	beq.n	8006d40 <FLASH_OB_UserConfig+0x80>
    {
      /* nRST_STDBY option byte should be modified */
      assert_param(IS_OB_USER_STANDBY(UserConfig & FLASH_OPTR_nRST_STDBY));

      /* Set value and mask for nRST_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_STDBY);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_STDBY;
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006d3e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nRST_SHDW) != 0U)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <FLASH_OB_UserConfig+0x9e>
    {
      /* nRST_SHDW option byte should be modified */
      assert_param(IS_OB_USER_SHUTDOWN(UserConfig & FLASH_OPTR_nRST_SHDW));

      /* Set value and mask for nRST_SHDW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nRST_SHDW);
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nRST_SHDW;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d5c:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_SW) != 0U)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f003 0308 	and.w	r3, r3, #8
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d009      	beq.n	8006d7c <FLASH_OB_UserConfig+0xbc>
    {
      /* IWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_IWDG(UserConfig & FLASH_OPTR_IWDG_SW));

      /* Set value and mask for IWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_SW);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_SW;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d7a:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STOP) != 0U)
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f003 0310 	and.w	r3, r3, #16
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d009      	beq.n	8006d9a <FLASH_OB_UserConfig+0xda>
    {
      /* IWDG_STOP option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STOP(UserConfig & FLASH_OPTR_IWDG_STOP));

      /* Set value and mask for IWDG_STOP option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STOP);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d8c:	697a      	ldr	r2, [r7, #20]
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STOP;
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006d98:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_IWDG_STDBY) != 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d009      	beq.n	8006db8 <FLASH_OB_UserConfig+0xf8>
    {
      /* IWDG_STDBY option byte should be modified */
      assert_param(IS_OB_USER_IWDG_STDBY(UserConfig & FLASH_OPTR_IWDG_STDBY));

      /* Set value and mask for IWDG_STDBY option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_IWDG_STDBY);
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	4313      	orrs	r3, r2
 8006dae:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_IWDG_STDBY;
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006db6:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_WWDG_SW) != 0U)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <FLASH_OB_UserConfig+0x116>
    {
      /* WWDG_SW option byte should be modified */
      assert_param(IS_OB_USER_WWDG(UserConfig & FLASH_OPTR_WWDG_SW));

      /* Set value and mask for WWDG_SW option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_WWDG_SW);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_WWDG_SW;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006dd4:	613b      	str	r3, [r7, #16]

#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_BFB2) != 0U)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d009      	beq.n	8006df4 <FLASH_OB_UserConfig+0x134>
    {
      /* BFB2 option byte should be modified */
      assert_param(IS_OB_USER_BFB2(UserConfig & FLASH_OPTR_BFB2));

      /* Set value and mask for BFB2 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_BFB2);
 8006de0:	683b      	ldr	r3, [r7, #0]
 8006de2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006de6:	697a      	ldr	r2, [r7, #20]
 8006de8:	4313      	orrs	r3, r2
 8006dea:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_BFB2;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006df2:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_DUALBANK) != 0U)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <FLASH_OB_UserConfig+0x152>
#else
      /* DUALBANK option byte should be modified */
      assert_param(IS_OB_USER_DUALBANK(UserConfig & FLASH_OPTR_DUALBANK));

      /* Set value and mask for DUALBANK option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_DUALBANK);
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e04:	697a      	ldr	r2, [r7, #20]
 8006e06:	4313      	orrs	r3, r2
 8006e08:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_DUALBANK;
 8006e0a:	693b      	ldr	r3, [r7, #16]
 8006e0c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006e10:	613b      	str	r3, [r7, #16]
#endif
    }
#endif

    if((UserType & OB_USER_nBOOT1) != 0U)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d009      	beq.n	8006e30 <FLASH_OB_UserConfig+0x170>
    {
      /* nBOOT1 option byte should be modified */
      assert_param(IS_OB_USER_BOOT1(UserConfig & FLASH_OPTR_nBOOT1));

      /* Set value and mask for nBOOT1 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT1);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006e22:	697a      	ldr	r2, [r7, #20]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT1;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006e2e:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_PE) != 0U)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <FLASH_OB_UserConfig+0x18e>
    {
      /* SRAM2_PE option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_PARITY(UserConfig & FLASH_OPTR_SRAM2_PE));

      /* Set value and mask for SRAM2_PE option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_PE);
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006e40:	697a      	ldr	r2, [r7, #20]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_PE;
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e4c:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_SRAM2_RST) != 0U)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d009      	beq.n	8006e6c <FLASH_OB_UserConfig+0x1ac>
    {
      /* SRAM2_RST option byte should be modified */
      assert_param(IS_OB_USER_SRAM2_RST(UserConfig & FLASH_OPTR_SRAM2_RST));

      /* Set value and mask for SRAM2_RST option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_SRAM2_RST);
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e5e:	697a      	ldr	r2, [r7, #20]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_SRAM2_RST;
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006e6a:	613b      	str	r3, [r7, #16]
#if defined (STM32L412xx) || defined (STM32L422xx) || defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || \
    defined (STM32L442xx) || defined (STM32L443xx) || defined (STM32L451xx) || defined (STM32L452xx) || defined (STM32L462xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    if((UserType & OB_USER_nSWBOOT0) != 0U)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d009      	beq.n	8006e8a <FLASH_OB_UserConfig+0x1ca>
    {
      /* nSWBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_SWBOOT0(UserConfig & FLASH_OPTR_nSWBOOT0));

      /* Set value and mask for nSWBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nSWBOOT0);
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nSWBOOT0;
 8006e82:	693b      	ldr	r3, [r7, #16]
 8006e84:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006e88:	613b      	str	r3, [r7, #16]
    }

    if((UserType & OB_USER_nBOOT0) != 0U)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d009      	beq.n	8006ea8 <FLASH_OB_UserConfig+0x1e8>
    {
      /* nBOOT0 option byte should be modified */
      assert_param(IS_OB_USER_BOOT0(UserConfig & FLASH_OPTR_nBOOT0));

      /* Set value and mask for nBOOT0 option byte */
      optr_reg_val |= (UserConfig & FLASH_OPTR_nBOOT0);
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	617b      	str	r3, [r7, #20]
      optr_reg_mask |= FLASH_OPTR_nBOOT0;
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006ea6:	613b      	str	r3, [r7, #16]
    }
#endif

    /* Configure the option bytes register */
    MODIFY_REG(FLASH->OPTR, optr_reg_mask, optr_reg_val);
 8006ea8:	4b0f      	ldr	r3, [pc, #60]	; (8006ee8 <FLASH_OB_UserConfig+0x228>)
 8006eaa:	6a1a      	ldr	r2, [r3, #32]
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	43db      	mvns	r3, r3
 8006eb0:	401a      	ands	r2, r3
 8006eb2:	490d      	ldr	r1, [pc, #52]	; (8006ee8 <FLASH_OB_UserConfig+0x228>)
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	4313      	orrs	r3, r2
 8006eb8:	620b      	str	r3, [r1, #32]

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006eba:	4b0b      	ldr	r3, [pc, #44]	; (8006ee8 <FLASH_OB_UserConfig+0x228>)
 8006ebc:	695b      	ldr	r3, [r3, #20]
 8006ebe:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <FLASH_OB_UserConfig+0x228>)
 8006ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ec4:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ec6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006eca:	f7ff fd53 	bl	8006974 <FLASH_WaitForLastOperation>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	73fb      	strb	r3, [r7, #15]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8006ed2:	4b05      	ldr	r3, [pc, #20]	; (8006ee8 <FLASH_OB_UserConfig+0x228>)
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	4a04      	ldr	r2, [pc, #16]	; (8006ee8 <FLASH_OB_UserConfig+0x228>)
 8006ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006edc:	6153      	str	r3, [r2, #20]
  }

  return status;
 8006ede:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	40022000 	.word	0x40022000

08006eec <FLASH_OB_PCROPConfig>:
  *          This parameter can be an address between PCROPStartAddr and end of the bank
  *
  * @retval HAL Status
  */
static HAL_StatusTypeDef FLASH_OB_PCROPConfig(uint32_t PCROPConfig, uint32_t PCROPStartAddr, uint32_t PCROPEndAddr)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b088      	sub	sp, #32
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
  assert_param(IS_OB_PCROP_RDP(PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPStartAddr));
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(PCROPEndAddr));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ef8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006efc:	f7ff fd3a 	bl	8006974 <FLASH_WaitForLastOperation>
 8006f00:	4603      	mov	r3, r0
 8006f02:	77fb      	strb	r3, [r7, #31]

  if(status == HAL_OK)
 8006f04:	7ffb      	ldrb	r3, [r7, #31]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	f040 808c 	bne.w	8007024 <FLASH_OB_PCROPConfig+0x138>
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    /* Get the information about the bank swapping */
    if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8006f0c:	4b48      	ldr	r3, [pc, #288]	; (8007030 <FLASH_OB_PCROPConfig+0x144>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d115      	bne.n	8006f44 <FLASH_OB_PCROPConfig+0x58>
    {
      bank1_addr = FLASH_BASE;
 8006f18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f1c:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8006f1e:	4b45      	ldr	r3, [pc, #276]	; (8007034 <FLASH_OB_PCROPConfig+0x148>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	b29b      	uxth	r3, r3
 8006f24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d008      	beq.n	8006f3e <FLASH_OB_PCROPConfig+0x52>
 8006f2c:	4b41      	ldr	r3, [pc, #260]	; (8007034 <FLASH_OB_PCROPConfig+0x148>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	029b      	lsls	r3, r3, #10
 8006f32:	085a      	lsrs	r2, r3, #1
 8006f34:	4b40      	ldr	r3, [pc, #256]	; (8007038 <FLASH_OB_PCROPConfig+0x14c>)
 8006f36:	4013      	ands	r3, r2
 8006f38:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006f3c:	e000      	b.n	8006f40 <FLASH_OB_PCROPConfig+0x54>
 8006f3e:	4b3f      	ldr	r3, [pc, #252]	; (800703c <FLASH_OB_PCROPConfig+0x150>)
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e014      	b.n	8006f6e <FLASH_OB_PCROPConfig+0x82>
    }
    else
    {
      bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8006f44:	4b3b      	ldr	r3, [pc, #236]	; (8007034 <FLASH_OB_PCROPConfig+0x148>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	b29b      	uxth	r3, r3
 8006f4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d008      	beq.n	8006f64 <FLASH_OB_PCROPConfig+0x78>
 8006f52:	4b38      	ldr	r3, [pc, #224]	; (8007034 <FLASH_OB_PCROPConfig+0x148>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	029b      	lsls	r3, r3, #10
 8006f58:	085a      	lsrs	r2, r3, #1
 8006f5a:	4b37      	ldr	r3, [pc, #220]	; (8007038 <FLASH_OB_PCROPConfig+0x14c>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8006f62:	e000      	b.n	8006f66 <FLASH_OB_PCROPConfig+0x7a>
 8006f64:	4b35      	ldr	r3, [pc, #212]	; (800703c <FLASH_OB_PCROPConfig+0x150>)
 8006f66:	61bb      	str	r3, [r7, #24]
      bank2_addr = FLASH_BASE;
 8006f68:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006f6c:	617b      	str	r3, [r7, #20]
    }
    else
#endif
    {
      /* Configure the Proprietary code readout protection */
      if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_1)
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	f003 0303 	and.w	r3, r3, #3
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d11a      	bne.n	8006fae <FLASH_OB_PCROPConfig+0xc2>
      {
        reg_value = ((PCROPStartAddr - bank1_addr) >> 3);
 8006f78:	68ba      	ldr	r2, [r7, #8]
 8006f7a:	69bb      	ldr	r3, [r7, #24]
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	08db      	lsrs	r3, r3, #3
 8006f80:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1SR, FLASH_PCROP1SR_PCROP1_STRT, reg_value);
 8006f82:	4b2f      	ldr	r3, [pc, #188]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f86:	0c1b      	lsrs	r3, r3, #16
 8006f88:	041b      	lsls	r3, r3, #16
 8006f8a:	492d      	ldr	r1, [pc, #180]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006f8c:	693a      	ldr	r2, [r7, #16]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	624b      	str	r3, [r1, #36]	; 0x24

        reg_value = ((PCROPEndAddr - bank1_addr) >> 3);
 8006f92:	687a      	ldr	r2, [r7, #4]
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	1ad3      	subs	r3, r2, r3
 8006f98:	08db      	lsrs	r3, r3, #3
 8006f9a:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP1_END, reg_value);
 8006f9c:	4b28      	ldr	r3, [pc, #160]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	041b      	lsls	r3, r3, #16
 8006fa4:	4926      	ldr	r1, [pc, #152]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	4313      	orrs	r3, r2
 8006faa:	628b      	str	r3, [r1, #40]	; 0x28
 8006fac:	e01e      	b.n	8006fec <FLASH_OB_PCROPConfig+0x100>
      }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
      else if((PCROPConfig & FLASH_BANK_BOTH) == FLASH_BANK_2)
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	f003 0303 	and.w	r3, r3, #3
 8006fb4:	2b02      	cmp	r3, #2
 8006fb6:	d119      	bne.n	8006fec <FLASH_OB_PCROPConfig+0x100>
      {
        reg_value = ((PCROPStartAddr - bank2_addr) >> 3);
 8006fb8:	68ba      	ldr	r2, [r7, #8]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	1ad3      	subs	r3, r2, r3
 8006fbe:	08db      	lsrs	r3, r3, #3
 8006fc0:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2SR, FLASH_PCROP2SR_PCROP2_STRT, reg_value);
 8006fc2:	4b1f      	ldr	r3, [pc, #124]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fc6:	0c1b      	lsrs	r3, r3, #16
 8006fc8:	041b      	lsls	r3, r3, #16
 8006fca:	491d      	ldr	r1, [pc, #116]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	4313      	orrs	r3, r2
 8006fd0:	644b      	str	r3, [r1, #68]	; 0x44

        reg_value = ((PCROPEndAddr - bank2_addr) >> 3);
 8006fd2:	687a      	ldr	r2, [r7, #4]
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	1ad3      	subs	r3, r2, r3
 8006fd8:	08db      	lsrs	r3, r3, #3
 8006fda:	613b      	str	r3, [r7, #16]
        MODIFY_REG(FLASH->PCROP2ER, FLASH_PCROP2ER_PCROP2_END, reg_value);
 8006fdc:	4b18      	ldr	r3, [pc, #96]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006fe0:	0c1b      	lsrs	r3, r3, #16
 8006fe2:	041b      	lsls	r3, r3, #16
 8006fe4:	4916      	ldr	r1, [pc, #88]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	648b      	str	r3, [r1, #72]	; 0x48
      {
        /* Nothing to do */
      }
    }

    MODIFY_REG(FLASH->PCROP1ER, FLASH_PCROP1ER_PCROP_RDP, (PCROPConfig & FLASH_PCROP1ER_PCROP_RDP));
 8006fec:	4b14      	ldr	r3, [pc, #80]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006fee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ff0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ffa:	4911      	ldr	r1, [pc, #68]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	628b      	str	r3, [r1, #40]	; 0x28

    /* Set OPTSTRT Bit */
    SET_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8007000:	4b0f      	ldr	r3, [pc, #60]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8007002:	695b      	ldr	r3, [r3, #20]
 8007004:	4a0e      	ldr	r2, [pc, #56]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 8007006:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800700a:	6153      	str	r3, [r2, #20]

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800700c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007010:	f7ff fcb0 	bl	8006974 <FLASH_WaitForLastOperation>
 8007014:	4603      	mov	r3, r0
 8007016:	77fb      	strb	r3, [r7, #31]

    /* If the option byte program operation is completed, disable the OPTSTRT Bit */
    CLEAR_BIT(FLASH->CR, FLASH_CR_OPTSTRT);
 8007018:	4b09      	ldr	r3, [pc, #36]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	4a08      	ldr	r2, [pc, #32]	; (8007040 <FLASH_OB_PCROPConfig+0x154>)
 800701e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007022:	6153      	str	r3, [r2, #20]
  }

  return status;
 8007024:	7ffb      	ldrb	r3, [r7, #31]
}
 8007026:	4618      	mov	r0, r3
 8007028:	3720      	adds	r7, #32
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	40010000 	.word	0x40010000
 8007034:	1fff75e0 	.word	0x1fff75e0
 8007038:	01fffe00 	.word	0x01fffe00
 800703c:	08080000 	.word	0x08080000
 8007040:	40022000 	.word	0x40022000

08007044 <FLASH_OB_GetWRP>:
  *                        the write protected area
  *
  * @retval None
  */
static void FLASH_OB_GetWRP(uint32_t WRPArea, uint32_t * WRPStartOffset, uint32_t * WRDPEndOffset)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]
  /* Get the configuration of the write protected area */
  if(WRPArea == OB_WRPAREA_BANK1_AREAA)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d10b      	bne.n	800706e <FLASH_OB_GetWRP+0x2a>
  {
    *WRPStartOffset = READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_STRT);
 8007056:	4b1f      	ldr	r3, [pc, #124]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 8007058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800705a:	b2da      	uxtb	r2, r3
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1AR, FLASH_WRP1AR_WRP1A_END) >> 16);
 8007060:	4b1c      	ldr	r3, [pc, #112]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 8007062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007064:	0c1b      	lsrs	r3, r3, #16
 8007066:	b2da      	uxtb	r2, r3
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	601a      	str	r2, [r3, #0]
#endif
  else
  {
    /* Nothing to do */
  }
}
 800706c:	e02b      	b.n	80070c6 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK1_AREAB)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10b      	bne.n	800708c <FLASH_OB_GetWRP+0x48>
    *WRPStartOffset = READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_STRT);
 8007074:	4b17      	ldr	r3, [pc, #92]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	b2da      	uxtb	r2, r3
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP1BR, FLASH_WRP1BR_WRP1B_END) >> 16);
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 8007080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007082:	0c1b      	lsrs	r3, r3, #16
 8007084:	b2da      	uxtb	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	601a      	str	r2, [r3, #0]
}
 800708a:	e01c      	b.n	80070c6 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAA)
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	2b02      	cmp	r3, #2
 8007090:	d10b      	bne.n	80070aa <FLASH_OB_GetWRP+0x66>
    *WRPStartOffset = READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_STRT);
 8007092:	4b10      	ldr	r3, [pc, #64]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 8007094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007096:	b2da      	uxtb	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2AR, FLASH_WRP2AR_WRP2A_END) >> 16);
 800709c:	4b0d      	ldr	r3, [pc, #52]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 800709e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	b2da      	uxtb	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	601a      	str	r2, [r3, #0]
}
 80070a8:	e00d      	b.n	80070c6 <FLASH_OB_GetWRP+0x82>
  else if(WRPArea == OB_WRPAREA_BANK2_AREAB)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2b04      	cmp	r3, #4
 80070ae:	d10a      	bne.n	80070c6 <FLASH_OB_GetWRP+0x82>
    *WRPStartOffset = READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_STRT);
 80070b0:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 80070b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b4:	b2da      	uxtb	r2, r3
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	601a      	str	r2, [r3, #0]
    *WRDPEndOffset = (READ_BIT(FLASH->WRP2BR, FLASH_WRP2BR_WRP2B_END) >> 16);
 80070ba:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <FLASH_OB_GetWRP+0x90>)
 80070bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070be:	0c1b      	lsrs	r3, r3, #16
 80070c0:	b2da      	uxtb	r2, r3
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	601a      	str	r2, [r3, #0]
}
 80070c6:	bf00      	nop
 80070c8:	3714      	adds	r7, #20
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	40022000 	.word	0x40022000

080070d8 <FLASH_OB_GetRDP>:
  *            @arg OB_RDP_LEVEL_0: No protection
  *            @arg OB_RDP_LEVEL_1: Read protection of the memory
  *            @arg OB_RDP_LEVEL_2: Full chip protection
  */
static uint32_t FLASH_OB_GetRDP(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	b083      	sub	sp, #12
 80070dc:	af00      	add	r7, sp, #0
  uint32_t rdp_level = READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP);
 80070de:	4b0a      	ldr	r3, [pc, #40]	; (8007108 <FLASH_OB_GetRDP+0x30>)
 80070e0:	6a1b      	ldr	r3, [r3, #32]
 80070e2:	b2db      	uxtb	r3, r3
 80070e4:	607b      	str	r3, [r7, #4]

  if ((rdp_level != OB_RDP_LEVEL_0) && (rdp_level != OB_RDP_LEVEL_2))
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2baa      	cmp	r3, #170	; 0xaa
 80070ea:	d004      	beq.n	80070f6 <FLASH_OB_GetRDP+0x1e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2bcc      	cmp	r3, #204	; 0xcc
 80070f0:	d001      	beq.n	80070f6 <FLASH_OB_GetRDP+0x1e>
  {
    return (OB_RDP_LEVEL_1);
 80070f2:	23bb      	movs	r3, #187	; 0xbb
 80070f4:	e002      	b.n	80070fc <FLASH_OB_GetRDP+0x24>
  }
  else
  {
    return (READ_BIT(FLASH->OPTR, FLASH_OPTR_RDP));
 80070f6:	4b04      	ldr	r3, [pc, #16]	; (8007108 <FLASH_OB_GetRDP+0x30>)
 80070f8:	6a1b      	ldr	r3, [r3, #32]
 80070fa:	b2db      	uxtb	r3, r3
  }
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	370c      	adds	r7, #12
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	40022000 	.word	0x40022000

0800710c <FLASH_OB_GetUser>:
  *         BOR_LEV(Bit8-10), nRST_STOP(Bit12), nRST_STDBY(Bit13), nRST_SHDW(Bit14),
  *         IWDG_SW(Bit16), IWDG_STOP(Bit17), IWDG_STDBY(Bit18), WWDG_SW(Bit19),
  *         nBOOT1(Bit23), SRAM2_PE(Bit24), SRAM2_RST(Bit25), nSWBOOT0(Bit26) and nBOOT0(Bit27).
  */
static uint32_t FLASH_OB_GetUser(void)
{
 800710c:	b480      	push	{r7}
 800710e:	b083      	sub	sp, #12
 8007110:	af00      	add	r7, sp, #0
  uint32_t user_config = READ_REG(FLASH->OPTR);
 8007112:	4b07      	ldr	r3, [pc, #28]	; (8007130 <FLASH_OB_GetUser+0x24>)
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	607b      	str	r3, [r7, #4]
  CLEAR_BIT(user_config, FLASH_OPTR_RDP);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800711e:	607b      	str	r3, [r7, #4]

  return user_config;
 8007120:	687b      	ldr	r3, [r7, #4]
}
 8007122:	4618      	mov	r0, r3
 8007124:	370c      	adds	r7, #12
 8007126:	46bd      	mov	sp, r7
 8007128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop
 8007130:	40022000 	.word	0x40022000

08007134 <FLASH_OB_GetPCROP>:
  *                       the Proprietary code readout protection
  *
  * @retval None
  */
static void FLASH_OB_GetPCROP(uint32_t * PCROPConfig, uint32_t * PCROPStartAddr, uint32_t * PCROPEndAddr)
{
 8007134:	b480      	push	{r7}
 8007136:	b089      	sub	sp, #36	; 0x24
 8007138:	af00      	add	r7, sp, #0
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  /* Get the information about the bank swapping */
  if (READ_BIT(SYSCFG->MEMRMP, SYSCFG_MEMRMP_FB_MODE) == 0U)
 8007140:	4b3b      	ldr	r3, [pc, #236]	; (8007230 <FLASH_OB_GetPCROP+0xfc>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007148:	2b00      	cmp	r3, #0
 800714a:	d115      	bne.n	8007178 <FLASH_OB_GetPCROP+0x44>
  {
    bank1_addr = FLASH_BASE;
 800714c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007150:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8007152:	4b38      	ldr	r3, [pc, #224]	; (8007234 <FLASH_OB_GetPCROP+0x100>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	b29b      	uxth	r3, r3
 8007158:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800715c:	4293      	cmp	r3, r2
 800715e:	d008      	beq.n	8007172 <FLASH_OB_GetPCROP+0x3e>
 8007160:	4b34      	ldr	r3, [pc, #208]	; (8007234 <FLASH_OB_GetPCROP+0x100>)
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	029b      	lsls	r3, r3, #10
 8007166:	085a      	lsrs	r2, r3, #1
 8007168:	4b33      	ldr	r3, [pc, #204]	; (8007238 <FLASH_OB_GetPCROP+0x104>)
 800716a:	4013      	ands	r3, r2
 800716c:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8007170:	e000      	b.n	8007174 <FLASH_OB_GetPCROP+0x40>
 8007172:	4b32      	ldr	r3, [pc, #200]	; (800723c <FLASH_OB_GetPCROP+0x108>)
 8007174:	61bb      	str	r3, [r7, #24]
 8007176:	e014      	b.n	80071a2 <FLASH_OB_GetPCROP+0x6e>
  }
  else
  {
    bank1_addr = FLASH_BASE + FLASH_BANK_SIZE;
 8007178:	4b2e      	ldr	r3, [pc, #184]	; (8007234 <FLASH_OB_GetPCROP+0x100>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	b29b      	uxth	r3, r3
 800717e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007182:	4293      	cmp	r3, r2
 8007184:	d008      	beq.n	8007198 <FLASH_OB_GetPCROP+0x64>
 8007186:	4b2b      	ldr	r3, [pc, #172]	; (8007234 <FLASH_OB_GetPCROP+0x100>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	029b      	lsls	r3, r3, #10
 800718c:	085a      	lsrs	r2, r3, #1
 800718e:	4b2a      	ldr	r3, [pc, #168]	; (8007238 <FLASH_OB_GetPCROP+0x104>)
 8007190:	4013      	ands	r3, r2
 8007192:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8007196:	e000      	b.n	800719a <FLASH_OB_GetPCROP+0x66>
 8007198:	4b28      	ldr	r3, [pc, #160]	; (800723c <FLASH_OB_GetPCROP+0x108>)
 800719a:	61fb      	str	r3, [r7, #28]
    bank2_addr = FLASH_BASE;
 800719c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071a0:	61bb      	str	r3, [r7, #24]
    }
  }
  else
#endif
  {
    if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_1)
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0303 	and.w	r3, r3, #3
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d115      	bne.n	80071da <FLASH_OB_GetPCROP+0xa6>
    {
      reg_value       = (READ_REG(FLASH->PCROP1SR) & FLASH_PCROP1SR_PCROP1_STRT);
 80071ae:	4b24      	ldr	r3, [pc, #144]	; (8007240 <FLASH_OB_GetPCROP+0x10c>)
 80071b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071b2:	b29b      	uxth	r3, r3
 80071b4:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank1_addr;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	00da      	lsls	r2, r3, #3
 80071ba:	69fb      	ldr	r3, [r7, #28]
 80071bc:	441a      	add	r2, r3
 80071be:	68bb      	ldr	r3, [r7, #8]
 80071c0:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP1_END);
 80071c2:	4b1f      	ldr	r3, [pc, #124]	; (8007240 <FLASH_OB_GetPCROP+0x10c>)
 80071c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank1_addr + 0x7U;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	00da      	lsls	r2, r3, #3
 80071ce:	69fb      	ldr	r3, [r7, #28]
 80071d0:	4413      	add	r3, r2
 80071d2:	1dda      	adds	r2, r3, #7
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	601a      	str	r2, [r3, #0]
 80071d8:	e01a      	b.n	8007210 <FLASH_OB_GetPCROP+0xdc>
    }
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
    else if(((*PCROPConfig) & FLASH_BANK_BOTH) == FLASH_BANK_2)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f003 0303 	and.w	r3, r3, #3
 80071e2:	2b02      	cmp	r3, #2
 80071e4:	d114      	bne.n	8007210 <FLASH_OB_GetPCROP+0xdc>
    {
      reg_value       = (READ_REG(FLASH->PCROP2SR) & FLASH_PCROP2SR_PCROP2_STRT);
 80071e6:	4b16      	ldr	r3, [pc, #88]	; (8007240 <FLASH_OB_GetPCROP+0x10c>)
 80071e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	617b      	str	r3, [r7, #20]
      *PCROPStartAddr = (reg_value << 3) + bank2_addr;
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	00da      	lsls	r2, r3, #3
 80071f2:	69bb      	ldr	r3, [r7, #24]
 80071f4:	441a      	add	r2, r3
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	601a      	str	r2, [r3, #0]

      reg_value     = (READ_REG(FLASH->PCROP2ER) & FLASH_PCROP2ER_PCROP2_END);
 80071fa:	4b11      	ldr	r3, [pc, #68]	; (8007240 <FLASH_OB_GetPCROP+0x10c>)
 80071fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071fe:	b29b      	uxth	r3, r3
 8007200:	617b      	str	r3, [r7, #20]
      *PCROPEndAddr = (reg_value << 3) + bank2_addr + 0x7U;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	00da      	lsls	r2, r3, #3
 8007206:	69bb      	ldr	r3, [r7, #24]
 8007208:	4413      	add	r3, r2
 800720a:	1dda      	adds	r2, r3, #7
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
    {
      /* Nothing to do */
    }
  }

  *PCROPConfig |= (READ_REG(FLASH->PCROP1ER) & FLASH_PCROP1ER_PCROP_RDP);
 8007210:	4b0b      	ldr	r3, [pc, #44]	; (8007240 <FLASH_OB_GetPCROP+0x10c>)
 8007212:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007214:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	431a      	orrs	r2, r3
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	601a      	str	r2, [r3, #0]
}
 8007222:	bf00      	nop
 8007224:	3724      	adds	r7, #36	; 0x24
 8007226:	46bd      	mov	sp, r7
 8007228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722c:	4770      	bx	lr
 800722e:	bf00      	nop
 8007230:	40010000 	.word	0x40010000
 8007234:	1fff75e0 	.word	0x1fff75e0
 8007238:	01fffe00 	.word	0x01fffe00
 800723c:	08080000 	.word	0x08080000
 8007240:	40022000 	.word	0x40022000

08007244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800724e:	2300      	movs	r3, #0
 8007250:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007252:	e166      	b.n	8007522 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007254:	683b      	ldr	r3, [r7, #0]
 8007256:	681a      	ldr	r2, [r3, #0]
 8007258:	2101      	movs	r1, #1
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	fa01 f303 	lsl.w	r3, r1, r3
 8007260:	4013      	ands	r3, r2
 8007262:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 8158 	beq.w	800751c <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	685b      	ldr	r3, [r3, #4]
 8007270:	2b01      	cmp	r3, #1
 8007272:	d00b      	beq.n	800728c <HAL_GPIO_Init+0x48>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	2b02      	cmp	r3, #2
 800727a:	d007      	beq.n	800728c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007280:	2b11      	cmp	r3, #17
 8007282:	d003      	beq.n	800728c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	2b12      	cmp	r3, #18
 800728a:	d130      	bne.n	80072ee <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	689b      	ldr	r3, [r3, #8]
 8007290:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	2203      	movs	r2, #3
 8007298:	fa02 f303 	lsl.w	r3, r2, r3
 800729c:	43db      	mvns	r3, r3
 800729e:	693a      	ldr	r2, [r7, #16]
 80072a0:	4013      	ands	r3, r2
 80072a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	68da      	ldr	r2, [r3, #12]
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	005b      	lsls	r3, r3, #1
 80072ac:	fa02 f303 	lsl.w	r3, r2, r3
 80072b0:	693a      	ldr	r2, [r7, #16]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	693a      	ldr	r2, [r7, #16]
 80072ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
 80072c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80072c2:	2201      	movs	r2, #1
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	fa02 f303 	lsl.w	r3, r2, r3
 80072ca:	43db      	mvns	r3, r3
 80072cc:	693a      	ldr	r2, [r7, #16]
 80072ce:	4013      	ands	r3, r2
 80072d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80072d2:	683b      	ldr	r3, [r7, #0]
 80072d4:	685b      	ldr	r3, [r3, #4]
 80072d6:	091b      	lsrs	r3, r3, #4
 80072d8:	f003 0201 	and.w	r2, r3, #1
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	fa02 f303 	lsl.w	r3, r2, r3
 80072e2:	693a      	ldr	r2, [r7, #16]
 80072e4:	4313      	orrs	r3, r2
 80072e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	693a      	ldr	r2, [r7, #16]
 80072ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	68db      	ldr	r3, [r3, #12]
 80072f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	2203      	movs	r2, #3
 80072fa:	fa02 f303 	lsl.w	r3, r2, r3
 80072fe:	43db      	mvns	r3, r3
 8007300:	693a      	ldr	r2, [r7, #16]
 8007302:	4013      	ands	r3, r2
 8007304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	689a      	ldr	r2, [r3, #8]
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	005b      	lsls	r3, r3, #1
 800730e:	fa02 f303 	lsl.w	r3, r2, r3
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	4313      	orrs	r3, r2
 8007316:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	685b      	ldr	r3, [r3, #4]
 8007322:	2b02      	cmp	r3, #2
 8007324:	d003      	beq.n	800732e <HAL_GPIO_Init+0xea>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	2b12      	cmp	r3, #18
 800732c:	d123      	bne.n	8007376 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	08da      	lsrs	r2, r3, #3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3208      	adds	r2, #8
 8007336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800733a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f003 0307 	and.w	r3, r3, #7
 8007342:	009b      	lsls	r3, r3, #2
 8007344:	220f      	movs	r2, #15
 8007346:	fa02 f303 	lsl.w	r3, r2, r3
 800734a:	43db      	mvns	r3, r3
 800734c:	693a      	ldr	r2, [r7, #16]
 800734e:	4013      	ands	r3, r2
 8007350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	691a      	ldr	r2, [r3, #16]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	f003 0307 	and.w	r3, r3, #7
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	fa02 f303 	lsl.w	r3, r2, r3
 8007362:	693a      	ldr	r2, [r7, #16]
 8007364:	4313      	orrs	r3, r2
 8007366:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	08da      	lsrs	r2, r3, #3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3208      	adds	r2, #8
 8007370:	6939      	ldr	r1, [r7, #16]
 8007372:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	2203      	movs	r2, #3
 8007382:	fa02 f303 	lsl.w	r3, r2, r3
 8007386:	43db      	mvns	r3, r3
 8007388:	693a      	ldr	r2, [r7, #16]
 800738a:	4013      	ands	r3, r2
 800738c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f003 0203 	and.w	r2, r3, #3
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	005b      	lsls	r3, r3, #1
 800739a:	fa02 f303 	lsl.w	r3, r2, r3
 800739e:	693a      	ldr	r2, [r7, #16]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	693a      	ldr	r2, [r7, #16]
 80073a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	f000 80b2 	beq.w	800751c <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80073b8:	4b61      	ldr	r3, [pc, #388]	; (8007540 <HAL_GPIO_Init+0x2fc>)
 80073ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073bc:	4a60      	ldr	r2, [pc, #384]	; (8007540 <HAL_GPIO_Init+0x2fc>)
 80073be:	f043 0301 	orr.w	r3, r3, #1
 80073c2:	6613      	str	r3, [r2, #96]	; 0x60
 80073c4:	4b5e      	ldr	r3, [pc, #376]	; (8007540 <HAL_GPIO_Init+0x2fc>)
 80073c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073c8:	f003 0301 	and.w	r3, r3, #1
 80073cc:	60bb      	str	r3, [r7, #8]
 80073ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80073d0:	4a5c      	ldr	r2, [pc, #368]	; (8007544 <HAL_GPIO_Init+0x300>)
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	089b      	lsrs	r3, r3, #2
 80073d6:	3302      	adds	r3, #2
 80073d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	f003 0303 	and.w	r3, r3, #3
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	220f      	movs	r2, #15
 80073e8:	fa02 f303 	lsl.w	r3, r2, r3
 80073ec:	43db      	mvns	r3, r3
 80073ee:	693a      	ldr	r2, [r7, #16]
 80073f0:	4013      	ands	r3, r2
 80073f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80073fa:	d02b      	beq.n	8007454 <HAL_GPIO_Init+0x210>
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a52      	ldr	r2, [pc, #328]	; (8007548 <HAL_GPIO_Init+0x304>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d025      	beq.n	8007450 <HAL_GPIO_Init+0x20c>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a51      	ldr	r2, [pc, #324]	; (800754c <HAL_GPIO_Init+0x308>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d01f      	beq.n	800744c <HAL_GPIO_Init+0x208>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a50      	ldr	r2, [pc, #320]	; (8007550 <HAL_GPIO_Init+0x30c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d019      	beq.n	8007448 <HAL_GPIO_Init+0x204>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a4f      	ldr	r2, [pc, #316]	; (8007554 <HAL_GPIO_Init+0x310>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d013      	beq.n	8007444 <HAL_GPIO_Init+0x200>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a4e      	ldr	r2, [pc, #312]	; (8007558 <HAL_GPIO_Init+0x314>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d00d      	beq.n	8007440 <HAL_GPIO_Init+0x1fc>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a4d      	ldr	r2, [pc, #308]	; (800755c <HAL_GPIO_Init+0x318>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d007      	beq.n	800743c <HAL_GPIO_Init+0x1f8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a4c      	ldr	r2, [pc, #304]	; (8007560 <HAL_GPIO_Init+0x31c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d101      	bne.n	8007438 <HAL_GPIO_Init+0x1f4>
 8007434:	2307      	movs	r3, #7
 8007436:	e00e      	b.n	8007456 <HAL_GPIO_Init+0x212>
 8007438:	2308      	movs	r3, #8
 800743a:	e00c      	b.n	8007456 <HAL_GPIO_Init+0x212>
 800743c:	2306      	movs	r3, #6
 800743e:	e00a      	b.n	8007456 <HAL_GPIO_Init+0x212>
 8007440:	2305      	movs	r3, #5
 8007442:	e008      	b.n	8007456 <HAL_GPIO_Init+0x212>
 8007444:	2304      	movs	r3, #4
 8007446:	e006      	b.n	8007456 <HAL_GPIO_Init+0x212>
 8007448:	2303      	movs	r3, #3
 800744a:	e004      	b.n	8007456 <HAL_GPIO_Init+0x212>
 800744c:	2302      	movs	r3, #2
 800744e:	e002      	b.n	8007456 <HAL_GPIO_Init+0x212>
 8007450:	2301      	movs	r3, #1
 8007452:	e000      	b.n	8007456 <HAL_GPIO_Init+0x212>
 8007454:	2300      	movs	r3, #0
 8007456:	697a      	ldr	r2, [r7, #20]
 8007458:	f002 0203 	and.w	r2, r2, #3
 800745c:	0092      	lsls	r2, r2, #2
 800745e:	4093      	lsls	r3, r2
 8007460:	693a      	ldr	r2, [r7, #16]
 8007462:	4313      	orrs	r3, r2
 8007464:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007466:	4937      	ldr	r1, [pc, #220]	; (8007544 <HAL_GPIO_Init+0x300>)
 8007468:	697b      	ldr	r3, [r7, #20]
 800746a:	089b      	lsrs	r3, r3, #2
 800746c:	3302      	adds	r3, #2
 800746e:	693a      	ldr	r2, [r7, #16]
 8007470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8007474:	4b3b      	ldr	r3, [pc, #236]	; (8007564 <HAL_GPIO_Init+0x320>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	43db      	mvns	r3, r3
 800747e:	693a      	ldr	r2, [r7, #16]
 8007480:	4013      	ands	r3, r2
 8007482:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	685b      	ldr	r3, [r3, #4]
 8007488:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800748c:	2b00      	cmp	r3, #0
 800748e:	d003      	beq.n	8007498 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8007490:	693a      	ldr	r2, [r7, #16]
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	4313      	orrs	r3, r2
 8007496:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007498:	4a32      	ldr	r2, [pc, #200]	; (8007564 <HAL_GPIO_Init+0x320>)
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800749e:	4b31      	ldr	r3, [pc, #196]	; (8007564 <HAL_GPIO_Init+0x320>)
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	43db      	mvns	r3, r3
 80074a8:	693a      	ldr	r2, [r7, #16]
 80074aa:	4013      	ands	r3, r2
 80074ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d003      	beq.n	80074c2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80074ba:	693a      	ldr	r2, [r7, #16]
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	4313      	orrs	r3, r2
 80074c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80074c2:	4a28      	ldr	r2, [pc, #160]	; (8007564 <HAL_GPIO_Init+0x320>)
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80074c8:	4b26      	ldr	r3, [pc, #152]	; (8007564 <HAL_GPIO_Init+0x320>)
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	43db      	mvns	r3, r3
 80074d2:	693a      	ldr	r2, [r7, #16]
 80074d4:	4013      	ands	r3, r2
 80074d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	685b      	ldr	r3, [r3, #4]
 80074dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d003      	beq.n	80074ec <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80074ec:	4a1d      	ldr	r2, [pc, #116]	; (8007564 <HAL_GPIO_Init+0x320>)
 80074ee:	693b      	ldr	r3, [r7, #16]
 80074f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80074f2:	4b1c      	ldr	r3, [pc, #112]	; (8007564 <HAL_GPIO_Init+0x320>)
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	43db      	mvns	r3, r3
 80074fc:	693a      	ldr	r2, [r7, #16]
 80074fe:	4013      	ands	r3, r2
 8007500:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685b      	ldr	r3, [r3, #4]
 8007506:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d003      	beq.n	8007516 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 800750e:	693a      	ldr	r2, [r7, #16]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007516:	4a13      	ldr	r2, [pc, #76]	; (8007564 <HAL_GPIO_Init+0x320>)
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3301      	adds	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	681a      	ldr	r2, [r3, #0]
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	fa22 f303 	lsr.w	r3, r2, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	f47f ae91 	bne.w	8007254 <HAL_GPIO_Init+0x10>
  }
}
 8007532:	bf00      	nop
 8007534:	371c      	adds	r7, #28
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	40021000 	.word	0x40021000
 8007544:	40010000 	.word	0x40010000
 8007548:	48000400 	.word	0x48000400
 800754c:	48000800 	.word	0x48000800
 8007550:	48000c00 	.word	0x48000c00
 8007554:	48001000 	.word	0x48001000
 8007558:	48001400 	.word	0x48001400
 800755c:	48001800 	.word	0x48001800
 8007560:	48001c00 	.word	0x48001c00
 8007564:	40010400 	.word	0x40010400

08007568 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	460b      	mov	r3, r1
 8007572:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	887b      	ldrh	r3, [r7, #2]
 800757a:	4013      	ands	r3, r2
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007580:	2301      	movs	r3, #1
 8007582:	73fb      	strb	r3, [r7, #15]
 8007584:	e001      	b.n	800758a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800758a:	7bfb      	ldrb	r3, [r7, #15]
}
 800758c:	4618      	mov	r0, r3
 800758e:	3714      	adds	r7, #20
 8007590:	46bd      	mov	sp, r7
 8007592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007596:	4770      	bx	lr

08007598 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007598:	b480      	push	{r7}
 800759a:	b083      	sub	sp, #12
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
 80075a4:	4613      	mov	r3, r2
 80075a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80075a8:	787b      	ldrb	r3, [r7, #1]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80075ae:	887a      	ldrh	r2, [r7, #2]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80075b4:	e002      	b.n	80075bc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80075b6:	887a      	ldrh	r2, [r7, #2]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	629a      	str	r2, [r3, #40]	; 0x28
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80075d2:	4b08      	ldr	r3, [pc, #32]	; (80075f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075d4:	695a      	ldr	r2, [r3, #20]
 80075d6:	88fb      	ldrh	r3, [r7, #6]
 80075d8:	4013      	ands	r3, r2
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d006      	beq.n	80075ec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80075de:	4a05      	ldr	r2, [pc, #20]	; (80075f4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80075e0:	88fb      	ldrh	r3, [r7, #6]
 80075e2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80075e4:	88fb      	ldrh	r3, [r7, #6]
 80075e6:	4618      	mov	r0, r3
 80075e8:	f7fe fc84 	bl	8005ef4 <HAL_GPIO_EXTI_Callback>
  }
}
 80075ec:	bf00      	nop
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	40010400 	.word	0x40010400

080075f8 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b084      	sub	sp, #16
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d101      	bne.n	800760a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8007606:	2301      	movs	r3, #1
 8007608:	e038      	b.n	800767c <HAL_IWDG_Init+0x84>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8007612:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f245 5255 	movw	r2, #21845	; 0x5555
 800761c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	6852      	ldr	r2, [r2, #4]
 8007626:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	687a      	ldr	r2, [r7, #4]
 800762e:	6892      	ldr	r2, [r2, #8]
 8007630:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8007632:	f7fe ffc1 	bl	80065b8 <HAL_GetTick>
 8007636:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while (hiwdg->Instance->SR != 0x00u)
 8007638:	e008      	b.n	800764c <HAL_IWDG_Init+0x54>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800763a:	f7fe ffbd 	bl	80065b8 <HAL_GetTick>
 800763e:	4602      	mov	r2, r0
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	1ad3      	subs	r3, r2, r3
 8007644:	2b30      	cmp	r3, #48	; 0x30
 8007646:	d901      	bls.n	800764c <HAL_IWDG_Init+0x54>
    {
      return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e017      	b.n	800767c <HAL_IWDG_Init+0x84>
  while (hiwdg->Instance->SR != 0x00u)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d1f1      	bne.n	800763a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	691a      	ldr	r2, [r3, #16]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	429a      	cmp	r2, r3
 8007662:	d005      	beq.n	8007670 <HAL_IWDG_Init+0x78>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	68d2      	ldr	r2, [r2, #12]
 800766c:	611a      	str	r2, [r3, #16]
 800766e:	e004      	b.n	800767a <HAL_IWDG_Init+0x82>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3710      	adds	r7, #16
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}

08007684 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8007684:	b480      	push	{r7}
 8007686:	b083      	sub	sp, #12
 8007688:	af00      	add	r7, sp, #0
 800768a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8007694:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007696:	2300      	movs	r3, #0
}
 8007698:	4618      	mov	r0, r3
 800769a:	370c      	adds	r7, #12
 800769c:	46bd      	mov	sp, r7
 800769e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a2:	4770      	bx	lr

080076a4 <HAL_PWR_EnterSTANDBYMode>:
  *        These states are effective in Standby mode only if APC bit is set through
  *        HAL_PWREx_EnablePullUpPullDownConfig() API.
  * @retval None
  */
void HAL_PWR_EnterSTANDBYMode(void)
{
 80076a4:	b480      	push	{r7}
 80076a6:	af00      	add	r7, sp, #0
  /* Set Stand-by mode */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_CR1_LPMS_STANDBY);
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f023 0307 	bic.w	r3, r3, #7
 80076b0:	4a07      	ldr	r2, [pc, #28]	; (80076d0 <HAL_PWR_EnterSTANDBYMode+0x2c>)
 80076b2:	f043 0303 	orr.w	r3, r3, #3
 80076b6:	6013      	str	r3, [r2, #0]

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80076ba:	691b      	ldr	r3, [r3, #16]
 80076bc:	4a05      	ldr	r2, [pc, #20]	; (80076d4 <HAL_PWR_EnterSTANDBYMode+0x30>)
 80076be:	f043 0304 	orr.w	r3, r3, #4
 80076c2:	6113      	str	r3, [r2, #16]
/* This option is used to ensure that store operations are completed */
#if defined ( __CC_ARM)
  __force_stores();
#endif
  /* Request Wait For Interrupt */
  __WFI();
 80076c4:	bf30      	wfi
}
 80076c6:	bf00      	nop
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	40007000 	.word	0x40007000
 80076d4:	e000ed00 	.word	0xe000ed00

080076d8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80076dc:	4b04      	ldr	r3, [pc, #16]	; (80076f0 <HAL_PWREx_GetVoltageRange+0x18>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	46bd      	mov	sp, r7
 80076e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ec:	4770      	bx	lr
 80076ee:	bf00      	nop
 80076f0:	40007000 	.word	0x40007000

080076f4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007702:	d130      	bne.n	8007766 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007704:	4b23      	ldr	r3, [pc, #140]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800770c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007710:	d038      	beq.n	8007784 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8007712:	4b20      	ldr	r3, [pc, #128]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800771a:	4a1e      	ldr	r2, [pc, #120]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800771c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007720:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8007722:	4b1d      	ldr	r3, [pc, #116]	; (8007798 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2232      	movs	r2, #50	; 0x32
 8007728:	fb02 f303 	mul.w	r3, r2, r3
 800772c:	4a1b      	ldr	r2, [pc, #108]	; (800779c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800772e:	fba2 2303 	umull	r2, r3, r2, r3
 8007732:	0c9b      	lsrs	r3, r3, #18
 8007734:	3301      	adds	r3, #1
 8007736:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007738:	e002      	b.n	8007740 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	3b01      	subs	r3, #1
 800773e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007740:	4b14      	ldr	r3, [pc, #80]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007742:	695b      	ldr	r3, [r3, #20]
 8007744:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007748:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800774c:	d102      	bne.n	8007754 <HAL_PWREx_ControlVoltageScaling+0x60>
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d1f2      	bne.n	800773a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007754:	4b0f      	ldr	r3, [pc, #60]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007756:	695b      	ldr	r3, [r3, #20]
 8007758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800775c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007760:	d110      	bne.n	8007784 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e00f      	b.n	8007786 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800776e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007772:	d007      	beq.n	8007784 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007774:	4b07      	ldr	r3, [pc, #28]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800777c:	4a05      	ldr	r2, [pc, #20]	; (8007794 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800777e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007782:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3714      	adds	r7, #20
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40007000 	.word	0x40007000
 8007798:	20000008 	.word	0x20000008
 800779c:	431bde83 	.word	0x431bde83

080077a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b088      	sub	sp, #32
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d102      	bne.n	80077b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077ae:	2301      	movs	r3, #1
 80077b0:	f000 bc16 	b.w	8007fe0 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077b4:	4ba0      	ldr	r3, [pc, #640]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 030c 	and.w	r3, r3, #12
 80077bc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077be:	4b9e      	ldr	r3, [pc, #632]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	f003 0303 	and.w	r3, r3, #3
 80077c6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f003 0310 	and.w	r3, r3, #16
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f000 80e4 	beq.w	800799e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80077d6:	69bb      	ldr	r3, [r7, #24]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d007      	beq.n	80077ec <HAL_RCC_OscConfig+0x4c>
 80077dc:	69bb      	ldr	r3, [r7, #24]
 80077de:	2b0c      	cmp	r3, #12
 80077e0:	f040 808b 	bne.w	80078fa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80077e4:	697b      	ldr	r3, [r7, #20]
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	f040 8087 	bne.w	80078fa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80077ec:	4b92      	ldr	r3, [pc, #584]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 0302 	and.w	r3, r3, #2
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCC_OscConfig+0x64>
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	699b      	ldr	r3, [r3, #24]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e3ed      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	6a1a      	ldr	r2, [r3, #32]
 8007808:	4b8b      	ldr	r3, [pc, #556]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f003 0308 	and.w	r3, r3, #8
 8007810:	2b00      	cmp	r3, #0
 8007812:	d004      	beq.n	800781e <HAL_RCC_OscConfig+0x7e>
 8007814:	4b88      	ldr	r3, [pc, #544]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800781c:	e005      	b.n	800782a <HAL_RCC_OscConfig+0x8a>
 800781e:	4b86      	ldr	r3, [pc, #536]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007820:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007824:	091b      	lsrs	r3, r3, #4
 8007826:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800782a:	4293      	cmp	r3, r2
 800782c:	d223      	bcs.n	8007876 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6a1b      	ldr	r3, [r3, #32]
 8007832:	4618      	mov	r0, r3
 8007834:	f000 fd7e 	bl	8008334 <RCC_SetFlashLatencyFromMSIRange>
 8007838:	4603      	mov	r3, r0
 800783a:	2b00      	cmp	r3, #0
 800783c:	d001      	beq.n	8007842 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800783e:	2301      	movs	r3, #1
 8007840:	e3ce      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007842:	4b7d      	ldr	r3, [pc, #500]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	4a7c      	ldr	r2, [pc, #496]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007848:	f043 0308 	orr.w	r3, r3, #8
 800784c:	6013      	str	r3, [r2, #0]
 800784e:	4b7a      	ldr	r3, [pc, #488]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6a1b      	ldr	r3, [r3, #32]
 800785a:	4977      	ldr	r1, [pc, #476]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800785c:	4313      	orrs	r3, r2
 800785e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007860:	4b75      	ldr	r3, [pc, #468]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	69db      	ldr	r3, [r3, #28]
 800786c:	021b      	lsls	r3, r3, #8
 800786e:	4972      	ldr	r1, [pc, #456]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007870:	4313      	orrs	r3, r2
 8007872:	604b      	str	r3, [r1, #4]
 8007874:	e025      	b.n	80078c2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007876:	4b70      	ldr	r3, [pc, #448]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	4a6f      	ldr	r2, [pc, #444]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800787c:	f043 0308 	orr.w	r3, r3, #8
 8007880:	6013      	str	r3, [r2, #0]
 8007882:	4b6d      	ldr	r3, [pc, #436]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	496a      	ldr	r1, [pc, #424]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007890:	4313      	orrs	r3, r2
 8007892:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007894:	4b68      	ldr	r3, [pc, #416]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	69db      	ldr	r3, [r3, #28]
 80078a0:	021b      	lsls	r3, r3, #8
 80078a2:	4965      	ldr	r1, [pc, #404]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80078a4:	4313      	orrs	r3, r2
 80078a6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	6a1b      	ldr	r3, [r3, #32]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 fd3e 	bl	8008334 <RCC_SetFlashLatencyFromMSIRange>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e38e      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80078c2:	f000 fc75 	bl	80081b0 <HAL_RCC_GetSysClockFreq>
 80078c6:	4601      	mov	r1, r0
 80078c8:	4b5b      	ldr	r3, [pc, #364]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80078ca:	689b      	ldr	r3, [r3, #8]
 80078cc:	091b      	lsrs	r3, r3, #4
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	4a5a      	ldr	r2, [pc, #360]	; (8007a3c <HAL_RCC_OscConfig+0x29c>)
 80078d4:	5cd3      	ldrb	r3, [r2, r3]
 80078d6:	f003 031f 	and.w	r3, r3, #31
 80078da:	fa21 f303 	lsr.w	r3, r1, r3
 80078de:	4a58      	ldr	r2, [pc, #352]	; (8007a40 <HAL_RCC_OscConfig+0x2a0>)
 80078e0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80078e2:	4b58      	ldr	r3, [pc, #352]	; (8007a44 <HAL_RCC_OscConfig+0x2a4>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fe1a 	bl	8006520 <HAL_InitTick>
 80078ec:	4603      	mov	r3, r0
 80078ee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80078f0:	7bfb      	ldrb	r3, [r7, #15]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d052      	beq.n	800799c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80078f6:	7bfb      	ldrb	r3, [r7, #15]
 80078f8:	e372      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d032      	beq.n	8007968 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007902:	4b4d      	ldr	r3, [pc, #308]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	4a4c      	ldr	r2, [pc, #304]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007908:	f043 0301 	orr.w	r3, r3, #1
 800790c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800790e:	f7fe fe53 	bl	80065b8 <HAL_GetTick>
 8007912:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007914:	e008      	b.n	8007928 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007916:	f7fe fe4f 	bl	80065b8 <HAL_GetTick>
 800791a:	4602      	mov	r2, r0
 800791c:	693b      	ldr	r3, [r7, #16]
 800791e:	1ad3      	subs	r3, r2, r3
 8007920:	2b02      	cmp	r3, #2
 8007922:	d901      	bls.n	8007928 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007924:	2303      	movs	r3, #3
 8007926:	e35b      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007928:	4b43      	ldr	r3, [pc, #268]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	f003 0302 	and.w	r3, r3, #2
 8007930:	2b00      	cmp	r3, #0
 8007932:	d0f0      	beq.n	8007916 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007934:	4b40      	ldr	r3, [pc, #256]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a3f      	ldr	r2, [pc, #252]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800793a:	f043 0308 	orr.w	r3, r3, #8
 800793e:	6013      	str	r3, [r2, #0]
 8007940:	4b3d      	ldr	r3, [pc, #244]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6a1b      	ldr	r3, [r3, #32]
 800794c:	493a      	ldr	r1, [pc, #232]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800794e:	4313      	orrs	r3, r2
 8007950:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007952:	4b39      	ldr	r3, [pc, #228]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007954:	685b      	ldr	r3, [r3, #4]
 8007956:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	69db      	ldr	r3, [r3, #28]
 800795e:	021b      	lsls	r3, r3, #8
 8007960:	4935      	ldr	r1, [pc, #212]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007962:	4313      	orrs	r3, r2
 8007964:	604b      	str	r3, [r1, #4]
 8007966:	e01a      	b.n	800799e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007968:	4b33      	ldr	r3, [pc, #204]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a32      	ldr	r2, [pc, #200]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 800796e:	f023 0301 	bic.w	r3, r3, #1
 8007972:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007974:	f7fe fe20 	bl	80065b8 <HAL_GetTick>
 8007978:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800797a:	e008      	b.n	800798e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800797c:	f7fe fe1c 	bl	80065b8 <HAL_GetTick>
 8007980:	4602      	mov	r2, r0
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	1ad3      	subs	r3, r2, r3
 8007986:	2b02      	cmp	r3, #2
 8007988:	d901      	bls.n	800798e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800798a:	2303      	movs	r3, #3
 800798c:	e328      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800798e:	4b2a      	ldr	r3, [pc, #168]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 0302 	and.w	r3, r3, #2
 8007996:	2b00      	cmp	r3, #0
 8007998:	d1f0      	bne.n	800797c <HAL_RCC_OscConfig+0x1dc>
 800799a:	e000      	b.n	800799e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800799c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d073      	beq.n	8007a92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b08      	cmp	r3, #8
 80079ae:	d005      	beq.n	80079bc <HAL_RCC_OscConfig+0x21c>
 80079b0:	69bb      	ldr	r3, [r7, #24]
 80079b2:	2b0c      	cmp	r3, #12
 80079b4:	d10e      	bne.n	80079d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80079b6:	697b      	ldr	r3, [r7, #20]
 80079b8:	2b03      	cmp	r3, #3
 80079ba:	d10b      	bne.n	80079d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079bc:	4b1e      	ldr	r3, [pc, #120]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d063      	beq.n	8007a90 <HAL_RCC_OscConfig+0x2f0>
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	685b      	ldr	r3, [r3, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d15f      	bne.n	8007a90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	e305      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079dc:	d106      	bne.n	80079ec <HAL_RCC_OscConfig+0x24c>
 80079de:	4b16      	ldr	r3, [pc, #88]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	4a15      	ldr	r2, [pc, #84]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80079e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079e8:	6013      	str	r3, [r2, #0]
 80079ea:	e01d      	b.n	8007a28 <HAL_RCC_OscConfig+0x288>
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079f4:	d10c      	bne.n	8007a10 <HAL_RCC_OscConfig+0x270>
 80079f6:	4b10      	ldr	r3, [pc, #64]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a0f      	ldr	r2, [pc, #60]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 80079fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	4b0d      	ldr	r3, [pc, #52]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4a0c      	ldr	r2, [pc, #48]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007a08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a0c:	6013      	str	r3, [r2, #0]
 8007a0e:	e00b      	b.n	8007a28 <HAL_RCC_OscConfig+0x288>
 8007a10:	4b09      	ldr	r3, [pc, #36]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a08      	ldr	r2, [pc, #32]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007a16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a1a:	6013      	str	r3, [r2, #0]
 8007a1c:	4b06      	ldr	r3, [pc, #24]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a05      	ldr	r2, [pc, #20]	; (8007a38 <HAL_RCC_OscConfig+0x298>)
 8007a22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	685b      	ldr	r3, [r3, #4]
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d01b      	beq.n	8007a68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a30:	f7fe fdc2 	bl	80065b8 <HAL_GetTick>
 8007a34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a36:	e010      	b.n	8007a5a <HAL_RCC_OscConfig+0x2ba>
 8007a38:	40021000 	.word	0x40021000
 8007a3c:	08013dc8 	.word	0x08013dc8
 8007a40:	20000008 	.word	0x20000008
 8007a44:	2000000c 	.word	0x2000000c
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a48:	f7fe fdb6 	bl	80065b8 <HAL_GetTick>
 8007a4c:	4602      	mov	r2, r0
 8007a4e:	693b      	ldr	r3, [r7, #16]
 8007a50:	1ad3      	subs	r3, r2, r3
 8007a52:	2b64      	cmp	r3, #100	; 0x64
 8007a54:	d901      	bls.n	8007a5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007a56:	2303      	movs	r3, #3
 8007a58:	e2c2      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007a5a:	4baf      	ldr	r3, [pc, #700]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d0f0      	beq.n	8007a48 <HAL_RCC_OscConfig+0x2a8>
 8007a66:	e014      	b.n	8007a92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a68:	f7fe fda6 	bl	80065b8 <HAL_GetTick>
 8007a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a6e:	e008      	b.n	8007a82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a70:	f7fe fda2 	bl	80065b8 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	2b64      	cmp	r3, #100	; 0x64
 8007a7c:	d901      	bls.n	8007a82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007a7e:	2303      	movs	r3, #3
 8007a80:	e2ae      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007a82:	4ba5      	ldr	r3, [pc, #660]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1f0      	bne.n	8007a70 <HAL_RCC_OscConfig+0x2d0>
 8007a8e:	e000      	b.n	8007a92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d060      	beq.n	8007b60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	2b04      	cmp	r3, #4
 8007aa2:	d005      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x310>
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	2b0c      	cmp	r3, #12
 8007aa8:	d119      	bne.n	8007ade <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	2b02      	cmp	r3, #2
 8007aae:	d116      	bne.n	8007ade <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007ab0:	4b99      	ldr	r3, [pc, #612]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x328>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	68db      	ldr	r3, [r3, #12]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d101      	bne.n	8007ac8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e28b      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007ac8:	4b93      	ldr	r3, [pc, #588]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	061b      	lsls	r3, r3, #24
 8007ad6:	4990      	ldr	r1, [pc, #576]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007adc:	e040      	b.n	8007b60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	68db      	ldr	r3, [r3, #12]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d023      	beq.n	8007b2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007ae6:	4b8c      	ldr	r3, [pc, #560]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	4a8b      	ldr	r2, [pc, #556]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007af2:	f7fe fd61 	bl	80065b8 <HAL_GetTick>
 8007af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007af8:	e008      	b.n	8007b0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007afa:	f7fe fd5d 	bl	80065b8 <HAL_GetTick>
 8007afe:	4602      	mov	r2, r0
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	1ad3      	subs	r3, r2, r3
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d901      	bls.n	8007b0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e269      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007b0c:	4b82      	ldr	r3, [pc, #520]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d0f0      	beq.n	8007afa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b18:	4b7f      	ldr	r3, [pc, #508]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	061b      	lsls	r3, r3, #24
 8007b26:	497c      	ldr	r1, [pc, #496]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	604b      	str	r3, [r1, #4]
 8007b2c:	e018      	b.n	8007b60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b2e:	4b7a      	ldr	r3, [pc, #488]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a79      	ldr	r2, [pc, #484]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b3a:	f7fe fd3d 	bl	80065b8 <HAL_GetTick>
 8007b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b40:	e008      	b.n	8007b54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b42:	f7fe fd39 	bl	80065b8 <HAL_GetTick>
 8007b46:	4602      	mov	r2, r0
 8007b48:	693b      	ldr	r3, [r7, #16]
 8007b4a:	1ad3      	subs	r3, r2, r3
 8007b4c:	2b02      	cmp	r3, #2
 8007b4e:	d901      	bls.n	8007b54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007b50:	2303      	movs	r3, #3
 8007b52:	e245      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007b54:	4b70      	ldr	r3, [pc, #448]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1f0      	bne.n	8007b42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 0308 	and.w	r3, r3, #8
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d03c      	beq.n	8007be6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	695b      	ldr	r3, [r3, #20]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d01c      	beq.n	8007bae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007b74:	4b68      	ldr	r3, [pc, #416]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b7a:	4a67      	ldr	r2, [pc, #412]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007b84:	f7fe fd18 	bl	80065b8 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007b8c:	f7fe fd14 	bl	80065b8 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e220      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007b9e:	4b5e      	ldr	r3, [pc, #376]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007ba4:	f003 0302 	and.w	r3, r3, #2
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d0ef      	beq.n	8007b8c <HAL_RCC_OscConfig+0x3ec>
 8007bac:	e01b      	b.n	8007be6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bae:	4b5a      	ldr	r3, [pc, #360]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bb4:	4a58      	ldr	r2, [pc, #352]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007bb6:	f023 0301 	bic.w	r3, r3, #1
 8007bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bbe:	f7fe fcfb 	bl	80065b8 <HAL_GetTick>
 8007bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bc4:	e008      	b.n	8007bd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bc6:	f7fe fcf7 	bl	80065b8 <HAL_GetTick>
 8007bca:	4602      	mov	r2, r0
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	1ad3      	subs	r3, r2, r3
 8007bd0:	2b02      	cmp	r3, #2
 8007bd2:	d901      	bls.n	8007bd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007bd4:	2303      	movs	r3, #3
 8007bd6:	e203      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007bd8:	4b4f      	ldr	r3, [pc, #316]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007bde:	f003 0302 	and.w	r3, r3, #2
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1ef      	bne.n	8007bc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f003 0304 	and.w	r3, r3, #4
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	f000 80a6 	beq.w	8007d40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007bf8:	4b47      	ldr	r3, [pc, #284]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d10d      	bne.n	8007c20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c04:	4b44      	ldr	r3, [pc, #272]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c08:	4a43      	ldr	r2, [pc, #268]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8007c10:	4b41      	ldr	r3, [pc, #260]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c18:	60bb      	str	r3, [r7, #8]
 8007c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c20:	4b3e      	ldr	r3, [pc, #248]	; (8007d1c <HAL_RCC_OscConfig+0x57c>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d118      	bne.n	8007c5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c2c:	4b3b      	ldr	r3, [pc, #236]	; (8007d1c <HAL_RCC_OscConfig+0x57c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4a3a      	ldr	r2, [pc, #232]	; (8007d1c <HAL_RCC_OscConfig+0x57c>)
 8007c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c38:	f7fe fcbe 	bl	80065b8 <HAL_GetTick>
 8007c3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c3e:	e008      	b.n	8007c52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c40:	f7fe fcba 	bl	80065b8 <HAL_GetTick>
 8007c44:	4602      	mov	r2, r0
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	1ad3      	subs	r3, r2, r3
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d901      	bls.n	8007c52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007c4e:	2303      	movs	r3, #3
 8007c50:	e1c6      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c52:	4b32      	ldr	r3, [pc, #200]	; (8007d1c <HAL_RCC_OscConfig+0x57c>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0f0      	beq.n	8007c40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	2b01      	cmp	r3, #1
 8007c64:	d108      	bne.n	8007c78 <HAL_RCC_OscConfig+0x4d8>
 8007c66:	4b2c      	ldr	r3, [pc, #176]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c6c:	4a2a      	ldr	r2, [pc, #168]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c6e:	f043 0301 	orr.w	r3, r3, #1
 8007c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c76:	e024      	b.n	8007cc2 <HAL_RCC_OscConfig+0x522>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	2b05      	cmp	r3, #5
 8007c7e:	d110      	bne.n	8007ca2 <HAL_RCC_OscConfig+0x502>
 8007c80:	4b25      	ldr	r3, [pc, #148]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c86:	4a24      	ldr	r2, [pc, #144]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c88:	f043 0304 	orr.w	r3, r3, #4
 8007c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007c90:	4b21      	ldr	r3, [pc, #132]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c96:	4a20      	ldr	r2, [pc, #128]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007c98:	f043 0301 	orr.w	r3, r3, #1
 8007c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007ca0:	e00f      	b.n	8007cc2 <HAL_RCC_OscConfig+0x522>
 8007ca2:	4b1d      	ldr	r3, [pc, #116]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ca8:	4a1b      	ldr	r2, [pc, #108]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007caa:	f023 0301 	bic.w	r3, r3, #1
 8007cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007cb2:	4b19      	ldr	r3, [pc, #100]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cb8:	4a17      	ldr	r2, [pc, #92]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007cba:	f023 0304 	bic.w	r3, r3, #4
 8007cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	689b      	ldr	r3, [r3, #8]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d016      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cca:	f7fe fc75 	bl	80065b8 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007cd0:	e00a      	b.n	8007ce8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cd2:	f7fe fc71 	bl	80065b8 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d901      	bls.n	8007ce8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8007ce4:	2303      	movs	r3, #3
 8007ce6:	e17b      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ce8:	4b0b      	ldr	r3, [pc, #44]	; (8007d18 <HAL_RCC_OscConfig+0x578>)
 8007cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d0ed      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x532>
 8007cf6:	e01a      	b.n	8007d2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cf8:	f7fe fc5e 	bl	80065b8 <HAL_GetTick>
 8007cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007cfe:	e00f      	b.n	8007d20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d00:	f7fe fc5a 	bl	80065b8 <HAL_GetTick>
 8007d04:	4602      	mov	r2, r0
 8007d06:	693b      	ldr	r3, [r7, #16]
 8007d08:	1ad3      	subs	r3, r2, r3
 8007d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d0e:	4293      	cmp	r3, r2
 8007d10:	d906      	bls.n	8007d20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e164      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
 8007d16:	bf00      	nop
 8007d18:	40021000 	.word	0x40021000
 8007d1c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007d20:	4ba8      	ldr	r3, [pc, #672]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d26:	f003 0302 	and.w	r3, r3, #2
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d1e8      	bne.n	8007d00 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007d2e:	7ffb      	ldrb	r3, [r7, #31]
 8007d30:	2b01      	cmp	r3, #1
 8007d32:	d105      	bne.n	8007d40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d34:	4ba3      	ldr	r3, [pc, #652]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d38:	4aa2      	ldr	r2, [pc, #648]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d3e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	f003 0320 	and.w	r3, r3, #32
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d03c      	beq.n	8007dc6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d01c      	beq.n	8007d8e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007d54:	4b9b      	ldr	r3, [pc, #620]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d5a:	4a9a      	ldr	r2, [pc, #616]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d5c:	f043 0301 	orr.w	r3, r3, #1
 8007d60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d64:	f7fe fc28 	bl	80065b8 <HAL_GetTick>
 8007d68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d6a:	e008      	b.n	8007d7e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d6c:	f7fe fc24 	bl	80065b8 <HAL_GetTick>
 8007d70:	4602      	mov	r2, r0
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	1ad3      	subs	r3, r2, r3
 8007d76:	2b02      	cmp	r3, #2
 8007d78:	d901      	bls.n	8007d7e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007d7a:	2303      	movs	r3, #3
 8007d7c:	e130      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007d7e:	4b91      	ldr	r3, [pc, #580]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d84:	f003 0302 	and.w	r3, r3, #2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d0ef      	beq.n	8007d6c <HAL_RCC_OscConfig+0x5cc>
 8007d8c:	e01b      	b.n	8007dc6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d8e:	4b8d      	ldr	r3, [pc, #564]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d90:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007d94:	4a8b      	ldr	r2, [pc, #556]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007d96:	f023 0301 	bic.w	r3, r3, #1
 8007d9a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d9e:	f7fe fc0b 	bl	80065b8 <HAL_GetTick>
 8007da2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007da4:	e008      	b.n	8007db8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007da6:	f7fe fc07 	bl	80065b8 <HAL_GetTick>
 8007daa:	4602      	mov	r2, r0
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d901      	bls.n	8007db8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007db4:	2303      	movs	r3, #3
 8007db6:	e113      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007db8:	4b82      	ldr	r3, [pc, #520]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007dba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007dbe:	f003 0302 	and.w	r3, r3, #2
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1ef      	bne.n	8007da6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	f000 8107 	beq.w	8007fde <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dd4:	2b02      	cmp	r3, #2
 8007dd6:	f040 80cb 	bne.w	8007f70 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007dda:	4b7a      	ldr	r3, [pc, #488]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007ddc:	68db      	ldr	r3, [r3, #12]
 8007dde:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	f003 0203 	and.w	r2, r3, #3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d12c      	bne.n	8007e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007df8:	3b01      	subs	r3, #1
 8007dfa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d123      	bne.n	8007e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e0a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d11b      	bne.n	8007e48 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e1a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d113      	bne.n	8007e48 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e2a:	085b      	lsrs	r3, r3, #1
 8007e2c:	3b01      	subs	r3, #1
 8007e2e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007e30:	429a      	cmp	r2, r3
 8007e32:	d109      	bne.n	8007e48 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e3e:	085b      	lsrs	r3, r3, #1
 8007e40:	3b01      	subs	r3, #1
 8007e42:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d06d      	beq.n	8007f24 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	2b0c      	cmp	r3, #12
 8007e4c:	d068      	beq.n	8007f20 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007e4e:	4b5d      	ldr	r3, [pc, #372]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d105      	bne.n	8007e66 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8007e5a:	4b5a      	ldr	r3, [pc, #360]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d001      	beq.n	8007e6a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8007e66:	2301      	movs	r3, #1
 8007e68:	e0ba      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007e6a:	4b56      	ldr	r3, [pc, #344]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	4a55      	ldr	r2, [pc, #340]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007e70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007e76:	f7fe fb9f 	bl	80065b8 <HAL_GetTick>
 8007e7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e7c:	e008      	b.n	8007e90 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e7e:	f7fe fb9b 	bl	80065b8 <HAL_GetTick>
 8007e82:	4602      	mov	r2, r0
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	1ad3      	subs	r3, r2, r3
 8007e88:	2b02      	cmp	r3, #2
 8007e8a:	d901      	bls.n	8007e90 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8007e8c:	2303      	movs	r3, #3
 8007e8e:	e0a7      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007e90:	4b4c      	ldr	r3, [pc, #304]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1f0      	bne.n	8007e7e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e9c:	4b49      	ldr	r3, [pc, #292]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007e9e:	68da      	ldr	r2, [r3, #12]
 8007ea0:	4b49      	ldr	r3, [pc, #292]	; (8007fc8 <HAL_RCC_OscConfig+0x828>)
 8007ea2:	4013      	ands	r3, r2
 8007ea4:	687a      	ldr	r2, [r7, #4]
 8007ea6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007eac:	3a01      	subs	r2, #1
 8007eae:	0112      	lsls	r2, r2, #4
 8007eb0:	4311      	orrs	r1, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007eb6:	0212      	lsls	r2, r2, #8
 8007eb8:	4311      	orrs	r1, r2
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007ebe:	0852      	lsrs	r2, r2, #1
 8007ec0:	3a01      	subs	r2, #1
 8007ec2:	0552      	lsls	r2, r2, #21
 8007ec4:	4311      	orrs	r1, r2
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007eca:	0852      	lsrs	r2, r2, #1
 8007ecc:	3a01      	subs	r2, #1
 8007ece:	0652      	lsls	r2, r2, #25
 8007ed0:	4311      	orrs	r1, r2
 8007ed2:	687a      	ldr	r2, [r7, #4]
 8007ed4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007ed6:	06d2      	lsls	r2, r2, #27
 8007ed8:	430a      	orrs	r2, r1
 8007eda:	493a      	ldr	r1, [pc, #232]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007edc:	4313      	orrs	r3, r2
 8007ede:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007ee0:	4b38      	ldr	r3, [pc, #224]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a37      	ldr	r2, [pc, #220]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007ee6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007eea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007eec:	4b35      	ldr	r3, [pc, #212]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	4a34      	ldr	r2, [pc, #208]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007ef2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ef6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ef8:	f7fe fb5e 	bl	80065b8 <HAL_GetTick>
 8007efc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007efe:	e008      	b.n	8007f12 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f00:	f7fe fb5a 	bl	80065b8 <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d901      	bls.n	8007f12 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8007f0e:	2303      	movs	r3, #3
 8007f10:	e066      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f12:	4b2c      	ldr	r3, [pc, #176]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d0f0      	beq.n	8007f00 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f1e:	e05e      	b.n	8007fde <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007f20:	2301      	movs	r3, #1
 8007f22:	e05d      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f24:	4b27      	ldr	r3, [pc, #156]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d156      	bne.n	8007fde <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007f30:	4b24      	ldr	r3, [pc, #144]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	4a23      	ldr	r2, [pc, #140]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f3a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007f3c:	4b21      	ldr	r3, [pc, #132]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	4a20      	ldr	r2, [pc, #128]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f46:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007f48:	f7fe fb36 	bl	80065b8 <HAL_GetTick>
 8007f4c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f4e:	e008      	b.n	8007f62 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f50:	f7fe fb32 	bl	80065b8 <HAL_GetTick>
 8007f54:	4602      	mov	r2, r0
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	2b02      	cmp	r3, #2
 8007f5c:	d901      	bls.n	8007f62 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e03e      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007f62:	4b18      	ldr	r3, [pc, #96]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d0f0      	beq.n	8007f50 <HAL_RCC_OscConfig+0x7b0>
 8007f6e:	e036      	b.n	8007fde <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f70:	69bb      	ldr	r3, [r7, #24]
 8007f72:	2b0c      	cmp	r3, #12
 8007f74:	d031      	beq.n	8007fda <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f76:	4b13      	ldr	r3, [pc, #76]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	4a12      	ldr	r2, [pc, #72]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f7c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f80:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8007f82:	4b10      	ldr	r3, [pc, #64]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d105      	bne.n	8007f9a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8007f8e:	4b0d      	ldr	r3, [pc, #52]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f90:	68db      	ldr	r3, [r3, #12]
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f94:	f023 0303 	bic.w	r3, r3, #3
 8007f98:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007f9a:	4b0a      	ldr	r3, [pc, #40]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	4a09      	ldr	r2, [pc, #36]	; (8007fc4 <HAL_RCC_OscConfig+0x824>)
 8007fa0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8007fa4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007fa8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007faa:	f7fe fb05 	bl	80065b8 <HAL_GetTick>
 8007fae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fb0:	e00c      	b.n	8007fcc <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb2:	f7fe fb01 	bl	80065b8 <HAL_GetTick>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	1ad3      	subs	r3, r2, r3
 8007fbc:	2b02      	cmp	r3, #2
 8007fbe:	d905      	bls.n	8007fcc <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8007fc0:	2303      	movs	r3, #3
 8007fc2:	e00d      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
 8007fc4:	40021000 	.word	0x40021000
 8007fc8:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007fcc:	4b06      	ldr	r3, [pc, #24]	; (8007fe8 <HAL_RCC_OscConfig+0x848>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d1ec      	bne.n	8007fb2 <HAL_RCC_OscConfig+0x812>
 8007fd8:	e001      	b.n	8007fde <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007fda:	2301      	movs	r3, #1
 8007fdc:	e000      	b.n	8007fe0 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3720      	adds	r7, #32
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}
 8007fe8:	40021000 	.word	0x40021000

08007fec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
 8007ff4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d101      	bne.n	8008000 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e0c8      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008000:	4b66      	ldr	r3, [pc, #408]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f003 0307 	and.w	r3, r3, #7
 8008008:	683a      	ldr	r2, [r7, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d910      	bls.n	8008030 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800800e:	4b63      	ldr	r3, [pc, #396]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f023 0207 	bic.w	r2, r3, #7
 8008016:	4961      	ldr	r1, [pc, #388]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	4313      	orrs	r3, r2
 800801c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800801e:	4b5f      	ldr	r3, [pc, #380]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f003 0307 	and.w	r3, r3, #7
 8008026:	683a      	ldr	r2, [r7, #0]
 8008028:	429a      	cmp	r2, r3
 800802a:	d001      	beq.n	8008030 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800802c:	2301      	movs	r3, #1
 800802e:	e0b0      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	2b00      	cmp	r3, #0
 800803a:	d04c      	beq.n	80080d6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	685b      	ldr	r3, [r3, #4]
 8008040:	2b03      	cmp	r3, #3
 8008042:	d107      	bne.n	8008054 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008044:	4b56      	ldr	r3, [pc, #344]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800804c:	2b00      	cmp	r3, #0
 800804e:	d121      	bne.n	8008094 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008050:	2301      	movs	r3, #1
 8008052:	e09e      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	685b      	ldr	r3, [r3, #4]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d107      	bne.n	800806c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800805c:	4b50      	ldr	r3, [pc, #320]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008064:	2b00      	cmp	r3, #0
 8008066:	d115      	bne.n	8008094 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008068:	2301      	movs	r3, #1
 800806a:	e092      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d107      	bne.n	8008084 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008074:	4b4a      	ldr	r3, [pc, #296]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f003 0302 	and.w	r3, r3, #2
 800807c:	2b00      	cmp	r3, #0
 800807e:	d109      	bne.n	8008094 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008080:	2301      	movs	r3, #1
 8008082:	e086      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008084:	4b46      	ldr	r3, [pc, #280]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800808c:	2b00      	cmp	r3, #0
 800808e:	d101      	bne.n	8008094 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008090:	2301      	movs	r3, #1
 8008092:	e07e      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008094:	4b42      	ldr	r3, [pc, #264]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008096:	689b      	ldr	r3, [r3, #8]
 8008098:	f023 0203 	bic.w	r2, r3, #3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	493f      	ldr	r1, [pc, #252]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a6:	f7fe fa87 	bl	80065b8 <HAL_GetTick>
 80080aa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080ac:	e00a      	b.n	80080c4 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80080ae:	f7fe fa83 	bl	80065b8 <HAL_GetTick>
 80080b2:	4602      	mov	r2, r0
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	1ad3      	subs	r3, r2, r3
 80080b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080bc:	4293      	cmp	r3, r2
 80080be:	d901      	bls.n	80080c4 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e066      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80080c4:	4b36      	ldr	r3, [pc, #216]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 80080c6:	689b      	ldr	r3, [r3, #8]
 80080c8:	f003 020c 	and.w	r2, r3, #12
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	009b      	lsls	r3, r3, #2
 80080d2:	429a      	cmp	r2, r3
 80080d4:	d1eb      	bne.n	80080ae <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f003 0302 	and.w	r3, r3, #2
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d008      	beq.n	80080f4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80080e2:	4b2f      	ldr	r3, [pc, #188]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	689b      	ldr	r3, [r3, #8]
 80080ee:	492c      	ldr	r1, [pc, #176]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 80080f0:	4313      	orrs	r3, r2
 80080f2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80080f4:	4b29      	ldr	r3, [pc, #164]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f003 0307 	and.w	r3, r3, #7
 80080fc:	683a      	ldr	r2, [r7, #0]
 80080fe:	429a      	cmp	r2, r3
 8008100:	d210      	bcs.n	8008124 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008102:	4b26      	ldr	r3, [pc, #152]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f023 0207 	bic.w	r2, r3, #7
 800810a:	4924      	ldr	r1, [pc, #144]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	4313      	orrs	r3, r2
 8008110:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008112:	4b22      	ldr	r3, [pc, #136]	; (800819c <HAL_RCC_ClockConfig+0x1b0>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f003 0307 	and.w	r3, r3, #7
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	429a      	cmp	r2, r3
 800811e:	d001      	beq.n	8008124 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e036      	b.n	8008192 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	2b00      	cmp	r3, #0
 800812e:	d008      	beq.n	8008142 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008130:	4b1b      	ldr	r3, [pc, #108]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008132:	689b      	ldr	r3, [r3, #8]
 8008134:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	68db      	ldr	r3, [r3, #12]
 800813c:	4918      	ldr	r1, [pc, #96]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 800813e:	4313      	orrs	r3, r2
 8008140:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 0308 	and.w	r3, r3, #8
 800814a:	2b00      	cmp	r3, #0
 800814c:	d009      	beq.n	8008162 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800814e:	4b14      	ldr	r3, [pc, #80]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 8008150:	689b      	ldr	r3, [r3, #8]
 8008152:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	00db      	lsls	r3, r3, #3
 800815c:	4910      	ldr	r1, [pc, #64]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 800815e:	4313      	orrs	r3, r2
 8008160:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008162:	f000 f825 	bl	80081b0 <HAL_RCC_GetSysClockFreq>
 8008166:	4601      	mov	r1, r0
 8008168:	4b0d      	ldr	r3, [pc, #52]	; (80081a0 <HAL_RCC_ClockConfig+0x1b4>)
 800816a:	689b      	ldr	r3, [r3, #8]
 800816c:	091b      	lsrs	r3, r3, #4
 800816e:	f003 030f 	and.w	r3, r3, #15
 8008172:	4a0c      	ldr	r2, [pc, #48]	; (80081a4 <HAL_RCC_ClockConfig+0x1b8>)
 8008174:	5cd3      	ldrb	r3, [r2, r3]
 8008176:	f003 031f 	and.w	r3, r3, #31
 800817a:	fa21 f303 	lsr.w	r3, r1, r3
 800817e:	4a0a      	ldr	r2, [pc, #40]	; (80081a8 <HAL_RCC_ClockConfig+0x1bc>)
 8008180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008182:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <HAL_RCC_ClockConfig+0x1c0>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4618      	mov	r0, r3
 8008188:	f7fe f9ca 	bl	8006520 <HAL_InitTick>
 800818c:	4603      	mov	r3, r0
 800818e:	72fb      	strb	r3, [r7, #11]

  return status;
 8008190:	7afb      	ldrb	r3, [r7, #11]
}
 8008192:	4618      	mov	r0, r3
 8008194:	3710      	adds	r7, #16
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}
 800819a:	bf00      	nop
 800819c:	40022000 	.word	0x40022000
 80081a0:	40021000 	.word	0x40021000
 80081a4:	08013dc8 	.word	0x08013dc8
 80081a8:	20000008 	.word	0x20000008
 80081ac:	2000000c 	.word	0x2000000c

080081b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b089      	sub	sp, #36	; 0x24
 80081b4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80081b6:	2300      	movs	r3, #0
 80081b8:	61fb      	str	r3, [r7, #28]
 80081ba:	2300      	movs	r3, #0
 80081bc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80081be:	4b3d      	ldr	r3, [pc, #244]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80081c0:	689b      	ldr	r3, [r3, #8]
 80081c2:	f003 030c 	and.w	r3, r3, #12
 80081c6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80081c8:	4b3a      	ldr	r3, [pc, #232]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80081ca:	68db      	ldr	r3, [r3, #12]
 80081cc:	f003 0303 	and.w	r3, r3, #3
 80081d0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d005      	beq.n	80081e4 <HAL_RCC_GetSysClockFreq+0x34>
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	2b0c      	cmp	r3, #12
 80081dc:	d121      	bne.n	8008222 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d11e      	bne.n	8008222 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80081e4:	4b33      	ldr	r3, [pc, #204]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d107      	bne.n	8008200 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80081f0:	4b30      	ldr	r3, [pc, #192]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 80081f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	f003 030f 	and.w	r3, r3, #15
 80081fc:	61fb      	str	r3, [r7, #28]
 80081fe:	e005      	b.n	800820c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008200:	4b2c      	ldr	r3, [pc, #176]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	091b      	lsrs	r3, r3, #4
 8008206:	f003 030f 	and.w	r3, r3, #15
 800820a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800820c:	4a2a      	ldr	r2, [pc, #168]	; (80082b8 <HAL_RCC_GetSysClockFreq+0x108>)
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008214:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10d      	bne.n	8008238 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800821c:	69fb      	ldr	r3, [r7, #28]
 800821e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008220:	e00a      	b.n	8008238 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008222:	693b      	ldr	r3, [r7, #16]
 8008224:	2b04      	cmp	r3, #4
 8008226:	d102      	bne.n	800822e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008228:	4b24      	ldr	r3, [pc, #144]	; (80082bc <HAL_RCC_GetSysClockFreq+0x10c>)
 800822a:	61bb      	str	r3, [r7, #24]
 800822c:	e004      	b.n	8008238 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	2b08      	cmp	r3, #8
 8008232:	d101      	bne.n	8008238 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008234:	4b22      	ldr	r3, [pc, #136]	; (80082c0 <HAL_RCC_GetSysClockFreq+0x110>)
 8008236:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	2b0c      	cmp	r3, #12
 800823c:	d133      	bne.n	80082a6 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800823e:	4b1d      	ldr	r3, [pc, #116]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8008240:	68db      	ldr	r3, [r3, #12]
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2b02      	cmp	r3, #2
 800824c:	d002      	beq.n	8008254 <HAL_RCC_GetSysClockFreq+0xa4>
 800824e:	2b03      	cmp	r3, #3
 8008250:	d003      	beq.n	800825a <HAL_RCC_GetSysClockFreq+0xaa>
 8008252:	e005      	b.n	8008260 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008254:	4b19      	ldr	r3, [pc, #100]	; (80082bc <HAL_RCC_GetSysClockFreq+0x10c>)
 8008256:	617b      	str	r3, [r7, #20]
      break;
 8008258:	e005      	b.n	8008266 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800825a:	4b19      	ldr	r3, [pc, #100]	; (80082c0 <HAL_RCC_GetSysClockFreq+0x110>)
 800825c:	617b      	str	r3, [r7, #20]
      break;
 800825e:	e002      	b.n	8008266 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008260:	69fb      	ldr	r3, [r7, #28]
 8008262:	617b      	str	r3, [r7, #20]
      break;
 8008264:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008266:	4b13      	ldr	r3, [pc, #76]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8008268:	68db      	ldr	r3, [r3, #12]
 800826a:	091b      	lsrs	r3, r3, #4
 800826c:	f003 0307 	and.w	r3, r3, #7
 8008270:	3301      	adds	r3, #1
 8008272:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008274:	4b0f      	ldr	r3, [pc, #60]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	0a1b      	lsrs	r3, r3, #8
 800827a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800827e:	697a      	ldr	r2, [r7, #20]
 8008280:	fb02 f203 	mul.w	r2, r2, r3
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	fbb2 f3f3 	udiv	r3, r2, r3
 800828a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800828c:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <HAL_RCC_GetSysClockFreq+0x104>)
 800828e:	68db      	ldr	r3, [r3, #12]
 8008290:	0e5b      	lsrs	r3, r3, #25
 8008292:	f003 0303 	and.w	r3, r3, #3
 8008296:	3301      	adds	r3, #1
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800829c:	697a      	ldr	r2, [r7, #20]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a4:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80082a6:	69bb      	ldr	r3, [r7, #24]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3724      	adds	r7, #36	; 0x24
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr
 80082b4:	40021000 	.word	0x40021000
 80082b8:	08013de0 	.word	0x08013de0
 80082bc:	00f42400 	.word	0x00f42400
 80082c0:	007a1200 	.word	0x007a1200

080082c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082c8:	4b03      	ldr	r3, [pc, #12]	; (80082d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082ca:	681b      	ldr	r3, [r3, #0]
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr
 80082d6:	bf00      	nop
 80082d8:	20000008 	.word	0x20000008

080082dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80082e0:	f7ff fff0 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 80082e4:	4601      	mov	r1, r0
 80082e6:	4b06      	ldr	r3, [pc, #24]	; (8008300 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082e8:	689b      	ldr	r3, [r3, #8]
 80082ea:	0a1b      	lsrs	r3, r3, #8
 80082ec:	f003 0307 	and.w	r3, r3, #7
 80082f0:	4a04      	ldr	r2, [pc, #16]	; (8008304 <HAL_RCC_GetPCLK1Freq+0x28>)
 80082f2:	5cd3      	ldrb	r3, [r2, r3]
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	bd80      	pop	{r7, pc}
 8008300:	40021000 	.word	0x40021000
 8008304:	08013dd8 	.word	0x08013dd8

08008308 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800830c:	f7ff ffda 	bl	80082c4 <HAL_RCC_GetHCLKFreq>
 8008310:	4601      	mov	r1, r0
 8008312:	4b06      	ldr	r3, [pc, #24]	; (800832c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008314:	689b      	ldr	r3, [r3, #8]
 8008316:	0adb      	lsrs	r3, r3, #11
 8008318:	f003 0307 	and.w	r3, r3, #7
 800831c:	4a04      	ldr	r2, [pc, #16]	; (8008330 <HAL_RCC_GetPCLK2Freq+0x28>)
 800831e:	5cd3      	ldrb	r3, [r2, r3]
 8008320:	f003 031f 	and.w	r3, r3, #31
 8008324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008328:	4618      	mov	r0, r3
 800832a:	bd80      	pop	{r7, pc}
 800832c:	40021000 	.word	0x40021000
 8008330:	08013dd8 	.word	0x08013dd8

08008334 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	b086      	sub	sp, #24
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800833c:	2300      	movs	r3, #0
 800833e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8008340:	4b2a      	ldr	r3, [pc, #168]	; (80083ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008342:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008348:	2b00      	cmp	r3, #0
 800834a:	d003      	beq.n	8008354 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800834c:	f7ff f9c4 	bl	80076d8 <HAL_PWREx_GetVoltageRange>
 8008350:	6178      	str	r0, [r7, #20]
 8008352:	e014      	b.n	800837e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8008354:	4b25      	ldr	r3, [pc, #148]	; (80083ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008358:	4a24      	ldr	r2, [pc, #144]	; (80083ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800835a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800835e:	6593      	str	r3, [r2, #88]	; 0x58
 8008360:	4b22      	ldr	r3, [pc, #136]	; (80083ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008368:	60fb      	str	r3, [r7, #12]
 800836a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800836c:	f7ff f9b4 	bl	80076d8 <HAL_PWREx_GetVoltageRange>
 8008370:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8008372:	4b1e      	ldr	r3, [pc, #120]	; (80083ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008376:	4a1d      	ldr	r2, [pc, #116]	; (80083ec <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008378:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800837c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800837e:	697b      	ldr	r3, [r7, #20]
 8008380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008384:	d10b      	bne.n	800839e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2b80      	cmp	r3, #128	; 0x80
 800838a:	d919      	bls.n	80083c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2ba0      	cmp	r3, #160	; 0xa0
 8008390:	d902      	bls.n	8008398 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8008392:	2302      	movs	r3, #2
 8008394:	613b      	str	r3, [r7, #16]
 8008396:	e013      	b.n	80083c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008398:	2301      	movs	r3, #1
 800839a:	613b      	str	r3, [r7, #16]
 800839c:	e010      	b.n	80083c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2b80      	cmp	r3, #128	; 0x80
 80083a2:	d902      	bls.n	80083aa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80083a4:	2303      	movs	r3, #3
 80083a6:	613b      	str	r3, [r7, #16]
 80083a8:	e00a      	b.n	80083c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2b80      	cmp	r3, #128	; 0x80
 80083ae:	d102      	bne.n	80083b6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80083b0:	2302      	movs	r3, #2
 80083b2:	613b      	str	r3, [r7, #16]
 80083b4:	e004      	b.n	80083c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2b70      	cmp	r3, #112	; 0x70
 80083ba:	d101      	bne.n	80083c0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80083bc:	2301      	movs	r3, #1
 80083be:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80083c0:	4b0b      	ldr	r3, [pc, #44]	; (80083f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f023 0207 	bic.w	r2, r3, #7
 80083c8:	4909      	ldr	r1, [pc, #36]	; (80083f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 0307 	and.w	r3, r3, #7
 80083d8:	693a      	ldr	r2, [r7, #16]
 80083da:	429a      	cmp	r2, r3
 80083dc:	d001      	beq.n	80083e2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80083e2:	2300      	movs	r3, #0
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3718      	adds	r7, #24
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}
 80083ec:	40021000 	.word	0x40021000
 80083f0:	40022000 	.word	0x40022000

080083f4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b086      	sub	sp, #24
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80083fc:	2300      	movs	r3, #0
 80083fe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008400:	2300      	movs	r3, #0
 8008402:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800840c:	2b00      	cmp	r3, #0
 800840e:	d03f      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008414:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008418:	d01c      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800841a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800841e:	d802      	bhi.n	8008426 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00e      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8008424:	e01f      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8008426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800842a:	d003      	beq.n	8008434 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800842c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8008430:	d01c      	beq.n	800846c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8008432:	e018      	b.n	8008466 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8008434:	4b85      	ldr	r3, [pc, #532]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	4a84      	ldr	r2, [pc, #528]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800843a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800843e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008440:	e015      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	3304      	adds	r3, #4
 8008446:	2100      	movs	r1, #0
 8008448:	4618      	mov	r0, r3
 800844a:	f000 facb 	bl	80089e4 <RCCEx_PLLSAI1_Config>
 800844e:	4603      	mov	r3, r0
 8008450:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008452:	e00c      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	3320      	adds	r3, #32
 8008458:	2100      	movs	r1, #0
 800845a:	4618      	mov	r0, r3
 800845c:	f000 fbb2 	bl	8008bc4 <RCCEx_PLLSAI2_Config>
 8008460:	4603      	mov	r3, r0
 8008462:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8008464:	e003      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008466:	2301      	movs	r3, #1
 8008468:	74fb      	strb	r3, [r7, #19]
      break;
 800846a:	e000      	b.n	800846e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800846c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800846e:	7cfb      	ldrb	r3, [r7, #19]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d10b      	bne.n	800848c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008474:	4b75      	ldr	r3, [pc, #468]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800847a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008482:	4972      	ldr	r1, [pc, #456]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008484:	4313      	orrs	r3, r2
 8008486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800848a:	e001      	b.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800848c:	7cfb      	ldrb	r3, [r7, #19]
 800848e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008498:	2b00      	cmp	r3, #0
 800849a:	d03f      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084a4:	d01c      	beq.n	80084e0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 80084a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80084aa:	d802      	bhi.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d00e      	beq.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0xda>
 80084b0:	e01f      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80084b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80084b6:	d003      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80084b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80084bc:	d01c      	beq.n	80084f8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 80084be:	e018      	b.n	80084f2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80084c0:	4b62      	ldr	r3, [pc, #392]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	4a61      	ldr	r2, [pc, #388]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80084c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084ca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084cc:	e015      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	3304      	adds	r3, #4
 80084d2:	2100      	movs	r1, #0
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fa85 	bl	80089e4 <RCCEx_PLLSAI1_Config>
 80084da:	4603      	mov	r3, r0
 80084dc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084de:	e00c      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	3320      	adds	r3, #32
 80084e4:	2100      	movs	r1, #0
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 fb6c 	bl	8008bc4 <RCCEx_PLLSAI2_Config>
 80084ec:	4603      	mov	r3, r0
 80084ee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80084f0:	e003      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	74fb      	strb	r3, [r7, #19]
      break;
 80084f6:	e000      	b.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80084f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084fa:	7cfb      	ldrb	r3, [r7, #19]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10b      	bne.n	8008518 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008500:	4b52      	ldr	r3, [pc, #328]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008506:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800850e:	494f      	ldr	r1, [pc, #316]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008510:	4313      	orrs	r3, r2
 8008512:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8008516:	e001      	b.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008518:	7cfb      	ldrb	r3, [r7, #19]
 800851a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008524:	2b00      	cmp	r3, #0
 8008526:	f000 80a0 	beq.w	800866a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800852a:	2300      	movs	r3, #0
 800852c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800852e:	4b47      	ldr	r3, [pc, #284]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008530:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008536:	2b00      	cmp	r3, #0
 8008538:	d101      	bne.n	800853e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800853a:	2301      	movs	r3, #1
 800853c:	e000      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800853e:	2300      	movs	r3, #0
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00d      	beq.n	8008560 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008544:	4b41      	ldr	r3, [pc, #260]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008548:	4a40      	ldr	r2, [pc, #256]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800854a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800854e:	6593      	str	r3, [r2, #88]	; 0x58
 8008550:	4b3e      	ldr	r3, [pc, #248]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008554:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008558:	60bb      	str	r3, [r7, #8]
 800855a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800855c:	2301      	movs	r3, #1
 800855e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008560:	4b3b      	ldr	r3, [pc, #236]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	4a3a      	ldr	r2, [pc, #232]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8008566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800856a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800856c:	f7fe f824 	bl	80065b8 <HAL_GetTick>
 8008570:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008572:	e009      	b.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008574:	f7fe f820 	bl	80065b8 <HAL_GetTick>
 8008578:	4602      	mov	r2, r0
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	2b02      	cmp	r3, #2
 8008580:	d902      	bls.n	8008588 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8008582:	2303      	movs	r3, #3
 8008584:	74fb      	strb	r3, [r7, #19]
        break;
 8008586:	e005      	b.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008588:	4b31      	ldr	r3, [pc, #196]	; (8008650 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008590:	2b00      	cmp	r3, #0
 8008592:	d0ef      	beq.n	8008574 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8008594:	7cfb      	ldrb	r3, [r7, #19]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d15c      	bne.n	8008654 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800859a:	4b2c      	ldr	r3, [pc, #176]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800859c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80085a4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80085a6:	697b      	ldr	r3, [r7, #20]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d01f      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085b2:	697a      	ldr	r2, [r7, #20]
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d019      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80085b8:	4b24      	ldr	r3, [pc, #144]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80085c4:	4b21      	ldr	r3, [pc, #132]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ca:	4a20      	ldr	r2, [pc, #128]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80085d4:	4b1d      	ldr	r3, [pc, #116]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085da:	4a1c      	ldr	r2, [pc, #112]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80085e4:	4a19      	ldr	r2, [pc, #100]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80085ec:	697b      	ldr	r3, [r7, #20]
 80085ee:	f003 0301 	and.w	r3, r3, #1
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d016      	beq.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085f6:	f7fd ffdf 	bl	80065b8 <HAL_GetTick>
 80085fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80085fc:	e00b      	b.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085fe:	f7fd ffdb 	bl	80065b8 <HAL_GetTick>
 8008602:	4602      	mov	r2, r0
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	1ad3      	subs	r3, r2, r3
 8008608:	f241 3288 	movw	r2, #5000	; 0x1388
 800860c:	4293      	cmp	r3, r2
 800860e:	d902      	bls.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	74fb      	strb	r3, [r7, #19]
            break;
 8008614:	e006      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008616:	4b0d      	ldr	r3, [pc, #52]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8008618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800861c:	f003 0302 	and.w	r3, r3, #2
 8008620:	2b00      	cmp	r3, #0
 8008622:	d0ec      	beq.n	80085fe <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8008624:	7cfb      	ldrb	r3, [r7, #19]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d10c      	bne.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800862a:	4b08      	ldr	r3, [pc, #32]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800862c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008630:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800863a:	4904      	ldr	r1, [pc, #16]	; (800864c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800863c:	4313      	orrs	r3, r2
 800863e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008642:	e009      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008644:	7cfb      	ldrb	r3, [r7, #19]
 8008646:	74bb      	strb	r3, [r7, #18]
 8008648:	e006      	b.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800864a:	bf00      	nop
 800864c:	40021000 	.word	0x40021000
 8008650:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008654:	7cfb      	ldrb	r3, [r7, #19]
 8008656:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008658:	7c7b      	ldrb	r3, [r7, #17]
 800865a:	2b01      	cmp	r3, #1
 800865c:	d105      	bne.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800865e:	4ba6      	ldr	r3, [pc, #664]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008662:	4aa5      	ldr	r2, [pc, #660]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008664:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008668:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f003 0301 	and.w	r3, r3, #1
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008676:	4ba0      	ldr	r3, [pc, #640]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867c:	f023 0203 	bic.w	r2, r3, #3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008684:	499c      	ldr	r1, [pc, #624]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008686:	4313      	orrs	r3, r2
 8008688:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f003 0302 	and.w	r3, r3, #2
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008698:	4b97      	ldr	r3, [pc, #604]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800869a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800869e:	f023 020c 	bic.w	r2, r3, #12
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a6:	4994      	ldr	r1, [pc, #592]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f003 0304 	and.w	r3, r3, #4
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d00a      	beq.n	80086d0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80086ba:	4b8f      	ldr	r3, [pc, #572]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80086bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086c8:	498b      	ldr	r1, [pc, #556]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0308 	and.w	r3, r3, #8
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d00a      	beq.n	80086f2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086dc:	4b86      	ldr	r3, [pc, #536]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80086de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086ea:	4983      	ldr	r1, [pc, #524]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f003 0310 	and.w	r3, r3, #16
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d00a      	beq.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086fe:	4b7e      	ldr	r3, [pc, #504]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008700:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008704:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800870c:	497a      	ldr	r1, [pc, #488]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800870e:	4313      	orrs	r3, r2
 8008710:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f003 0320 	and.w	r3, r3, #32
 800871c:	2b00      	cmp	r3, #0
 800871e:	d00a      	beq.n	8008736 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008720:	4b75      	ldr	r3, [pc, #468]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008722:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008726:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800872e:	4972      	ldr	r1, [pc, #456]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008742:	4b6d      	ldr	r3, [pc, #436]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008748:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008750:	4969      	ldr	r1, [pc, #420]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008752:	4313      	orrs	r3, r2
 8008754:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008760:	2b00      	cmp	r3, #0
 8008762:	d00a      	beq.n	800877a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8008764:	4b64      	ldr	r3, [pc, #400]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800876a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008772:	4961      	ldr	r1, [pc, #388]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008774:	4313      	orrs	r3, r2
 8008776:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008782:	2b00      	cmp	r3, #0
 8008784:	d00a      	beq.n	800879c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008786:	4b5c      	ldr	r3, [pc, #368]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800878c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008794:	4958      	ldr	r1, [pc, #352]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008796:	4313      	orrs	r3, r2
 8008798:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d00a      	beq.n	80087be <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80087a8:	4b53      	ldr	r3, [pc, #332]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087b6:	4950      	ldr	r1, [pc, #320]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087b8:	4313      	orrs	r3, r2
 80087ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d00a      	beq.n	80087e0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80087ca:	4b4b      	ldr	r3, [pc, #300]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80087d8:	4947      	ldr	r1, [pc, #284]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087da:	4313      	orrs	r3, r2
 80087dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d00a      	beq.n	8008802 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80087ec:	4b42      	ldr	r3, [pc, #264]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80087f2:	f023 0203 	bic.w	r2, r3, #3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80087fa:	493f      	ldr	r1, [pc, #252]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80087fc:	4313      	orrs	r3, r2
 80087fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800880a:	2b00      	cmp	r3, #0
 800880c:	d028      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800880e:	4b3a      	ldr	r3, [pc, #232]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008814:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881c:	4936      	ldr	r1, [pc, #216]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800881e:	4313      	orrs	r3, r2
 8008820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008828:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800882c:	d106      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800882e:	4b32      	ldr	r3, [pc, #200]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008830:	68db      	ldr	r3, [r3, #12]
 8008832:	4a31      	ldr	r2, [pc, #196]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008834:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008838:	60d3      	str	r3, [r2, #12]
 800883a:	e011      	b.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008840:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008844:	d10c      	bne.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	3304      	adds	r3, #4
 800884a:	2101      	movs	r1, #1
 800884c:	4618      	mov	r0, r3
 800884e:	f000 f8c9 	bl	80089e4 <RCCEx_PLLSAI1_Config>
 8008852:	4603      	mov	r3, r0
 8008854:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8008856:	7cfb      	ldrb	r3, [r7, #19]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d001      	beq.n	8008860 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800885c:	7cfb      	ldrb	r3, [r7, #19]
 800885e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008868:	2b00      	cmp	r3, #0
 800886a:	d028      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800886c:	4b22      	ldr	r3, [pc, #136]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800886e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008872:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800887a:	491f      	ldr	r1, [pc, #124]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800887c:	4313      	orrs	r3, r2
 800887e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008886:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800888a:	d106      	bne.n	800889a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800888c:	4b1a      	ldr	r3, [pc, #104]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4a19      	ldr	r2, [pc, #100]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8008892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008896:	60d3      	str	r3, [r2, #12]
 8008898:	e011      	b.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800889e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088a2:	d10c      	bne.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	3304      	adds	r3, #4
 80088a8:	2101      	movs	r1, #1
 80088aa:	4618      	mov	r0, r3
 80088ac:	f000 f89a 	bl	80089e4 <RCCEx_PLLSAI1_Config>
 80088b0:	4603      	mov	r3, r0
 80088b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088b4:	7cfb      	ldrb	r3, [r7, #19]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d001      	beq.n	80088be <HAL_RCCEx_PeriphCLKConfig+0x4ca>
      {
        /* set overall return value */
        status = ret;
 80088ba:	7cfb      	ldrb	r3, [r7, #19]
 80088bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d02a      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088ca:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088d8:	4907      	ldr	r1, [pc, #28]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80088e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088e8:	d108      	bne.n	80088fc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088ea:	4b03      	ldr	r3, [pc, #12]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088ec:	68db      	ldr	r3, [r3, #12]
 80088ee:	4a02      	ldr	r2, [pc, #8]	; (80088f8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80088f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088f4:	60d3      	str	r3, [r2, #12]
 80088f6:	e013      	b.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80088f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008900:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008904:	d10c      	bne.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	3304      	adds	r3, #4
 800890a:	2101      	movs	r1, #1
 800890c:	4618      	mov	r0, r3
 800890e:	f000 f869 	bl	80089e4 <RCCEx_PLLSAI1_Config>
 8008912:	4603      	mov	r3, r0
 8008914:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008916:	7cfb      	ldrb	r3, [r7, #19]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* set overall return value */
        status = ret;
 800891c:	7cfb      	ldrb	r3, [r7, #19]
 800891e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008928:	2b00      	cmp	r3, #0
 800892a:	d02f      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800892c:	4b2c      	ldr	r3, [pc, #176]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800892e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008932:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800893a:	4929      	ldr	r1, [pc, #164]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800893c:	4313      	orrs	r3, r2
 800893e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008946:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800894a:	d10d      	bne.n	8008968 <HAL_RCCEx_PeriphCLKConfig+0x574>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	3304      	adds	r3, #4
 8008950:	2102      	movs	r1, #2
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f846 	bl	80089e4 <RCCEx_PLLSAI1_Config>
 8008958:	4603      	mov	r3, r0
 800895a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800895c:	7cfb      	ldrb	r3, [r7, #19]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d014      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8008962:	7cfb      	ldrb	r3, [r7, #19]
 8008964:	74bb      	strb	r3, [r7, #18]
 8008966:	e011      	b.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800896c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008970:	d10c      	bne.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	3320      	adds	r3, #32
 8008976:	2102      	movs	r1, #2
 8008978:	4618      	mov	r0, r3
 800897a:	f000 f923 	bl	8008bc4 <RCCEx_PLLSAI2_Config>
 800897e:	4603      	mov	r3, r0
 8008980:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008982:	7cfb      	ldrb	r3, [r7, #19]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d001      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* set overall return value */
        status = ret;
 8008988:	7cfb      	ldrb	r3, [r7, #19]
 800898a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008994:	2b00      	cmp	r3, #0
 8008996:	d00b      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008998:	4b11      	ldr	r3, [pc, #68]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 800899a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800899e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80089a8:	490d      	ldr	r1, [pc, #52]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80089aa:	4313      	orrs	r3, r2
 80089ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d00b      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80089bc:	4b08      	ldr	r3, [pc, #32]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80089be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80089cc:	4904      	ldr	r1, [pc, #16]	; (80089e0 <HAL_RCCEx_PeriphCLKConfig+0x5ec>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80089d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3718      	adds	r7, #24
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	40021000 	.word	0x40021000

080089e4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
 80089ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80089f2:	4b73      	ldr	r3, [pc, #460]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80089f4:	68db      	ldr	r3, [r3, #12]
 80089f6:	f003 0303 	and.w	r3, r3, #3
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d018      	beq.n	8008a30 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80089fe:	4b70      	ldr	r3, [pc, #448]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a00:	68db      	ldr	r3, [r3, #12]
 8008a02:	f003 0203 	and.w	r2, r3, #3
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d10d      	bne.n	8008a2a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
       ||
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d009      	beq.n	8008a2a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8008a16:	4b6a      	ldr	r3, [pc, #424]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a18:	68db      	ldr	r3, [r3, #12]
 8008a1a:	091b      	lsrs	r3, r3, #4
 8008a1c:	f003 0307 	and.w	r3, r3, #7
 8008a20:	1c5a      	adds	r2, r3, #1
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	685b      	ldr	r3, [r3, #4]
       ||
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d044      	beq.n	8008ab4 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
 8008a2e:	e041      	b.n	8008ab4 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	2b02      	cmp	r3, #2
 8008a36:	d00c      	beq.n	8008a52 <RCCEx_PLLSAI1_Config+0x6e>
 8008a38:	2b03      	cmp	r3, #3
 8008a3a:	d013      	beq.n	8008a64 <RCCEx_PLLSAI1_Config+0x80>
 8008a3c:	2b01      	cmp	r3, #1
 8008a3e:	d120      	bne.n	8008a82 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008a40:	4b5f      	ldr	r3, [pc, #380]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f003 0302 	and.w	r3, r3, #2
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d11d      	bne.n	8008a88 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a50:	e01a      	b.n	8008a88 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a52:	4b5b      	ldr	r3, [pc, #364]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d116      	bne.n	8008a8c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a62:	e013      	b.n	8008a8c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008a64:	4b56      	ldr	r3, [pc, #344]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10f      	bne.n	8008a90 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a70:	4b53      	ldr	r3, [pc, #332]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d109      	bne.n	8008a90 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a80:	e006      	b.n	8008a90 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8008a82:	2301      	movs	r3, #1
 8008a84:	73fb      	strb	r3, [r7, #15]
      break;
 8008a86:	e004      	b.n	8008a92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008a88:	bf00      	nop
 8008a8a:	e002      	b.n	8008a92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008a8c:	bf00      	nop
 8008a8e:	e000      	b.n	8008a92 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8008a90:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a92:	7bfb      	ldrb	r3, [r7, #15]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10d      	bne.n	8008ab4 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a98:	4b49      	ldr	r3, [pc, #292]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008a9a:	68db      	ldr	r3, [r3, #12]
 8008a9c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6819      	ldr	r1, [r3, #0]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	3b01      	subs	r3, #1
 8008aaa:	011b      	lsls	r3, r3, #4
 8008aac:	430b      	orrs	r3, r1
 8008aae:	4944      	ldr	r1, [pc, #272]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d17c      	bne.n	8008bb4 <RCCEx_PLLSAI1_Config+0x1d0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008aba:	4b41      	ldr	r3, [pc, #260]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a40      	ldr	r2, [pc, #256]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ac0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008ac4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ac6:	f7fd fd77 	bl	80065b8 <HAL_GetTick>
 8008aca:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008acc:	e009      	b.n	8008ae2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008ace:	f7fd fd73 	bl	80065b8 <HAL_GetTick>
 8008ad2:	4602      	mov	r2, r0
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	1ad3      	subs	r3, r2, r3
 8008ad8:	2b02      	cmp	r3, #2
 8008ada:	d902      	bls.n	8008ae2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008adc:	2303      	movs	r3, #3
 8008ade:	73fb      	strb	r3, [r7, #15]
        break;
 8008ae0:	e005      	b.n	8008aee <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008ae2:	4b37      	ldr	r3, [pc, #220]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d1ef      	bne.n	8008ace <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008aee:	7bfb      	ldrb	r3, [r7, #15]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d15f      	bne.n	8008bb4 <RCCEx_PLLSAI1_Config+0x1d0>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d110      	bne.n	8008b1c <RCCEx_PLLSAI1_Config+0x138>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008afa:	4b31      	ldr	r3, [pc, #196]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008afc:	691b      	ldr	r3, [r3, #16]
 8008afe:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008b02:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b06:	687a      	ldr	r2, [r7, #4]
 8008b08:	6892      	ldr	r2, [r2, #8]
 8008b0a:	0211      	lsls	r1, r2, #8
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	68d2      	ldr	r2, [r2, #12]
 8008b10:	06d2      	lsls	r2, r2, #27
 8008b12:	430a      	orrs	r2, r1
 8008b14:	492a      	ldr	r1, [pc, #168]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	610b      	str	r3, [r1, #16]
 8008b1a:	e027      	b.n	8008b6c <RCCEx_PLLSAI1_Config+0x188>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	2b01      	cmp	r3, #1
 8008b20:	d112      	bne.n	8008b48 <RCCEx_PLLSAI1_Config+0x164>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b22:	4b27      	ldr	r3, [pc, #156]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b24:	691b      	ldr	r3, [r3, #16]
 8008b26:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008b2a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	6892      	ldr	r2, [r2, #8]
 8008b32:	0211      	lsls	r1, r2, #8
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	6912      	ldr	r2, [r2, #16]
 8008b38:	0852      	lsrs	r2, r2, #1
 8008b3a:	3a01      	subs	r2, #1
 8008b3c:	0552      	lsls	r2, r2, #21
 8008b3e:	430a      	orrs	r2, r1
 8008b40:	491f      	ldr	r1, [pc, #124]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b42:	4313      	orrs	r3, r2
 8008b44:	610b      	str	r3, [r1, #16]
 8008b46:	e011      	b.n	8008b6c <RCCEx_PLLSAI1_Config+0x188>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008b48:	4b1d      	ldr	r3, [pc, #116]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b4a:	691b      	ldr	r3, [r3, #16]
 8008b4c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b54:	687a      	ldr	r2, [r7, #4]
 8008b56:	6892      	ldr	r2, [r2, #8]
 8008b58:	0211      	lsls	r1, r2, #8
 8008b5a:	687a      	ldr	r2, [r7, #4]
 8008b5c:	6952      	ldr	r2, [r2, #20]
 8008b5e:	0852      	lsrs	r2, r2, #1
 8008b60:	3a01      	subs	r2, #1
 8008b62:	0652      	lsls	r2, r2, #25
 8008b64:	430a      	orrs	r2, r1
 8008b66:	4916      	ldr	r1, [pc, #88]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008b6c:	4b14      	ldr	r3, [pc, #80]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	4a13      	ldr	r2, [pc, #76]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b72:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b78:	f7fd fd1e 	bl	80065b8 <HAL_GetTick>
 8008b7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b7e:	e009      	b.n	8008b94 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b80:	f7fd fd1a 	bl	80065b8 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d902      	bls.n	8008b94 <RCCEx_PLLSAI1_Config+0x1b0>
        {
          status = HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	73fb      	strb	r3, [r7, #15]
          break;
 8008b92:	e005      	b.n	8008ba0 <RCCEx_PLLSAI1_Config+0x1bc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b94:	4b0a      	ldr	r3, [pc, #40]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d0ef      	beq.n	8008b80 <RCCEx_PLLSAI1_Config+0x19c>
        }
      }

      if(status == HAL_OK)
 8008ba0:	7bfb      	ldrb	r3, [r7, #15]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d106      	bne.n	8008bb4 <RCCEx_PLLSAI1_Config+0x1d0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008ba6:	4b06      	ldr	r3, [pc, #24]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008ba8:	691a      	ldr	r2, [r3, #16]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	4904      	ldr	r1, [pc, #16]	; (8008bc0 <RCCEx_PLLSAI1_Config+0x1dc>)
 8008bb0:	4313      	orrs	r3, r2
 8008bb2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008bb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	40021000 	.word	0x40021000

08008bc4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008bce:	2300      	movs	r3, #0
 8008bd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8008bd2:	4b68      	ldr	r3, [pc, #416]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	f003 0303 	and.w	r3, r3, #3
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d018      	beq.n	8008c10 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8008bde:	4b65      	ldr	r3, [pc, #404]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008be0:	68db      	ldr	r3, [r3, #12]
 8008be2:	f003 0203 	and.w	r2, r3, #3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d10d      	bne.n	8008c0a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
       ||
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d009      	beq.n	8008c0a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8008bf6:	4b5f      	ldr	r3, [pc, #380]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008bf8:	68db      	ldr	r3, [r3, #12]
 8008bfa:	091b      	lsrs	r3, r3, #4
 8008bfc:	f003 0307 	and.w	r3, r3, #7
 8008c00:	1c5a      	adds	r2, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	685b      	ldr	r3, [r3, #4]
       ||
 8008c06:	429a      	cmp	r2, r3
 8008c08:	d044      	beq.n	8008c94 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	73fb      	strb	r3, [r7, #15]
 8008c0e:	e041      	b.n	8008c94 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	2b02      	cmp	r3, #2
 8008c16:	d00c      	beq.n	8008c32 <RCCEx_PLLSAI2_Config+0x6e>
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d013      	beq.n	8008c44 <RCCEx_PLLSAI2_Config+0x80>
 8008c1c:	2b01      	cmp	r3, #1
 8008c1e:	d120      	bne.n	8008c62 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8008c20:	4b54      	ldr	r3, [pc, #336]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	f003 0302 	and.w	r3, r3, #2
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d11d      	bne.n	8008c68 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c30:	e01a      	b.n	8008c68 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008c32:	4b50      	ldr	r3, [pc, #320]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d116      	bne.n	8008c6c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8008c3e:	2301      	movs	r3, #1
 8008c40:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008c42:	e013      	b.n	8008c6c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008c44:	4b4b      	ldr	r3, [pc, #300]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d10f      	bne.n	8008c70 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008c50:	4b48      	ldr	r3, [pc, #288]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d109      	bne.n	8008c70 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008c60:	e006      	b.n	8008c70 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	73fb      	strb	r3, [r7, #15]
      break;
 8008c66:	e004      	b.n	8008c72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008c68:	bf00      	nop
 8008c6a:	e002      	b.n	8008c72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008c6c:	bf00      	nop
 8008c6e:	e000      	b.n	8008c72 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8008c70:	bf00      	nop
    }

    if(status == HAL_OK)
 8008c72:	7bfb      	ldrb	r3, [r7, #15]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d10d      	bne.n	8008c94 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008c78:	4b3e      	ldr	r3, [pc, #248]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c7a:	68db      	ldr	r3, [r3, #12]
 8008c7c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	6819      	ldr	r1, [r3, #0]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685b      	ldr	r3, [r3, #4]
 8008c88:	3b01      	subs	r3, #1
 8008c8a:	011b      	lsls	r3, r3, #4
 8008c8c:	430b      	orrs	r3, r1
 8008c8e:	4939      	ldr	r1, [pc, #228]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c90:	4313      	orrs	r3, r2
 8008c92:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008c94:	7bfb      	ldrb	r3, [r7, #15]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d166      	bne.n	8008d68 <RCCEx_PLLSAI2_Config+0x1a4>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8008c9a:	4b36      	ldr	r3, [pc, #216]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	4a35      	ldr	r2, [pc, #212]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008ca0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ca4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ca6:	f7fd fc87 	bl	80065b8 <HAL_GetTick>
 8008caa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008cac:	e009      	b.n	8008cc2 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008cae:	f7fd fc83 	bl	80065b8 <HAL_GetTick>
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	1ad3      	subs	r3, r2, r3
 8008cb8:	2b02      	cmp	r3, #2
 8008cba:	d902      	bls.n	8008cc2 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8008cbc:	2303      	movs	r3, #3
 8008cbe:	73fb      	strb	r3, [r7, #15]
        break;
 8008cc0:	e005      	b.n	8008cce <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8008cc2:	4b2c      	ldr	r3, [pc, #176]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1ef      	bne.n	8008cae <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8008cce:	7bfb      	ldrb	r3, [r7, #15]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d149      	bne.n	8008d68 <RCCEx_PLLSAI2_Config+0x1a4>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d110      	bne.n	8008cfc <RCCEx_PLLSAI2_Config+0x138>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008cda:	4b26      	ldr	r3, [pc, #152]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008cdc:	695b      	ldr	r3, [r3, #20]
 8008cde:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008ce2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ce6:	687a      	ldr	r2, [r7, #4]
 8008ce8:	6892      	ldr	r2, [r2, #8]
 8008cea:	0211      	lsls	r1, r2, #8
 8008cec:	687a      	ldr	r2, [r7, #4]
 8008cee:	68d2      	ldr	r2, [r2, #12]
 8008cf0:	06d2      	lsls	r2, r2, #27
 8008cf2:	430a      	orrs	r2, r1
 8008cf4:	491f      	ldr	r1, [pc, #124]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008cf6:	4313      	orrs	r3, r2
 8008cf8:	614b      	str	r3, [r1, #20]
 8008cfa:	e011      	b.n	8008d20 <RCCEx_PLLSAI2_Config+0x15c>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8008cfc:	4b1d      	ldr	r3, [pc, #116]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008cfe:	695b      	ldr	r3, [r3, #20]
 8008d00:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d04:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	6892      	ldr	r2, [r2, #8]
 8008d0c:	0211      	lsls	r1, r2, #8
 8008d0e:	687a      	ldr	r2, [r7, #4]
 8008d10:	6912      	ldr	r2, [r2, #16]
 8008d12:	0852      	lsrs	r2, r2, #1
 8008d14:	3a01      	subs	r2, #1
 8008d16:	0652      	lsls	r2, r2, #25
 8008d18:	430a      	orrs	r2, r1
 8008d1a:	4916      	ldr	r1, [pc, #88]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d1c:	4313      	orrs	r3, r2
 8008d1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8008d20:	4b14      	ldr	r3, [pc, #80]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	4a13      	ldr	r2, [pc, #76]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008d2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d2c:	f7fd fc44 	bl	80065b8 <HAL_GetTick>
 8008d30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008d32:	e009      	b.n	8008d48 <RCCEx_PLLSAI2_Config+0x184>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8008d34:	f7fd fc40 	bl	80065b8 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d902      	bls.n	8008d48 <RCCEx_PLLSAI2_Config+0x184>
        {
          status = HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	73fb      	strb	r3, [r7, #15]
          break;
 8008d46:	e005      	b.n	8008d54 <RCCEx_PLLSAI2_Config+0x190>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8008d48:	4b0a      	ldr	r3, [pc, #40]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d0ef      	beq.n	8008d34 <RCCEx_PLLSAI2_Config+0x170>
        }
      }

      if(status == HAL_OK)
 8008d54:	7bfb      	ldrb	r3, [r7, #15]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d106      	bne.n	8008d68 <RCCEx_PLLSAI2_Config+0x1a4>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8008d5a:	4b06      	ldr	r3, [pc, #24]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d5c:	695a      	ldr	r2, [r3, #20]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	4904      	ldr	r1, [pc, #16]	; (8008d74 <RCCEx_PLLSAI2_Config+0x1b0>)
 8008d64:	4313      	orrs	r3, r2
 8008d66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8008d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d6a:	4618      	mov	r0, r3
 8008d6c:	3710      	adds	r7, #16
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop
 8008d74:	40021000 	.word	0x40021000

08008d78 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b084      	sub	sp, #16
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d06c      	beq.n	8008e64 <HAL_RTC_Init+0xec>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /* #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008d90:	b2db      	uxtb	r3, r3
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d106      	bne.n	8008da4 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8008d9e:	6878      	ldr	r0, [r7, #4]
 8008da0:	f7fd f9fa 	bl	8006198 <HAL_RTC_MspInit>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    /* Process TAMP ip offset from RTC one */
    hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
#endif
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2202      	movs	r2, #2
 8008da8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	22ca      	movs	r2, #202	; 0xca
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2253      	movs	r2, #83	; 0x53
 8008dba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f000 f87c 	bl	8008eba <RTC_EnterInitMode>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d14b      	bne.n	8008e64 <HAL_RTC_Init+0xec>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	6812      	ldr	r2, [r2, #0]
 8008dd6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8008dda:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008dde:	6093      	str	r3, [r2, #8]
#endif
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6899      	ldr	r1, [r3, #8]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	685a      	ldr	r2, [r3, #4]
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	691b      	ldr	r3, [r3, #16]
 8008dee:	431a      	orrs	r2, r3
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	699b      	ldr	r3, [r3, #24]
 8008df4:	431a      	orrs	r2, r3
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	430a      	orrs	r2, r1
 8008dfc:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	68d2      	ldr	r2, [r2, #12]
 8008e06:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6919      	ldr	r1, [r3, #16]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	689b      	ldr	r3, [r3, #8]
 8008e12:	041a      	lsls	r2, r3, #16
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	611a      	str	r2, [r3, #16]
      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
#endif

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f87f 	bl	8008f20 <RTC_ExitInitMode>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8008e26:	7bfb      	ldrb	r3, [r7, #15]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d11b      	bne.n	8008e64 <HAL_RTC_Init+0xec>
      {
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#else
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	f022 0203 	bic.w	r2, r2, #3
 8008e3a:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	69da      	ldr	r2, [r3, #28]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	431a      	orrs	r2, r3
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	430a      	orrs	r2, r1
 8008e52:	64da      	str	r2, [r3, #76]	; 0x4c
#endif

        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	22ff      	movs	r2, #255	; 0xff
 8008e5a:	625a      	str	r2, [r3, #36]	; 0x24

          hrtc->State = HAL_RTC_STATE_READY;
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      }
    }
  }

  return status;
 8008e64:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	3710      	adds	r7, #16
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b084      	sub	sp, #16
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]

  /* Clear RSF flag */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#else
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	68da      	ldr	r2, [r3, #12]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008e84:	60da      	str	r2, [r3, #12]
#endif

  tickstart = HAL_GetTick();
 8008e86:	f7fd fb97 	bl	80065b8 <HAL_GetTick>
 8008e8a:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#else
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008e8c:	e009      	b.n	8008ea2 <HAL_RTC_WaitForSynchro+0x34>
#endif
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008e8e:	f7fd fb93 	bl	80065b8 <HAL_GetTick>
 8008e92:	4602      	mov	r2, r0
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	1ad3      	subs	r3, r2, r3
 8008e98:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008e9c:	d901      	bls.n	8008ea2 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	e007      	b.n	8008eb2 <HAL_RTC_WaitForSynchro+0x44>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	68db      	ldr	r3, [r3, #12]
 8008ea8:	f003 0320 	and.w	r3, r3, #32
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d0ee      	beq.n	8008e8e <HAL_RTC_WaitForSynchro+0x20>
    }
  }

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
      }
    }
  }
#else /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d120      	bne.n	8008f16 <RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f04f 32ff 	mov.w	r2, #4294967295
 8008edc:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8008ede:	f7fd fb6b 	bl	80065b8 <HAL_GetTick>
 8008ee2:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008ee4:	e00d      	b.n	8008f02 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8008ee6:	f7fd fb67 	bl	80065b8 <HAL_GetTick>
 8008eea:	4602      	mov	r2, r0
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	1ad3      	subs	r3, r2, r3
 8008ef0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ef4:	d905      	bls.n	8008f02 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8008ef6:	2303      	movs	r3, #3
 8008ef8:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	2203      	movs	r2, #3
 8008efe:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	68db      	ldr	r3, [r3, #12]
 8008f08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d102      	bne.n	8008f16 <RTC_EnterInitMode+0x5c>
 8008f10:	7bfb      	ldrb	r3, [r7, #15]
 8008f12:	2b03      	cmp	r3, #3
 8008f14:	d1e7      	bne.n	8008ee6 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* #if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  return status;
 8008f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f18:	4618      	mov	r0, r3
 8008f1a:	3710      	adds	r7, #16
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	bd80      	pop	{r7, pc}

08008f20 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008f20:	b580      	push	{r7, lr}
 8008f22:	b084      	sub	sp, #16
 8008f24:	af00      	add	r7, sp, #0
 8008f26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008f28:	2300      	movs	r3, #0
 8008f2a:	73fb      	strb	r3, [r7, #15]
  /* Exit Initialization mode */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined(STM32L4P5xx) || defined(STM32L4Q5xx)
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
#else
  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INIT);
 8008f2c:	4b1a      	ldr	r3, [pc, #104]	; (8008f98 <RTC_ExitInitMode+0x78>)
 8008f2e:	68db      	ldr	r3, [r3, #12]
 8008f30:	4a19      	ldr	r2, [pc, #100]	; (8008f98 <RTC_ExitInitMode+0x78>)
 8008f32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f36:	60d3      	str	r3, [r2, #12]
#endif

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8008f38:	4b17      	ldr	r3, [pc, #92]	; (8008f98 <RTC_ExitInitMode+0x78>)
 8008f3a:	689b      	ldr	r3, [r3, #8]
 8008f3c:	f003 0320 	and.w	r3, r3, #32
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d10c      	bne.n	8008f5e <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f44:	6878      	ldr	r0, [r7, #4]
 8008f46:	f7ff ff92 	bl	8008e6e <HAL_RTC_WaitForSynchro>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d01e      	beq.n	8008f8e <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2203      	movs	r2, #3
 8008f54:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008f58:	2303      	movs	r3, #3
 8008f5a:	73fb      	strb	r3, [r7, #15]
 8008f5c:	e017      	b.n	8008f8e <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f5e:	4b0e      	ldr	r3, [pc, #56]	; (8008f98 <RTC_ExitInitMode+0x78>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	4a0d      	ldr	r2, [pc, #52]	; (8008f98 <RTC_ExitInitMode+0x78>)
 8008f64:	f023 0320 	bic.w	r3, r3, #32
 8008f68:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f6a:	6878      	ldr	r0, [r7, #4]
 8008f6c:	f7ff ff7f 	bl	8008e6e <HAL_RTC_WaitForSynchro>
 8008f70:	4603      	mov	r3, r0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d005      	beq.n	8008f82 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	2203      	movs	r2, #3
 8008f7a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 8008f7e:	2303      	movs	r3, #3
 8008f80:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8008f82:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <RTC_ExitInitMode+0x78>)
 8008f84:	689b      	ldr	r3, [r3, #8]
 8008f86:	4a04      	ldr	r2, [pc, #16]	; (8008f98 <RTC_ExitInitMode+0x78>)
 8008f88:	f043 0320 	orr.w	r3, r3, #32
 8008f8c:	6093      	str	r3, [r2, #8]
  }

  return status;
 8008f8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f90:	4618      	mov	r0, r3
 8008f92:	3710      	adds	r7, #16
 8008f94:	46bd      	mov	sp, r7
 8008f96:	bd80      	pop	{r7, pc}
 8008f98:	40002800 	.word	0x40002800

08008f9c <HAL_RTCEx_SetWakeUpTimer_IT>:
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock, uint32_t WakeUpAutoClr)
#else
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer_IT(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
#endif
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  /* (0x0000<=WUTOCLR<=WUT) */
  assert_param(WakeUpAutoClr <= WakeUpCounter);
#endif

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d101      	bne.n	8008fb6 <HAL_RTCEx_SetWakeUpTimer_IT+0x1a>
 8008fb2:	2302      	movs	r3, #2
 8008fb4:	e07f      	b.n	80090b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	2201      	movs	r2, #1
 8008fba:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	2202      	movs	r2, #2
 8008fc2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	22ca      	movs	r2, #202	; 0xca
 8008fcc:	625a      	str	r2, [r3, #36]	; 0x24
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2253      	movs	r2, #83	; 0x53
 8008fd4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear WUTE in RTC_CR to disable the wakeup timer */
  CLEAR_BIT(hrtc->Instance->CR, RTC_CR_WUTE);
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	689a      	ldr	r2, [r3, #8]
 8008fdc:	68fb      	ldr	r3, [r7, #12]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008fe4:	609a      	str	r2, [r3, #8]

  /* Clear flag Wake-Up */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68db      	ldr	r3, [r3, #12]
 8008fec:	b2da      	uxtb	r2, r3
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 8008ff6:	60da      	str	r2, [r3, #12]
     counter and to WUCKSEL[2:0] bits is allowed. This step must be skipped in
     calendar initialization mode. */
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  if (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_INITF) == 0U)
#else
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	68db      	ldr	r3, [r3, #12]
 8008ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009002:	2b00      	cmp	r3, #0
 8009004:	d120      	bne.n	8009048 <HAL_RTCEx_SetWakeUpTimer_IT+0xac>
#endif
  {
    tickstart = HAL_GetTick();
 8009006:	f7fd fad7 	bl	80065b8 <HAL_GetTick>
 800900a:	6178      	str	r0, [r7, #20]
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
    while (READ_BIT(hrtc->Instance->ICSR, RTC_ICSR_WUTWF) == 0U)
#else
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800900c:	e015      	b.n	800903a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
#endif
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800900e:	f7fd fad3 	bl	80065b8 <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800901c:	d90d      	bls.n	800903a <HAL_RTCEx_SetWakeUpTimer_IT+0x9e>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	22ff      	movs	r2, #255	; 0xff
 8009024:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009026:	68fb      	ldr	r3, [r7, #12]
 8009028:	2203      	movs	r2, #3
 800902a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	2200      	movs	r2, #0
 8009032:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_TIMEOUT;
 8009036:	2303      	movs	r3, #3
 8009038:	e03d      	b.n	80090b6 <HAL_RTCEx_SetWakeUpTimer_IT+0x11a>
    while (READ_BIT(hrtc->Instance->ISR, RTC_ISR_WUTWF) == 0U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d0e2      	beq.n	800900e <HAL_RTCEx_SetWakeUpTimer_IT+0x72>
#if defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx)
  /* Configure the Wakeup Timer counter and auto clear value */
  hrtc->Instance->WUTR = (uint32_t)(WakeUpCounter | (WakeUpAutoClr << RTC_WUTR_WUTOCLR_Pos));
#else
  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	68ba      	ldr	r2, [r7, #8]
 800904e:	615a      	str	r2, [r3, #20]
#endif

  /* Configure the clock source */
  MODIFY_REG(hrtc->Instance->CR, RTC_CR_WUCKSEL, (uint32_t)WakeUpClock);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	f023 0107 	bic.w	r1, r3, #7
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	430a      	orrs	r2, r1
 8009062:	609a      	str	r2, [r3, #8]
  {
    /* RTC WakeUpTimer EXTI Configuration: Interrupt configuration */
    __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
  }
#else /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8009064:	4b16      	ldr	r3, [pc, #88]	; (80090c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	4a15      	ldr	r2, [pc, #84]	; (80090c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 800906a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800906e:	6013      	str	r3, [r2, #0]
#endif /* defined(STM32L412xx) || defined(STM32L422xx) || defined (STM32L4P5xx) || defined (STM32L4Q5xx) */

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 8009070:	4b13      	ldr	r3, [pc, #76]	; (80090c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	4a12      	ldr	r2, [pc, #72]	; (80090c0 <HAL_RTCEx_SetWakeUpTimer_IT+0x124>)
 8009076:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800907a:	6093      	str	r3, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	689a      	ldr	r2, [r3, #8]
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800908a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	689a      	ldr	r2, [r3, #8]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800909a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	22ff      	movs	r2, #255	; 0xff
 80090a2:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2201      	movs	r2, #1
 80090a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	2200      	movs	r2, #0
 80090b0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80090b4:	2300      	movs	r3, #0
}
 80090b6:	4618      	mov	r0, r3
 80090b8:	3718      	adds	r7, #24
 80090ba:	46bd      	mov	sp, r7
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	bf00      	nop
 80090c0:	40010400 	.word	0x40010400

080090c4 <HAL_RTCEx_DeactivateWakeUpTimer>:
  * @brief  Deactivate wake up timer counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b084      	sub	sp, #16
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d101      	bne.n	80090da <HAL_RTCEx_DeactivateWakeUpTimer+0x16>
 80090d6:	2302      	movs	r3, #2
 80090d8:	e04d      	b.n	8009176 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2201      	movs	r2, #1
 80090de:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2202      	movs	r2, #2
 80090e6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	22ca      	movs	r2, #202	; 0xca
 80090f0:	625a      	str	r2, [r3, #36]	; 0x24
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2253      	movs	r2, #83	; 0x53
 80090f8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	689a      	ldr	r2, [r3, #8]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009108:	609a      	str	r2, [r3, #8]

  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	689a      	ldr	r2, [r3, #8]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009118:	609a      	str	r2, [r3, #8]

  tickstart = HAL_GetTick();
 800911a:	f7fd fa4d 	bl	80065b8 <HAL_GetTick>
 800911e:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8009120:	e015      	b.n	800914e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009122:	f7fd fa49 	bl	80065b8 <HAL_GetTick>
 8009126:	4602      	mov	r2, r0
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	1ad3      	subs	r3, r2, r3
 800912c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009130:	d90d      	bls.n	800914e <HAL_RTCEx_DeactivateWakeUpTimer+0x8a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	22ff      	movs	r2, #255	; 0xff
 8009138:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2203      	movs	r2, #3
 800913e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_TIMEOUT;
 800914a:	2303      	movs	r3, #3
 800914c:	e013      	b.n	8009176 <HAL_RTCEx_DeactivateWakeUpTimer+0xb2>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	f003 0304 	and.w	r3, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	d0e2      	beq.n	8009122 <HAL_RTCEx_DeactivateWakeUpTimer+0x5e>
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	22ff      	movs	r2, #255	; 0xff
 8009162:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2201      	movs	r2, #1
 8009168:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	2200      	movs	r2, #0
 8009170:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8009174:	2300      	movs	r3, #0
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b084      	sub	sp, #16
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	2b00      	cmp	r3, #0
 800918a:	d101      	bne.n	8009190 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800918c:	2301      	movs	r3, #1
 800918e:	e07c      	b.n	800928a <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	2200      	movs	r2, #0
 8009194:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800919c:	b2db      	uxtb	r3, r3
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d106      	bne.n	80091b0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f7fd f810 	bl	80061d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2202      	movs	r2, #2
 80091b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80091c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	68db      	ldr	r3, [r3, #12]
 80091cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091d0:	d902      	bls.n	80091d8 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80091d2:	2300      	movs	r3, #0
 80091d4:	60fb      	str	r3, [r7, #12]
 80091d6:	e002      	b.n	80091de <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80091d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80091e6:	d007      	beq.n	80091f8 <HAL_SPI_Init+0x7a>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80091f0:	d002      	beq.n	80091f8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	68db      	ldr	r3, [r3, #12]
 8009204:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009208:	d903      	bls.n	8009212 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2202      	movs	r2, #2
 800920e:	631a      	str	r2, [r3, #48]	; 0x30
 8009210:	e002      	b.n	8009218 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2201      	movs	r2, #1
 8009216:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	431a      	orrs	r2, r3
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	691b      	ldr	r3, [r3, #16]
 8009226:	431a      	orrs	r2, r3
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	431a      	orrs	r2, r3
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	699b      	ldr	r3, [r3, #24]
 8009232:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009236:	431a      	orrs	r2, r3
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	69db      	ldr	r3, [r3, #28]
 800923c:	431a      	orrs	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a1b      	ldr	r3, [r3, #32]
 8009242:	ea42 0103 	orr.w	r1, r2, r3
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	430a      	orrs	r2, r1
 8009250:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	f003 0204 	and.w	r2, r3, #4
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009260:	431a      	orrs	r2, r3
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009266:	431a      	orrs	r2, r3
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
 800926c:	ea42 0103 	orr.w	r1, r2, r3
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	68fa      	ldr	r2, [r7, #12]
 8009276:	430a      	orrs	r2, r1
 8009278:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	2200      	movs	r2, #0
 800927e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	2201      	movs	r2, #1
 8009284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009288:	2300      	movs	r3, #0
}
 800928a:	4618      	mov	r0, r3
 800928c:	3710      	adds	r7, #16
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}

08009292 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009292:	b580      	push	{r7, lr}
 8009294:	b088      	sub	sp, #32
 8009296:	af00      	add	r7, sp, #0
 8009298:	60f8      	str	r0, [r7, #12]
 800929a:	60b9      	str	r1, [r7, #8]
 800929c:	603b      	str	r3, [r7, #0]
 800929e:	4613      	mov	r3, r2
 80092a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80092a2:	2300      	movs	r3, #0
 80092a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d101      	bne.n	80092b4 <HAL_SPI_Transmit+0x22>
 80092b0:	2302      	movs	r3, #2
 80092b2:	e150      	b.n	8009556 <HAL_SPI_Transmit+0x2c4>
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2201      	movs	r2, #1
 80092b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80092bc:	f7fd f97c 	bl	80065b8 <HAL_GetTick>
 80092c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80092c2:	88fb      	ldrh	r3, [r7, #6]
 80092c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d002      	beq.n	80092d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80092d2:	2302      	movs	r3, #2
 80092d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092d6:	e135      	b.n	8009544 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d002      	beq.n	80092e4 <HAL_SPI_Transmit+0x52>
 80092de:	88fb      	ldrh	r3, [r7, #6]
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d102      	bne.n	80092ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80092e8:	e12c      	b.n	8009544 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	2203      	movs	r2, #3
 80092ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2200      	movs	r2, #0
 80092f6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	68ba      	ldr	r2, [r7, #8]
 80092fc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	88fa      	ldrh	r2, [r7, #6]
 8009302:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	88fa      	ldrh	r2, [r7, #6]
 8009308:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2200      	movs	r2, #0
 800930e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2200      	movs	r2, #0
 8009314:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	2200      	movs	r2, #0
 800931c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	2200      	movs	r2, #0
 8009324:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	2200      	movs	r2, #0
 800932a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009334:	d107      	bne.n	8009346 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	681a      	ldr	r2, [r3, #0]
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009344:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009350:	2b40      	cmp	r3, #64	; 0x40
 8009352:	d007      	beq.n	8009364 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009362:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	68db      	ldr	r3, [r3, #12]
 8009368:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800936c:	d94b      	bls.n	8009406 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d002      	beq.n	800937c <HAL_SPI_Transmit+0xea>
 8009376:	8afb      	ldrh	r3, [r7, #22]
 8009378:	2b01      	cmp	r3, #1
 800937a:	d13e      	bne.n	80093fa <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009380:	881a      	ldrh	r2, [r3, #0]
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800938c:	1c9a      	adds	r2, r3, #2
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009396:	b29b      	uxth	r3, r3
 8009398:	3b01      	subs	r3, #1
 800939a:	b29a      	uxth	r2, r3
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80093a0:	e02b      	b.n	80093fa <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	689b      	ldr	r3, [r3, #8]
 80093a8:	f003 0302 	and.w	r3, r3, #2
 80093ac:	2b02      	cmp	r3, #2
 80093ae:	d112      	bne.n	80093d6 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093b4:	881a      	ldrh	r2, [r3, #0]
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093c0:	1c9a      	adds	r2, r3, #2
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093ca:	b29b      	uxth	r3, r3
 80093cc:	3b01      	subs	r3, #1
 80093ce:	b29a      	uxth	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80093d4:	e011      	b.n	80093fa <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80093d6:	f7fd f8ef 	bl	80065b8 <HAL_GetTick>
 80093da:	4602      	mov	r2, r0
 80093dc:	69bb      	ldr	r3, [r7, #24]
 80093de:	1ad3      	subs	r3, r2, r3
 80093e0:	683a      	ldr	r2, [r7, #0]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d803      	bhi.n	80093ee <HAL_SPI_Transmit+0x15c>
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093ec:	d102      	bne.n	80093f4 <HAL_SPI_Transmit+0x162>
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d102      	bne.n	80093fa <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80093f4:	2303      	movs	r3, #3
 80093f6:	77fb      	strb	r3, [r7, #31]
          goto error;
 80093f8:	e0a4      	b.n	8009544 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80093fe:	b29b      	uxth	r3, r3
 8009400:	2b00      	cmp	r3, #0
 8009402:	d1ce      	bne.n	80093a2 <HAL_SPI_Transmit+0x110>
 8009404:	e07c      	b.n	8009500 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	685b      	ldr	r3, [r3, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d002      	beq.n	8009414 <HAL_SPI_Transmit+0x182>
 800940e:	8afb      	ldrh	r3, [r7, #22]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d170      	bne.n	80094f6 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009418:	b29b      	uxth	r3, r3
 800941a:	2b01      	cmp	r3, #1
 800941c:	d912      	bls.n	8009444 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009422:	881a      	ldrh	r2, [r3, #0]
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800942e:	1c9a      	adds	r2, r3, #2
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009438:	b29b      	uxth	r3, r3
 800943a:	3b02      	subs	r3, #2
 800943c:	b29a      	uxth	r2, r3
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009442:	e058      	b.n	80094f6 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	330c      	adds	r3, #12
 800944e:	7812      	ldrb	r2, [r2, #0]
 8009450:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009456:	1c5a      	adds	r2, r3, #1
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009460:	b29b      	uxth	r3, r3
 8009462:	3b01      	subs	r3, #1
 8009464:	b29a      	uxth	r2, r3
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800946a:	e044      	b.n	80094f6 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	689b      	ldr	r3, [r3, #8]
 8009472:	f003 0302 	and.w	r3, r3, #2
 8009476:	2b02      	cmp	r3, #2
 8009478:	d12b      	bne.n	80094d2 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947e:	b29b      	uxth	r3, r3
 8009480:	2b01      	cmp	r3, #1
 8009482:	d912      	bls.n	80094aa <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009488:	881a      	ldrh	r2, [r3, #0]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009494:	1c9a      	adds	r2, r3, #2
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800949e:	b29b      	uxth	r3, r3
 80094a0:	3b02      	subs	r3, #2
 80094a2:	b29a      	uxth	r2, r3
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094a8:	e025      	b.n	80094f6 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	330c      	adds	r3, #12
 80094b4:	7812      	ldrb	r2, [r2, #0]
 80094b6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094c6:	b29b      	uxth	r3, r3
 80094c8:	3b01      	subs	r3, #1
 80094ca:	b29a      	uxth	r2, r3
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094d0:	e011      	b.n	80094f6 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80094d2:	f7fd f871 	bl	80065b8 <HAL_GetTick>
 80094d6:	4602      	mov	r2, r0
 80094d8:	69bb      	ldr	r3, [r7, #24]
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d803      	bhi.n	80094ea <HAL_SPI_Transmit+0x258>
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094e8:	d102      	bne.n	80094f0 <HAL_SPI_Transmit+0x25e>
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d102      	bne.n	80094f6 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80094f0:	2303      	movs	r3, #3
 80094f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094f4:	e026      	b.n	8009544 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094fa:	b29b      	uxth	r3, r3
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d1b5      	bne.n	800946c <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009500:	69ba      	ldr	r2, [r7, #24]
 8009502:	6839      	ldr	r1, [r7, #0]
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 fc94 	bl	8009e32 <SPI_EndRxTxTransaction>
 800950a:	4603      	mov	r3, r0
 800950c:	2b00      	cmp	r3, #0
 800950e:	d002      	beq.n	8009516 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2220      	movs	r2, #32
 8009514:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	689b      	ldr	r3, [r3, #8]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d10a      	bne.n	8009534 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800951e:	2300      	movs	r3, #0
 8009520:	613b      	str	r3, [r7, #16]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	68db      	ldr	r3, [r3, #12]
 8009528:	613b      	str	r3, [r7, #16]
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	613b      	str	r3, [r7, #16]
 8009532:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009538:	2b00      	cmp	r3, #0
 800953a:	d002      	beq.n	8009542 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800953c:	2301      	movs	r3, #1
 800953e:	77fb      	strb	r3, [r7, #31]
 8009540:	e000      	b.n	8009544 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8009542:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2201      	movs	r2, #1
 8009548:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	2200      	movs	r2, #0
 8009550:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009554:	7ffb      	ldrb	r3, [r7, #31]
}
 8009556:	4618      	mov	r0, r3
 8009558:	3720      	adds	r7, #32
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}

0800955e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800955e:	b580      	push	{r7, lr}
 8009560:	b088      	sub	sp, #32
 8009562:	af02      	add	r7, sp, #8
 8009564:	60f8      	str	r0, [r7, #12]
 8009566:	60b9      	str	r1, [r7, #8]
 8009568:	603b      	str	r3, [r7, #0]
 800956a:	4613      	mov	r3, r2
 800956c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800956e:	2300      	movs	r3, #0
 8009570:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800957a:	d112      	bne.n	80095a2 <HAL_SPI_Receive+0x44>
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	689b      	ldr	r3, [r3, #8]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d10e      	bne.n	80095a2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	2204      	movs	r2, #4
 8009588:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800958c:	88fa      	ldrh	r2, [r7, #6]
 800958e:	683b      	ldr	r3, [r7, #0]
 8009590:	9300      	str	r3, [sp, #0]
 8009592:	4613      	mov	r3, r2
 8009594:	68ba      	ldr	r2, [r7, #8]
 8009596:	68b9      	ldr	r1, [r7, #8]
 8009598:	68f8      	ldr	r0, [r7, #12]
 800959a:	f000 f908 	bl	80097ae <HAL_SPI_TransmitReceive>
 800959e:	4603      	mov	r3, r0
 80095a0:	e101      	b.n	80097a6 <HAL_SPI_Receive+0x248>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d101      	bne.n	80095b0 <HAL_SPI_Receive+0x52>
 80095ac:	2302      	movs	r3, #2
 80095ae:	e0fa      	b.n	80097a6 <HAL_SPI_Receive+0x248>
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	2201      	movs	r2, #1
 80095b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80095b8:	f7fc fffe 	bl	80065b8 <HAL_GetTick>
 80095bc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d002      	beq.n	80095d0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80095ca:	2302      	movs	r3, #2
 80095cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095ce:	e0e1      	b.n	8009794 <HAL_SPI_Receive+0x236>
  }

  if ((pData == NULL) || (Size == 0U))
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d002      	beq.n	80095dc <HAL_SPI_Receive+0x7e>
 80095d6:	88fb      	ldrh	r3, [r7, #6]
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d102      	bne.n	80095e2 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80095dc:	2301      	movs	r3, #1
 80095de:	75fb      	strb	r3, [r7, #23]
    goto error;
 80095e0:	e0d8      	b.n	8009794 <HAL_SPI_Receive+0x236>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	2204      	movs	r2, #4
 80095e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2200      	movs	r2, #0
 80095ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	68ba      	ldr	r2, [r7, #8]
 80095f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	88fa      	ldrh	r2, [r7, #6]
 80095fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	88fa      	ldrh	r2, [r7, #6]
 8009602:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2200      	movs	r2, #0
 800960a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2200      	movs	r2, #0
 8009610:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2200      	movs	r2, #0
 8009616:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2200      	movs	r2, #0
 800961c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	68db      	ldr	r3, [r3, #12]
 8009628:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800962c:	d908      	bls.n	8009640 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	685a      	ldr	r2, [r3, #4]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800963c:	605a      	str	r2, [r3, #4]
 800963e:	e007      	b.n	8009650 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800964e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009658:	d107      	bne.n	800966a <HAL_SPI_Receive+0x10c>
  {
    SPI_1LINE_RX(hspi);
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009668:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009674:	2b40      	cmp	r3, #64	; 0x40
 8009676:	d007      	beq.n	8009688 <HAL_SPI_Receive+0x12a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009686:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	68db      	ldr	r3, [r3, #12]
 800968c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009690:	d867      	bhi.n	8009762 <HAL_SPI_Receive+0x204>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8009692:	e030      	b.n	80096f6 <HAL_SPI_Receive+0x198>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	689b      	ldr	r3, [r3, #8]
 800969a:	f003 0301 	and.w	r3, r3, #1
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d117      	bne.n	80096d2 <HAL_SPI_Receive+0x174>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f103 020c 	add.w	r2, r3, #12
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ae:	7812      	ldrb	r2, [r2, #0]
 80096b0:	b2d2      	uxtb	r2, r2
 80096b2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	1c5a      	adds	r2, r3, #1
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096c4:	b29b      	uxth	r3, r3
 80096c6:	3b01      	subs	r3, #1
 80096c8:	b29a      	uxth	r2, r3
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80096d0:	e011      	b.n	80096f6 <HAL_SPI_Receive+0x198>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80096d2:	f7fc ff71 	bl	80065b8 <HAL_GetTick>
 80096d6:	4602      	mov	r2, r0
 80096d8:	693b      	ldr	r3, [r7, #16]
 80096da:	1ad3      	subs	r3, r2, r3
 80096dc:	683a      	ldr	r2, [r7, #0]
 80096de:	429a      	cmp	r2, r3
 80096e0:	d803      	bhi.n	80096ea <HAL_SPI_Receive+0x18c>
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096e8:	d102      	bne.n	80096f0 <HAL_SPI_Receive+0x192>
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d102      	bne.n	80096f6 <HAL_SPI_Receive+0x198>
        {
          errorcode = HAL_TIMEOUT;
 80096f0:	2303      	movs	r3, #3
 80096f2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80096f4:	e04e      	b.n	8009794 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1c8      	bne.n	8009694 <HAL_SPI_Receive+0x136>
 8009702:	e034      	b.n	800976e <HAL_SPI_Receive+0x210>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8009704:	68fb      	ldr	r3, [r7, #12]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	689b      	ldr	r3, [r3, #8]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b01      	cmp	r3, #1
 8009710:	d115      	bne.n	800973e <HAL_SPI_Receive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68da      	ldr	r2, [r3, #12]
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800971c:	b292      	uxth	r2, r2
 800971e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009724:	1c9a      	adds	r2, r3, #2
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009730:	b29b      	uxth	r3, r3
 8009732:	3b01      	subs	r3, #1
 8009734:	b29a      	uxth	r2, r3
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800973c:	e011      	b.n	8009762 <HAL_SPI_Receive+0x204>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800973e:	f7fc ff3b 	bl	80065b8 <HAL_GetTick>
 8009742:	4602      	mov	r2, r0
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	1ad3      	subs	r3, r2, r3
 8009748:	683a      	ldr	r2, [r7, #0]
 800974a:	429a      	cmp	r2, r3
 800974c:	d803      	bhi.n	8009756 <HAL_SPI_Receive+0x1f8>
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009754:	d102      	bne.n	800975c <HAL_SPI_Receive+0x1fe>
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <HAL_SPI_Receive+0x204>
        {
          errorcode = HAL_TIMEOUT;
 800975c:	2303      	movs	r3, #3
 800975e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009760:	e018      	b.n	8009794 <HAL_SPI_Receive+0x236>
    while (hspi->RxXferCount > 0U)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009768:	b29b      	uxth	r3, r3
 800976a:	2b00      	cmp	r3, #0
 800976c:	d1ca      	bne.n	8009704 <HAL_SPI_Receive+0x1a6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	6839      	ldr	r1, [r7, #0]
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 fb05 	bl	8009d82 <SPI_EndRxTransaction>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d002      	beq.n	8009784 <HAL_SPI_Receive+0x226>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	2220      	movs	r2, #32
 8009782:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009788:	2b00      	cmp	r3, #0
 800978a:	d002      	beq.n	8009792 <HAL_SPI_Receive+0x234>
  {
    errorcode = HAL_ERROR;
 800978c:	2301      	movs	r3, #1
 800978e:	75fb      	strb	r3, [r7, #23]
 8009790:	e000      	b.n	8009794 <HAL_SPI_Receive+0x236>
  }

error :
 8009792:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	2201      	movs	r2, #1
 8009798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80097a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80097a6:	4618      	mov	r0, r3
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b08a      	sub	sp, #40	; 0x28
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	60f8      	str	r0, [r7, #12]
 80097b6:	60b9      	str	r1, [r7, #8]
 80097b8:	607a      	str	r2, [r7, #4]
 80097ba:	807b      	strh	r3, [r7, #2]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80097bc:	2301      	movs	r3, #1
 80097be:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	d101      	bne.n	80097d4 <HAL_SPI_TransmitReceive+0x26>
 80097d0:	2302      	movs	r3, #2
 80097d2:	e1fb      	b.n	8009bcc <HAL_SPI_TransmitReceive+0x41e>
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2201      	movs	r2, #1
 80097d8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80097dc:	f7fc feec 	bl	80065b8 <HAL_GetTick>
 80097e0:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80097e8:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	685b      	ldr	r3, [r3, #4]
 80097ee:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80097f0:	887b      	ldrh	r3, [r7, #2]
 80097f2:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 80097f4:	887b      	ldrh	r3, [r7, #2]
 80097f6:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80097f8:	7efb      	ldrb	r3, [r7, #27]
 80097fa:	2b01      	cmp	r3, #1
 80097fc:	d00e      	beq.n	800981c <HAL_SPI_TransmitReceive+0x6e>
 80097fe:	697b      	ldr	r3, [r7, #20]
 8009800:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009804:	d106      	bne.n	8009814 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	689b      	ldr	r3, [r3, #8]
 800980a:	2b00      	cmp	r3, #0
 800980c:	d102      	bne.n	8009814 <HAL_SPI_TransmitReceive+0x66>
 800980e:	7efb      	ldrb	r3, [r7, #27]
 8009810:	2b04      	cmp	r3, #4
 8009812:	d003      	beq.n	800981c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8009814:	2302      	movs	r3, #2
 8009816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800981a:	e1cd      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d005      	beq.n	800982e <HAL_SPI_TransmitReceive+0x80>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2b00      	cmp	r3, #0
 8009826:	d002      	beq.n	800982e <HAL_SPI_TransmitReceive+0x80>
 8009828:	887b      	ldrh	r3, [r7, #2]
 800982a:	2b00      	cmp	r3, #0
 800982c:	d103      	bne.n	8009836 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800982e:	2301      	movs	r3, #1
 8009830:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8009834:	e1c0      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800983c:	b2db      	uxtb	r3, r3
 800983e:	2b04      	cmp	r3, #4
 8009840:	d003      	beq.n	800984a <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009842:	68fb      	ldr	r3, [r7, #12]
 8009844:	2205      	movs	r2, #5
 8009846:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2200      	movs	r2, #0
 800984e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009850:	68fb      	ldr	r3, [r7, #12]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	887a      	ldrh	r2, [r7, #2]
 800985a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	887a      	ldrh	r2, [r7, #2]
 8009862:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	68ba      	ldr	r2, [r7, #8]
 800986a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	887a      	ldrh	r2, [r7, #2]
 8009870:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	887a      	ldrh	r2, [r7, #2]
 8009876:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	2200      	movs	r2, #0
 800987c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2200      	movs	r2, #0
 8009882:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800988c:	d802      	bhi.n	8009894 <HAL_SPI_TransmitReceive+0xe6>
 800988e:	8a3b      	ldrh	r3, [r7, #16]
 8009890:	2b01      	cmp	r3, #1
 8009892:	d908      	bls.n	80098a6 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685a      	ldr	r2, [r3, #4]
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80098a2:	605a      	str	r2, [r3, #4]
 80098a4:	e007      	b.n	80098b6 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80098b4:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098c0:	2b40      	cmp	r3, #64	; 0x40
 80098c2:	d007      	beq.n	80098d4 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	681a      	ldr	r2, [r3, #0]
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80098d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	68db      	ldr	r3, [r3, #12]
 80098d8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098dc:	d97c      	bls.n	80099d8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d002      	beq.n	80098ec <HAL_SPI_TransmitReceive+0x13e>
 80098e6:	8a7b      	ldrh	r3, [r7, #18]
 80098e8:	2b01      	cmp	r3, #1
 80098ea:	d169      	bne.n	80099c0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098f0:	881a      	ldrh	r2, [r3, #0]
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80098fc:	1c9a      	adds	r2, r3, #2
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009906:	b29b      	uxth	r3, r3
 8009908:	3b01      	subs	r3, #1
 800990a:	b29a      	uxth	r2, r3
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009910:	e056      	b.n	80099c0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	689b      	ldr	r3, [r3, #8]
 8009918:	f003 0302 	and.w	r3, r3, #2
 800991c:	2b02      	cmp	r3, #2
 800991e:	d11b      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x1aa>
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009924:	b29b      	uxth	r3, r3
 8009926:	2b00      	cmp	r3, #0
 8009928:	d016      	beq.n	8009958 <HAL_SPI_TransmitReceive+0x1aa>
 800992a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800992c:	2b01      	cmp	r3, #1
 800992e:	d113      	bne.n	8009958 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009934:	881a      	ldrh	r2, [r3, #0]
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009940:	1c9a      	adds	r2, r3, #2
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800994a:	b29b      	uxth	r3, r3
 800994c:	3b01      	subs	r3, #1
 800994e:	b29a      	uxth	r2, r3
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009954:	2300      	movs	r3, #0
 8009956:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	689b      	ldr	r3, [r3, #8]
 800995e:	f003 0301 	and.w	r3, r3, #1
 8009962:	2b01      	cmp	r3, #1
 8009964:	d11c      	bne.n	80099a0 <HAL_SPI_TransmitReceive+0x1f2>
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800996c:	b29b      	uxth	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d016      	beq.n	80099a0 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	68da      	ldr	r2, [r3, #12]
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997c:	b292      	uxth	r2, r2
 800997e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009984:	1c9a      	adds	r2, r3, #2
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009990:	b29b      	uxth	r3, r3
 8009992:	3b01      	subs	r3, #1
 8009994:	b29a      	uxth	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800999c:	2301      	movs	r3, #1
 800999e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80099a0:	f7fc fe0a 	bl	80065b8 <HAL_GetTick>
 80099a4:	4602      	mov	r2, r0
 80099a6:	69fb      	ldr	r3, [r7, #28]
 80099a8:	1ad3      	subs	r3, r2, r3
 80099aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d807      	bhi.n	80099c0 <HAL_SPI_TransmitReceive+0x212>
 80099b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80099b6:	d003      	beq.n	80099c0 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80099b8:	2303      	movs	r3, #3
 80099ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80099be:	e0fb      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d1a3      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x164>
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80099d0:	b29b      	uxth	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d19d      	bne.n	8009912 <HAL_SPI_TransmitReceive+0x164>
 80099d6:	e0df      	b.n	8009b98 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d003      	beq.n	80099e8 <HAL_SPI_TransmitReceive+0x23a>
 80099e0:	8a7b      	ldrh	r3, [r7, #18]
 80099e2:	2b01      	cmp	r3, #1
 80099e4:	f040 80cb 	bne.w	8009b7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80099ec:	b29b      	uxth	r3, r3
 80099ee:	2b01      	cmp	r3, #1
 80099f0:	d912      	bls.n	8009a18 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80099f6:	881a      	ldrh	r2, [r3, #0]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a02:	1c9a      	adds	r2, r3, #2
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a0c:	b29b      	uxth	r3, r3
 8009a0e:	3b02      	subs	r3, #2
 8009a10:	b29a      	uxth	r2, r3
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a16:	e0b2      	b.n	8009b7e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	330c      	adds	r3, #12
 8009a22:	7812      	ldrb	r2, [r2, #0]
 8009a24:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2a:	1c5a      	adds	r2, r3, #1
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a34:	b29b      	uxth	r3, r3
 8009a36:	3b01      	subs	r3, #1
 8009a38:	b29a      	uxth	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a3e:	e09e      	b.n	8009b7e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	689b      	ldr	r3, [r3, #8]
 8009a46:	f003 0302 	and.w	r3, r3, #2
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d134      	bne.n	8009ab8 <HAL_SPI_TransmitReceive+0x30a>
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a52:	b29b      	uxth	r3, r3
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d02f      	beq.n	8009ab8 <HAL_SPI_TransmitReceive+0x30a>
 8009a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d12c      	bne.n	8009ab8 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a62:	b29b      	uxth	r3, r3
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d912      	bls.n	8009a8e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a6c:	881a      	ldrh	r2, [r3, #0]
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a78:	1c9a      	adds	r2, r3, #2
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a82:	b29b      	uxth	r3, r3
 8009a84:	3b02      	subs	r3, #2
 8009a86:	b29a      	uxth	r2, r3
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009a8c:	e012      	b.n	8009ab4 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	330c      	adds	r3, #12
 8009a98:	7812      	ldrb	r2, [r2, #0]
 8009a9a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa0:	1c5a      	adds	r2, r3, #1
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009aaa:	b29b      	uxth	r3, r3
 8009aac:	3b01      	subs	r3, #1
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	689b      	ldr	r3, [r3, #8]
 8009abe:	f003 0301 	and.w	r3, r3, #1
 8009ac2:	2b01      	cmp	r3, #1
 8009ac4:	d148      	bne.n	8009b58 <HAL_SPI_TransmitReceive+0x3aa>
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009acc:	b29b      	uxth	r3, r3
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d042      	beq.n	8009b58 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009ad8:	b29b      	uxth	r3, r3
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d923      	bls.n	8009b26 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	68da      	ldr	r2, [r3, #12]
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ae8:	b292      	uxth	r2, r2
 8009aea:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009af0:	1c9a      	adds	r2, r3, #2
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009afc:	b29b      	uxth	r3, r3
 8009afe:	3b02      	subs	r3, #2
 8009b00:	b29a      	uxth	r2, r3
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d81f      	bhi.n	8009b54 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	685a      	ldr	r2, [r3, #4]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009b22:	605a      	str	r2, [r3, #4]
 8009b24:	e016      	b.n	8009b54 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	f103 020c 	add.w	r2, r3, #12
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b32:	7812      	ldrb	r2, [r2, #0]
 8009b34:	b2d2      	uxtb	r2, r2
 8009b36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b3c:	1c5a      	adds	r2, r3, #1
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b48:	b29b      	uxth	r3, r3
 8009b4a:	3b01      	subs	r3, #1
 8009b4c:	b29a      	uxth	r2, r3
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b54:	2301      	movs	r3, #1
 8009b56:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b58:	f7fc fd2e 	bl	80065b8 <HAL_GetTick>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	1ad3      	subs	r3, r2, r3
 8009b62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b64:	429a      	cmp	r2, r3
 8009b66:	d803      	bhi.n	8009b70 <HAL_SPI_TransmitReceive+0x3c2>
 8009b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b6e:	d102      	bne.n	8009b76 <HAL_SPI_TransmitReceive+0x3c8>
 8009b70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d103      	bne.n	8009b7e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8009b7c:	e01c      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	f47f af5b 	bne.w	8009a40 <HAL_SPI_TransmitReceive+0x292>
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009b90:	b29b      	uxth	r3, r3
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	f47f af54 	bne.w	8009a40 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009b98:	69fa      	ldr	r2, [r7, #28]
 8009b9a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b9c:	68f8      	ldr	r0, [r7, #12]
 8009b9e:	f000 f948 	bl	8009e32 <SPI_EndRxTxTransaction>
 8009ba2:	4603      	mov	r3, r0
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d006      	beq.n	8009bb6 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8009ba8:	2301      	movs	r3, #1
 8009baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2220      	movs	r2, #32
 8009bb2:	661a      	str	r2, [r3, #96]	; 0x60
 8009bb4:	e000      	b.n	8009bb8 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8009bb6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009bc8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	3728      	adds	r7, #40	; 0x28
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	bd80      	pop	{r7, pc}

08009bd4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	603b      	str	r3, [r7, #0]
 8009be0:	4613      	mov	r3, r2
 8009be2:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009be4:	e04c      	b.n	8009c80 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bec:	d048      	beq.n	8009c80 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009bee:	f7fc fce3 	bl	80065b8 <HAL_GetTick>
 8009bf2:	4602      	mov	r2, r0
 8009bf4:	69bb      	ldr	r3, [r7, #24]
 8009bf6:	1ad3      	subs	r3, r2, r3
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	429a      	cmp	r2, r3
 8009bfc:	d902      	bls.n	8009c04 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009bfe:	683b      	ldr	r3, [r7, #0]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d13d      	bne.n	8009c80 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	685b      	ldr	r3, [r3, #4]
 8009c18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c1c:	d111      	bne.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	689b      	ldr	r3, [r3, #8]
 8009c22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c26:	d004      	beq.n	8009c32 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c30:	d107      	bne.n	8009c42 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c4a:	d10f      	bne.n	8009c6c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681a      	ldr	r2, [r3, #0]
 8009c52:	68fb      	ldr	r3, [r7, #12]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009c5a:	601a      	str	r2, [r3, #0]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	681a      	ldr	r2, [r3, #0]
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2201      	movs	r2, #1
 8009c70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009c7c:	2303      	movs	r3, #3
 8009c7e:	e00f      	b.n	8009ca0 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	689a      	ldr	r2, [r3, #8]
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	4013      	ands	r3, r2
 8009c8a:	68ba      	ldr	r2, [r7, #8]
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	bf0c      	ite	eq
 8009c90:	2301      	moveq	r3, #1
 8009c92:	2300      	movne	r3, #0
 8009c94:	b2db      	uxtb	r3, r3
 8009c96:	461a      	mov	r2, r3
 8009c98:	79fb      	ldrb	r3, [r7, #7]
 8009c9a:	429a      	cmp	r2, r3
 8009c9c:	d1a3      	bne.n	8009be6 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009c9e:	2300      	movs	r3, #0
}
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	3710      	adds	r7, #16
 8009ca4:	46bd      	mov	sp, r7
 8009ca6:	bd80      	pop	{r7, pc}

08009ca8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009ca8:	b580      	push	{r7, lr}
 8009caa:	b084      	sub	sp, #16
 8009cac:	af00      	add	r7, sp, #0
 8009cae:	60f8      	str	r0, [r7, #12]
 8009cb0:	60b9      	str	r1, [r7, #8]
 8009cb2:	607a      	str	r2, [r7, #4]
 8009cb4:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8009cb6:	e057      	b.n	8009d68 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8009cbe:	d106      	bne.n	8009cce <SPI_WaitFifoStateUntilTimeout+0x26>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d103      	bne.n	8009cce <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	330c      	adds	r3, #12
 8009ccc:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009cd4:	d048      	beq.n	8009d68 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009cd6:	f7fc fc6f 	bl	80065b8 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	69bb      	ldr	r3, [r7, #24]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	683a      	ldr	r2, [r7, #0]
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d902      	bls.n	8009cec <SPI_WaitFifoStateUntilTimeout+0x44>
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	d13d      	bne.n	8009d68 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	685a      	ldr	r2, [r3, #4]
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009cfa:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d04:	d111      	bne.n	8009d2a <SPI_WaitFifoStateUntilTimeout+0x82>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	689b      	ldr	r3, [r3, #8]
 8009d0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d0e:	d004      	beq.n	8009d1a <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d18:	d107      	bne.n	8009d2a <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d28:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d32:	d10f      	bne.n	8009d54 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009d42:	601a      	str	r2, [r3, #0]
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009d52:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2201      	movs	r2, #1
 8009d58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8009d64:	2303      	movs	r3, #3
 8009d66:	e008      	b.n	8009d7a <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	689a      	ldr	r2, [r3, #8]
 8009d6e:	68bb      	ldr	r3, [r7, #8]
 8009d70:	4013      	ands	r3, r2
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d19f      	bne.n	8009cb8 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8009d78:	2300      	movs	r3, #0
}
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	3710      	adds	r7, #16
 8009d7e:	46bd      	mov	sp, r7
 8009d80:	bd80      	pop	{r7, pc}

08009d82 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009d82:	b580      	push	{r7, lr}
 8009d84:	b086      	sub	sp, #24
 8009d86:	af02      	add	r7, sp, #8
 8009d88:	60f8      	str	r0, [r7, #12]
 8009d8a:	60b9      	str	r1, [r7, #8]
 8009d8c:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	685b      	ldr	r3, [r3, #4]
 8009d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d96:	d111      	bne.n	8009dbc <SPI_EndRxTransaction+0x3a>
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	689b      	ldr	r3, [r3, #8]
 8009d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009da0:	d004      	beq.n	8009dac <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	689b      	ldr	r3, [r3, #8]
 8009da6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009daa:	d107      	bne.n	8009dbc <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681a      	ldr	r2, [r3, #0]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009dba:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	9300      	str	r3, [sp, #0]
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	2180      	movs	r1, #128	; 0x80
 8009dc6:	68f8      	ldr	r0, [r7, #12]
 8009dc8:	f7ff ff04 	bl	8009bd4 <SPI_WaitFlagStateUntilTimeout>
 8009dcc:	4603      	mov	r3, r0
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d007      	beq.n	8009de2 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009dd6:	f043 0220 	orr.w	r2, r3, #32
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e023      	b.n	8009e2a <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	685b      	ldr	r3, [r3, #4]
 8009de6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dea:	d11d      	bne.n	8009e28 <SPI_EndRxTransaction+0xa6>
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	689b      	ldr	r3, [r3, #8]
 8009df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009df4:	d004      	beq.n	8009e00 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009dfe:	d113      	bne.n	8009e28 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	68bb      	ldr	r3, [r7, #8]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009e0c:	68f8      	ldr	r0, [r7, #12]
 8009e0e:	f7ff ff4b 	bl	8009ca8 <SPI_WaitFifoStateUntilTimeout>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d007      	beq.n	8009e28 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e1c:	f043 0220 	orr.w	r2, r3, #32
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e000      	b.n	8009e2a <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8009e28:	2300      	movs	r3, #0
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3710      	adds	r7, #16
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b086      	sub	sp, #24
 8009e36:	af02      	add	r7, sp, #8
 8009e38:	60f8      	str	r0, [r7, #12]
 8009e3a:	60b9      	str	r1, [r7, #8]
 8009e3c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	9300      	str	r3, [sp, #0]
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	2200      	movs	r2, #0
 8009e46:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8009e4a:	68f8      	ldr	r0, [r7, #12]
 8009e4c:	f7ff ff2c 	bl	8009ca8 <SPI_WaitFifoStateUntilTimeout>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d007      	beq.n	8009e66 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e5a:	f043 0220 	orr.w	r2, r3, #32
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009e62:	2303      	movs	r3, #3
 8009e64:	e027      	b.n	8009eb6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	9300      	str	r3, [sp, #0]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	2180      	movs	r1, #128	; 0x80
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f7ff feaf 	bl	8009bd4 <SPI_WaitFlagStateUntilTimeout>
 8009e76:	4603      	mov	r3, r0
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d007      	beq.n	8009e8c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009e80:	f043 0220 	orr.w	r2, r3, #32
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009e88:	2303      	movs	r3, #3
 8009e8a:	e014      	b.n	8009eb6 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	2200      	movs	r2, #0
 8009e94:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009e98:	68f8      	ldr	r0, [r7, #12]
 8009e9a:	f7ff ff05 	bl	8009ca8 <SPI_WaitFifoStateUntilTimeout>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d007      	beq.n	8009eb4 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ea8:	f043 0220 	orr.w	r2, r3, #32
 8009eac:	68fb      	ldr	r3, [r7, #12]
 8009eae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009eb0:	2303      	movs	r3, #3
 8009eb2:	e000      	b.n	8009eb6 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b082      	sub	sp, #8
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d101      	bne.n	8009ed0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ecc:	2301      	movs	r3, #1
 8009ece:	e01d      	b.n	8009f0c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed6:	b2db      	uxtb	r3, r3
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d106      	bne.n	8009eea <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2200      	movs	r2, #0
 8009ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009ee4:	6878      	ldr	r0, [r7, #4]
 8009ee6:	f7fc f9b5 	bl	8006254 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	2202      	movs	r2, #2
 8009eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	3304      	adds	r3, #4
 8009efa:	4619      	mov	r1, r3
 8009efc:	4610      	mov	r0, r2
 8009efe:	f000 fa5f 	bl	800a3c0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	2201      	movs	r2, #1
 8009f06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f0a:	2300      	movs	r3, #0
}
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	3708      	adds	r7, #8
 8009f10:	46bd      	mov	sp, r7
 8009f12:	bd80      	pop	{r7, pc}

08009f14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	68da      	ldr	r2, [r3, #12]
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f042 0201 	orr.w	r2, r2, #1
 8009f2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	689a      	ldr	r2, [r3, #8]
 8009f32:	4b0c      	ldr	r3, [pc, #48]	; (8009f64 <HAL_TIM_Base_Start_IT+0x50>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b06      	cmp	r3, #6
 8009f3c:	d00b      	beq.n	8009f56 <HAL_TIM_Base_Start_IT+0x42>
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f44:	d007      	beq.n	8009f56 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	681a      	ldr	r2, [r3, #0]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	f042 0201 	orr.w	r2, r2, #1
 8009f54:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3714      	adds	r7, #20
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr
 8009f64:	00010007 	.word	0x00010007

08009f68 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009f68:	b480      	push	{r7}
 8009f6a:	b083      	sub	sp, #12
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68da      	ldr	r2, [r3, #12]
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f022 0201 	bic.w	r2, r2, #1
 8009f7e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	6a1a      	ldr	r2, [r3, #32]
 8009f86:	f241 1311 	movw	r3, #4369	; 0x1111
 8009f8a:	4013      	ands	r3, r2
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d10f      	bne.n	8009fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	6a1a      	ldr	r2, [r3, #32]
 8009f96:	f240 4344 	movw	r3, #1092	; 0x444
 8009f9a:	4013      	ands	r3, r2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d107      	bne.n	8009fb0 <HAL_TIM_Base_Stop_IT+0x48>
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	681a      	ldr	r2, [r3, #0]
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	f022 0201 	bic.w	r2, r2, #1
 8009fae:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	370c      	adds	r7, #12
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fbc:	4770      	bx	lr

08009fbe <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fbe:	b580      	push	{r7, lr}
 8009fc0:	b082      	sub	sp, #8
 8009fc2:	af00      	add	r7, sp, #0
 8009fc4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	691b      	ldr	r3, [r3, #16]
 8009fcc:	f003 0302 	and.w	r3, r3, #2
 8009fd0:	2b02      	cmp	r3, #2
 8009fd2:	d122      	bne.n	800a01a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	68db      	ldr	r3, [r3, #12]
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d11b      	bne.n	800a01a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f06f 0202 	mvn.w	r2, #2
 8009fea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	699b      	ldr	r3, [r3, #24]
 8009ff8:	f003 0303 	and.w	r3, r3, #3
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d003      	beq.n	800a008 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f000 f9be 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a006:	e005      	b.n	800a014 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f9b0 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f9c1 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	691b      	ldr	r3, [r3, #16]
 800a020:	f003 0304 	and.w	r3, r3, #4
 800a024:	2b04      	cmp	r3, #4
 800a026:	d122      	bne.n	800a06e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	68db      	ldr	r3, [r3, #12]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b04      	cmp	r3, #4
 800a034:	d11b      	bne.n	800a06e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f06f 0204 	mvn.w	r2, #4
 800a03e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2202      	movs	r2, #2
 800a044:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	699b      	ldr	r3, [r3, #24]
 800a04c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 f994 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a05a:	e005      	b.n	800a068 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 f986 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 f997 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2200      	movs	r2, #0
 800a06c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	691b      	ldr	r3, [r3, #16]
 800a074:	f003 0308 	and.w	r3, r3, #8
 800a078:	2b08      	cmp	r3, #8
 800a07a:	d122      	bne.n	800a0c2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	68db      	ldr	r3, [r3, #12]
 800a082:	f003 0308 	and.w	r3, r3, #8
 800a086:	2b08      	cmp	r3, #8
 800a088:	d11b      	bne.n	800a0c2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	f06f 0208 	mvn.w	r2, #8
 800a092:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2204      	movs	r2, #4
 800a098:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	f003 0303 	and.w	r3, r3, #3
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d003      	beq.n	800a0b0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f96a 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a0ae:	e005      	b.n	800a0bc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0b0:	6878      	ldr	r0, [r7, #4]
 800a0b2:	f000 f95c 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 f96d 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	f003 0310 	and.w	r3, r3, #16
 800a0cc:	2b10      	cmp	r3, #16
 800a0ce:	d122      	bne.n	800a116 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b10      	cmp	r3, #16
 800a0dc:	d11b      	bne.n	800a116 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f06f 0210 	mvn.w	r2, #16
 800a0e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2208      	movs	r2, #8
 800a0ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	69db      	ldr	r3, [r3, #28]
 800a0f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d003      	beq.n	800a104 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f000 f940 	bl	800a382 <HAL_TIM_IC_CaptureCallback>
 800a102:	e005      	b.n	800a110 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f932 	bl	800a36e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f943 	bl	800a396 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	2200      	movs	r2, #0
 800a114:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	691b      	ldr	r3, [r3, #16]
 800a11c:	f003 0301 	and.w	r3, r3, #1
 800a120:	2b01      	cmp	r3, #1
 800a122:	d10e      	bne.n	800a142 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d107      	bne.n	800a142 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f06f 0201 	mvn.w	r2, #1
 800a13a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f7fb ffe3 	bl	8006108 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	691b      	ldr	r3, [r3, #16]
 800a148:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a14c:	2b80      	cmp	r3, #128	; 0x80
 800a14e:	d10e      	bne.n	800a16e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	68db      	ldr	r3, [r3, #12]
 800a156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a15a:	2b80      	cmp	r3, #128	; 0x80
 800a15c:	d107      	bne.n	800a16e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a166:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a168:	6878      	ldr	r0, [r7, #4]
 800a16a:	f000 faef 	bl	800a74c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a178:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a17c:	d10e      	bne.n	800a19c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	68db      	ldr	r3, [r3, #12]
 800a184:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a188:	2b80      	cmp	r3, #128	; 0x80
 800a18a:	d107      	bne.n	800a19c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a194:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a196:	6878      	ldr	r0, [r7, #4]
 800a198:	f000 fae2 	bl	800a760 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	691b      	ldr	r3, [r3, #16]
 800a1a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1a6:	2b40      	cmp	r3, #64	; 0x40
 800a1a8:	d10e      	bne.n	800a1c8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	68db      	ldr	r3, [r3, #12]
 800a1b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a1b4:	2b40      	cmp	r3, #64	; 0x40
 800a1b6:	d107      	bne.n	800a1c8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1c2:	6878      	ldr	r0, [r7, #4]
 800a1c4:	f000 f8f1 	bl	800a3aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	691b      	ldr	r3, [r3, #16]
 800a1ce:	f003 0320 	and.w	r3, r3, #32
 800a1d2:	2b20      	cmp	r3, #32
 800a1d4:	d10e      	bne.n	800a1f4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	f003 0320 	and.w	r3, r3, #32
 800a1e0:	2b20      	cmp	r3, #32
 800a1e2:	d107      	bne.n	800a1f4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	f06f 0220 	mvn.w	r2, #32
 800a1ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f000 faa2 	bl	800a738 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1f4:	bf00      	nop
 800a1f6:	3708      	adds	r7, #8
 800a1f8:	46bd      	mov	sp, r7
 800a1fa:	bd80      	pop	{r7, pc}

0800a1fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a1fc:	b580      	push	{r7, lr}
 800a1fe:	b084      	sub	sp, #16
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	d101      	bne.n	800a214 <HAL_TIM_ConfigClockSource+0x18>
 800a210:	2302      	movs	r3, #2
 800a212:	e0a8      	b.n	800a366 <HAL_TIM_ConfigClockSource+0x16a>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2202      	movs	r2, #2
 800a220:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	681b      	ldr	r3, [r3, #0]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a232:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a236:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a23e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	68fa      	ldr	r2, [r7, #12]
 800a246:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	2b40      	cmp	r3, #64	; 0x40
 800a24e:	d067      	beq.n	800a320 <HAL_TIM_ConfigClockSource+0x124>
 800a250:	2b40      	cmp	r3, #64	; 0x40
 800a252:	d80b      	bhi.n	800a26c <HAL_TIM_ConfigClockSource+0x70>
 800a254:	2b10      	cmp	r3, #16
 800a256:	d073      	beq.n	800a340 <HAL_TIM_ConfigClockSource+0x144>
 800a258:	2b10      	cmp	r3, #16
 800a25a:	d802      	bhi.n	800a262 <HAL_TIM_ConfigClockSource+0x66>
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d06f      	beq.n	800a340 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a260:	e078      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a262:	2b20      	cmp	r3, #32
 800a264:	d06c      	beq.n	800a340 <HAL_TIM_ConfigClockSource+0x144>
 800a266:	2b30      	cmp	r3, #48	; 0x30
 800a268:	d06a      	beq.n	800a340 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800a26a:	e073      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a26c:	2b70      	cmp	r3, #112	; 0x70
 800a26e:	d00d      	beq.n	800a28c <HAL_TIM_ConfigClockSource+0x90>
 800a270:	2b70      	cmp	r3, #112	; 0x70
 800a272:	d804      	bhi.n	800a27e <HAL_TIM_ConfigClockSource+0x82>
 800a274:	2b50      	cmp	r3, #80	; 0x50
 800a276:	d033      	beq.n	800a2e0 <HAL_TIM_ConfigClockSource+0xe4>
 800a278:	2b60      	cmp	r3, #96	; 0x60
 800a27a:	d041      	beq.n	800a300 <HAL_TIM_ConfigClockSource+0x104>
      break;
 800a27c:	e06a      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800a27e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a282:	d066      	beq.n	800a352 <HAL_TIM_ConfigClockSource+0x156>
 800a284:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a288:	d017      	beq.n	800a2ba <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800a28a:	e063      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	6818      	ldr	r0, [r3, #0]
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	6899      	ldr	r1, [r3, #8]
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	685a      	ldr	r2, [r3, #4]
 800a298:	683b      	ldr	r3, [r7, #0]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f000 f9a4 	bl	800a5e8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a2ae:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	68fa      	ldr	r2, [r7, #12]
 800a2b6:	609a      	str	r2, [r3, #8]
      break;
 800a2b8:	e04c      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	6818      	ldr	r0, [r3, #0]
 800a2be:	683b      	ldr	r3, [r7, #0]
 800a2c0:	6899      	ldr	r1, [r3, #8]
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	685a      	ldr	r2, [r3, #4]
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	68db      	ldr	r3, [r3, #12]
 800a2ca:	f000 f98d 	bl	800a5e8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	689a      	ldr	r2, [r3, #8]
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a2dc:	609a      	str	r2, [r3, #8]
      break;
 800a2de:	e039      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	6818      	ldr	r0, [r3, #0]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	6859      	ldr	r1, [r3, #4]
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	68db      	ldr	r3, [r3, #12]
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	f000 f901 	bl	800a4f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	2150      	movs	r1, #80	; 0x50
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	f000 f95a 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 800a2fe:	e029      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	6818      	ldr	r0, [r3, #0]
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	6859      	ldr	r1, [r3, #4]
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	68db      	ldr	r3, [r3, #12]
 800a30c:	461a      	mov	r2, r3
 800a30e:	f000 f920 	bl	800a552 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	2160      	movs	r1, #96	; 0x60
 800a318:	4618      	mov	r0, r3
 800a31a:	f000 f94a 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 800a31e:	e019      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	6818      	ldr	r0, [r3, #0]
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	6859      	ldr	r1, [r3, #4]
 800a328:	683b      	ldr	r3, [r7, #0]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	461a      	mov	r2, r3
 800a32e:	f000 f8e1 	bl	800a4f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2140      	movs	r1, #64	; 0x40
 800a338:	4618      	mov	r0, r3
 800a33a:	f000 f93a 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 800a33e:	e009      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681a      	ldr	r2, [r3, #0]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4619      	mov	r1, r3
 800a34a:	4610      	mov	r0, r2
 800a34c:	f000 f931 	bl	800a5b2 <TIM_ITRx_SetConfig>
      break;
 800a350:	e000      	b.n	800a354 <HAL_TIM_ConfigClockSource+0x158>
      break;
 800a352:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	2201      	movs	r2, #1
 800a358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	2200      	movs	r2, #0
 800a360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a364:	2300      	movs	r3, #0
}
 800a366:	4618      	mov	r0, r3
 800a368:	3710      	adds	r7, #16
 800a36a:	46bd      	mov	sp, r7
 800a36c:	bd80      	pop	{r7, pc}

0800a36e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a36e:	b480      	push	{r7}
 800a370:	b083      	sub	sp, #12
 800a372:	af00      	add	r7, sp, #0
 800a374:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a376:	bf00      	nop
 800a378:	370c      	adds	r7, #12
 800a37a:	46bd      	mov	sp, r7
 800a37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a380:	4770      	bx	lr

0800a382 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a382:	b480      	push	{r7}
 800a384:	b083      	sub	sp, #12
 800a386:	af00      	add	r7, sp, #0
 800a388:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a38a:	bf00      	nop
 800a38c:	370c      	adds	r7, #12
 800a38e:	46bd      	mov	sp, r7
 800a390:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a394:	4770      	bx	lr

0800a396 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a396:	b480      	push	{r7}
 800a398:	b083      	sub	sp, #12
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a39e:	bf00      	nop
 800a3a0:	370c      	adds	r7, #12
 800a3a2:	46bd      	mov	sp, r7
 800a3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a8:	4770      	bx	lr

0800a3aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a3aa:	b480      	push	{r7}
 800a3ac:	b083      	sub	sp, #12
 800a3ae:	af00      	add	r7, sp, #0
 800a3b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a3b2:	bf00      	nop
 800a3b4:	370c      	adds	r7, #12
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3bc:	4770      	bx	lr
	...

0800a3c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	6078      	str	r0, [r7, #4]
 800a3c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	4a40      	ldr	r2, [pc, #256]	; (800a4d4 <TIM_Base_SetConfig+0x114>)
 800a3d4:	4293      	cmp	r3, r2
 800a3d6:	d013      	beq.n	800a400 <TIM_Base_SetConfig+0x40>
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a3de:	d00f      	beq.n	800a400 <TIM_Base_SetConfig+0x40>
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	4a3d      	ldr	r2, [pc, #244]	; (800a4d8 <TIM_Base_SetConfig+0x118>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d00b      	beq.n	800a400 <TIM_Base_SetConfig+0x40>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a3c      	ldr	r2, [pc, #240]	; (800a4dc <TIM_Base_SetConfig+0x11c>)
 800a3ec:	4293      	cmp	r3, r2
 800a3ee:	d007      	beq.n	800a400 <TIM_Base_SetConfig+0x40>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	4a3b      	ldr	r2, [pc, #236]	; (800a4e0 <TIM_Base_SetConfig+0x120>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d003      	beq.n	800a400 <TIM_Base_SetConfig+0x40>
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	4a3a      	ldr	r2, [pc, #232]	; (800a4e4 <TIM_Base_SetConfig+0x124>)
 800a3fc:	4293      	cmp	r3, r2
 800a3fe:	d108      	bne.n	800a412 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a406:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a408:	683b      	ldr	r3, [r7, #0]
 800a40a:	685b      	ldr	r3, [r3, #4]
 800a40c:	68fa      	ldr	r2, [r7, #12]
 800a40e:	4313      	orrs	r3, r2
 800a410:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	4a2f      	ldr	r2, [pc, #188]	; (800a4d4 <TIM_Base_SetConfig+0x114>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d01f      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a420:	d01b      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	4a2c      	ldr	r2, [pc, #176]	; (800a4d8 <TIM_Base_SetConfig+0x118>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d017      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	4a2b      	ldr	r2, [pc, #172]	; (800a4dc <TIM_Base_SetConfig+0x11c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d013      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	4a2a      	ldr	r2, [pc, #168]	; (800a4e0 <TIM_Base_SetConfig+0x120>)
 800a436:	4293      	cmp	r3, r2
 800a438:	d00f      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	4a29      	ldr	r2, [pc, #164]	; (800a4e4 <TIM_Base_SetConfig+0x124>)
 800a43e:	4293      	cmp	r3, r2
 800a440:	d00b      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	4a28      	ldr	r2, [pc, #160]	; (800a4e8 <TIM_Base_SetConfig+0x128>)
 800a446:	4293      	cmp	r3, r2
 800a448:	d007      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a27      	ldr	r2, [pc, #156]	; (800a4ec <TIM_Base_SetConfig+0x12c>)
 800a44e:	4293      	cmp	r3, r2
 800a450:	d003      	beq.n	800a45a <TIM_Base_SetConfig+0x9a>
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	4a26      	ldr	r2, [pc, #152]	; (800a4f0 <TIM_Base_SetConfig+0x130>)
 800a456:	4293      	cmp	r3, r2
 800a458:	d108      	bne.n	800a46c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a460:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a462:	683b      	ldr	r3, [r7, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	68fa      	ldr	r2, [r7, #12]
 800a468:	4313      	orrs	r3, r2
 800a46a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a472:	683b      	ldr	r3, [r7, #0]
 800a474:	695b      	ldr	r3, [r3, #20]
 800a476:	4313      	orrs	r3, r2
 800a478:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	68fa      	ldr	r2, [r7, #12]
 800a47e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a480:	683b      	ldr	r3, [r7, #0]
 800a482:	689a      	ldr	r2, [r3, #8]
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	681a      	ldr	r2, [r3, #0]
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	4a10      	ldr	r2, [pc, #64]	; (800a4d4 <TIM_Base_SetConfig+0x114>)
 800a494:	4293      	cmp	r3, r2
 800a496:	d00f      	beq.n	800a4b8 <TIM_Base_SetConfig+0xf8>
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	4a12      	ldr	r2, [pc, #72]	; (800a4e4 <TIM_Base_SetConfig+0x124>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	d00b      	beq.n	800a4b8 <TIM_Base_SetConfig+0xf8>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	4a11      	ldr	r2, [pc, #68]	; (800a4e8 <TIM_Base_SetConfig+0x128>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d007      	beq.n	800a4b8 <TIM_Base_SetConfig+0xf8>
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a10      	ldr	r2, [pc, #64]	; (800a4ec <TIM_Base_SetConfig+0x12c>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d003      	beq.n	800a4b8 <TIM_Base_SetConfig+0xf8>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	4a0f      	ldr	r2, [pc, #60]	; (800a4f0 <TIM_Base_SetConfig+0x130>)
 800a4b4:	4293      	cmp	r3, r2
 800a4b6:	d103      	bne.n	800a4c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a4b8:	683b      	ldr	r3, [r7, #0]
 800a4ba:	691a      	ldr	r2, [r3, #16]
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	615a      	str	r2, [r3, #20]
}
 800a4c6:	bf00      	nop
 800a4c8:	3714      	adds	r7, #20
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr
 800a4d2:	bf00      	nop
 800a4d4:	40012c00 	.word	0x40012c00
 800a4d8:	40000400 	.word	0x40000400
 800a4dc:	40000800 	.word	0x40000800
 800a4e0:	40000c00 	.word	0x40000c00
 800a4e4:	40013400 	.word	0x40013400
 800a4e8:	40014000 	.word	0x40014000
 800a4ec:	40014400 	.word	0x40014400
 800a4f0:	40014800 	.word	0x40014800

0800a4f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4f4:	b480      	push	{r7}
 800a4f6:	b087      	sub	sp, #28
 800a4f8:	af00      	add	r7, sp, #0
 800a4fa:	60f8      	str	r0, [r7, #12]
 800a4fc:	60b9      	str	r1, [r7, #8]
 800a4fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	6a1b      	ldr	r3, [r3, #32]
 800a504:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6a1b      	ldr	r3, [r3, #32]
 800a50a:	f023 0201 	bic.w	r2, r3, #1
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	699b      	ldr	r3, [r3, #24]
 800a516:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a51e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	011b      	lsls	r3, r3, #4
 800a524:	693a      	ldr	r2, [r7, #16]
 800a526:	4313      	orrs	r3, r2
 800a528:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a52a:	697b      	ldr	r3, [r7, #20]
 800a52c:	f023 030a 	bic.w	r3, r3, #10
 800a530:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4313      	orrs	r3, r2
 800a538:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	693a      	ldr	r2, [r7, #16]
 800a53e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	697a      	ldr	r2, [r7, #20]
 800a544:	621a      	str	r2, [r3, #32]
}
 800a546:	bf00      	nop
 800a548:	371c      	adds	r7, #28
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr

0800a552 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a552:	b480      	push	{r7}
 800a554:	b087      	sub	sp, #28
 800a556:	af00      	add	r7, sp, #0
 800a558:	60f8      	str	r0, [r7, #12]
 800a55a:	60b9      	str	r1, [r7, #8]
 800a55c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6a1b      	ldr	r3, [r3, #32]
 800a562:	f023 0210 	bic.w	r2, r3, #16
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	699b      	ldr	r3, [r3, #24]
 800a56e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	6a1b      	ldr	r3, [r3, #32]
 800a574:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a576:	697b      	ldr	r3, [r7, #20]
 800a578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a57c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	031b      	lsls	r3, r3, #12
 800a582:	697a      	ldr	r2, [r7, #20]
 800a584:	4313      	orrs	r3, r2
 800a586:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a588:	693b      	ldr	r3, [r7, #16]
 800a58a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a58e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	011b      	lsls	r3, r3, #4
 800a594:	693a      	ldr	r2, [r7, #16]
 800a596:	4313      	orrs	r3, r2
 800a598:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	693a      	ldr	r2, [r7, #16]
 800a5a4:	621a      	str	r2, [r3, #32]
}
 800a5a6:	bf00      	nop
 800a5a8:	371c      	adds	r7, #28
 800a5aa:	46bd      	mov	sp, r7
 800a5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b0:	4770      	bx	lr

0800a5b2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a5b2:	b480      	push	{r7}
 800a5b4:	b085      	sub	sp, #20
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
 800a5ba:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	689b      	ldr	r3, [r3, #8]
 800a5c0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5c8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	4313      	orrs	r3, r2
 800a5d0:	f043 0307 	orr.w	r3, r3, #7
 800a5d4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	68fa      	ldr	r2, [r7, #12]
 800a5da:	609a      	str	r2, [r3, #8]
}
 800a5dc:	bf00      	nop
 800a5de:	3714      	adds	r7, #20
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5e6:	4770      	bx	lr

0800a5e8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b087      	sub	sp, #28
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	60f8      	str	r0, [r7, #12]
 800a5f0:	60b9      	str	r1, [r7, #8]
 800a5f2:	607a      	str	r2, [r7, #4]
 800a5f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5fc:	697b      	ldr	r3, [r7, #20]
 800a5fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a602:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	021a      	lsls	r2, r3, #8
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	431a      	orrs	r2, r3
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	4313      	orrs	r3, r2
 800a610:	697a      	ldr	r2, [r7, #20]
 800a612:	4313      	orrs	r3, r2
 800a614:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	609a      	str	r2, [r3, #8]
}
 800a61c:	bf00      	nop
 800a61e:	371c      	adds	r7, #28
 800a620:	46bd      	mov	sp, r7
 800a622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a626:	4770      	bx	lr

0800a628 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a628:	b480      	push	{r7}
 800a62a:	b085      	sub	sp, #20
 800a62c:	af00      	add	r7, sp, #0
 800a62e:	6078      	str	r0, [r7, #4]
 800a630:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a638:	2b01      	cmp	r3, #1
 800a63a:	d101      	bne.n	800a640 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e068      	b.n	800a712 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	2201      	movs	r2, #1
 800a644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	681b      	ldr	r3, [r3, #0]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	689b      	ldr	r3, [r3, #8]
 800a65e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	4a2e      	ldr	r2, [pc, #184]	; (800a720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d004      	beq.n	800a674 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	4a2d      	ldr	r2, [pc, #180]	; (800a724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a670:	4293      	cmp	r3, r2
 800a672:	d108      	bne.n	800a686 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a67a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a67c:	683b      	ldr	r3, [r7, #0]
 800a67e:	685b      	ldr	r3, [r3, #4]
 800a680:	68fa      	ldr	r2, [r7, #12]
 800a682:	4313      	orrs	r3, r2
 800a684:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a68c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a68e:	683b      	ldr	r3, [r7, #0]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	68fa      	ldr	r2, [r7, #12]
 800a694:	4313      	orrs	r3, r2
 800a696:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a1e      	ldr	r2, [pc, #120]	; (800a720 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d01d      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6b2:	d018      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a1b      	ldr	r2, [pc, #108]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d013      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a1a      	ldr	r2, [pc, #104]	; (800a72c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d00e      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a18      	ldr	r2, [pc, #96]	; (800a730 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d009      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a13      	ldr	r2, [pc, #76]	; (800a724 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d004      	beq.n	800a6e6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a14      	ldr	r2, [pc, #80]	; (800a734 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d10c      	bne.n	800a700 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6e6:	68bb      	ldr	r3, [r7, #8]
 800a6e8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6ec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6ee:	683b      	ldr	r3, [r7, #0]
 800a6f0:	689b      	ldr	r3, [r3, #8]
 800a6f2:	68ba      	ldr	r2, [r7, #8]
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	68ba      	ldr	r2, [r7, #8]
 800a6fe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	2201      	movs	r2, #1
 800a704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2200      	movs	r2, #0
 800a70c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a710:	2300      	movs	r3, #0
}
 800a712:	4618      	mov	r0, r3
 800a714:	3714      	adds	r7, #20
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	40012c00 	.word	0x40012c00
 800a724:	40013400 	.word	0x40013400
 800a728:	40000400 	.word	0x40000400
 800a72c:	40000800 	.word	0x40000800
 800a730:	40000c00 	.word	0x40000c00
 800a734:	40014000 	.word	0x40014000

0800a738 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a760:	b480      	push	{r7}
 800a762:	b083      	sub	sp, #12
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a768:	bf00      	nop
 800a76a:	370c      	adds	r7, #12
 800a76c:	46bd      	mov	sp, r7
 800a76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a772:	4770      	bx	lr

0800a774 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a774:	b580      	push	{r7, lr}
 800a776:	b082      	sub	sp, #8
 800a778:	af00      	add	r7, sp, #0
 800a77a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a782:	2301      	movs	r3, #1
 800a784:	e040      	b.n	800a808 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d106      	bne.n	800a79c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f7fb fd80 	bl	800629c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2224      	movs	r2, #36	; 0x24
 800a7a0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	681a      	ldr	r2, [r3, #0]
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f022 0201 	bic.w	r2, r2, #1
 800a7b0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a7b2:	6878      	ldr	r0, [r7, #4]
 800a7b4:	f000 fabc 	bl	800ad30 <UART_SetConfig>
 800a7b8:	4603      	mov	r3, r0
 800a7ba:	2b01      	cmp	r3, #1
 800a7bc:	d101      	bne.n	800a7c2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a7be:	2301      	movs	r3, #1
 800a7c0:	e022      	b.n	800a808 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d002      	beq.n	800a7d0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a7ca:	6878      	ldr	r0, [r7, #4]
 800a7cc:	f000 fe22 	bl	800b414 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a7de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	689a      	ldr	r2, [r3, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	681a      	ldr	r2, [r3, #0]
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	f042 0201 	orr.w	r2, r2, #1
 800a7fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a800:	6878      	ldr	r0, [r7, #4]
 800a802:	f000 fea9 	bl	800b558 <UART_CheckIdleState>
 800a806:	4603      	mov	r3, r0
}
 800a808:	4618      	mov	r0, r3
 800a80a:	3708      	adds	r7, #8
 800a80c:	46bd      	mov	sp, r7
 800a80e:	bd80      	pop	{r7, pc}

0800a810 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b08a      	sub	sp, #40	; 0x28
 800a814:	af02      	add	r7, sp, #8
 800a816:	60f8      	str	r0, [r7, #12]
 800a818:	60b9      	str	r1, [r7, #8]
 800a81a:	603b      	str	r3, [r7, #0]
 800a81c:	4613      	mov	r3, r2
 800a81e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a824:	2b20      	cmp	r3, #32
 800a826:	f040 8081 	bne.w	800a92c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <HAL_UART_Transmit+0x26>
 800a830:	88fb      	ldrh	r3, [r7, #6]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d101      	bne.n	800a83a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a836:	2301      	movs	r3, #1
 800a838:	e079      	b.n	800a92e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a840:	2b01      	cmp	r3, #1
 800a842:	d101      	bne.n	800a848 <HAL_UART_Transmit+0x38>
 800a844:	2302      	movs	r3, #2
 800a846:	e072      	b.n	800a92e <HAL_UART_Transmit+0x11e>
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	2201      	movs	r2, #1
 800a84c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	2200      	movs	r2, #0
 800a854:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2221      	movs	r2, #33	; 0x21
 800a85a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800a85c:	f7fb feac 	bl	80065b8 <HAL_GetTick>
 800a860:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	88fa      	ldrh	r2, [r7, #6]
 800a866:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	88fa      	ldrh	r2, [r7, #6]
 800a86e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	689b      	ldr	r3, [r3, #8]
 800a876:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a87a:	d108      	bne.n	800a88e <HAL_UART_Transmit+0x7e>
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	691b      	ldr	r3, [r3, #16]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d104      	bne.n	800a88e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 800a884:	2300      	movs	r3, #0
 800a886:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800a888:	68bb      	ldr	r3, [r7, #8]
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	e003      	b.n	800a896 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800a88e:	68bb      	ldr	r3, [r7, #8]
 800a890:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a892:	2300      	movs	r3, #0
 800a894:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2200      	movs	r2, #0
 800a89a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800a89e:	e02d      	b.n	800a8fc <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	9300      	str	r3, [sp, #0]
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	2200      	movs	r2, #0
 800a8a8:	2180      	movs	r1, #128	; 0x80
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 fe99 	bl	800b5e2 <UART_WaitOnFlagUntilTimeout>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d001      	beq.n	800a8ba <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	e039      	b.n	800a92e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 800a8ba:	69fb      	ldr	r3, [r7, #28]
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d10b      	bne.n	800a8d8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	881a      	ldrh	r2, [r3, #0]
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8cc:	b292      	uxth	r2, r2
 800a8ce:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a8d0:	69bb      	ldr	r3, [r7, #24]
 800a8d2:	3302      	adds	r3, #2
 800a8d4:	61bb      	str	r3, [r7, #24]
 800a8d6:	e008      	b.n	800a8ea <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	781a      	ldrb	r2, [r3, #0]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	b292      	uxth	r2, r2
 800a8e2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8e4:	69fb      	ldr	r3, [r7, #28]
 800a8e6:	3301      	adds	r3, #1
 800a8e8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	b29a      	uxth	r2, r3
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a902:	b29b      	uxth	r3, r3
 800a904:	2b00      	cmp	r3, #0
 800a906:	d1cb      	bne.n	800a8a0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a908:	683b      	ldr	r3, [r7, #0]
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	2200      	movs	r2, #0
 800a910:	2140      	movs	r1, #64	; 0x40
 800a912:	68f8      	ldr	r0, [r7, #12]
 800a914:	f000 fe65 	bl	800b5e2 <UART_WaitOnFlagUntilTimeout>
 800a918:	4603      	mov	r3, r0
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d001      	beq.n	800a922 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800a91e:	2303      	movs	r3, #3
 800a920:	e005      	b.n	800a92e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	2220      	movs	r2, #32
 800a926:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 800a928:	2300      	movs	r3, #0
 800a92a:	e000      	b.n	800a92e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800a92c:	2302      	movs	r3, #2
  }
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3720      	adds	r7, #32
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
	...

0800a938 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a938:	b480      	push	{r7}
 800a93a:	b085      	sub	sp, #20
 800a93c:	af00      	add	r7, sp, #0
 800a93e:	60f8      	str	r0, [r7, #12]
 800a940:	60b9      	str	r1, [r7, #8]
 800a942:	4613      	mov	r3, r2
 800a944:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a94a:	2b20      	cmp	r3, #32
 800a94c:	f040 808a 	bne.w	800aa64 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d002      	beq.n	800a95c <HAL_UART_Receive_IT+0x24>
 800a956:	88fb      	ldrh	r3, [r7, #6]
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d101      	bne.n	800a960 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a95c:	2301      	movs	r3, #1
 800a95e:	e082      	b.n	800aa66 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a966:	2b01      	cmp	r3, #1
 800a968:	d101      	bne.n	800a96e <HAL_UART_Receive_IT+0x36>
 800a96a:	2302      	movs	r3, #2
 800a96c:	e07b      	b.n	800aa66 <HAL_UART_Receive_IT+0x12e>
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	2201      	movs	r2, #1
 800a972:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	68ba      	ldr	r2, [r7, #8]
 800a97a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	88fa      	ldrh	r2, [r7, #6]
 800a980:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	88fa      	ldrh	r2, [r7, #6]
 800a988:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	2200      	movs	r2, #0
 800a990:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a99a:	d10e      	bne.n	800a9ba <HAL_UART_Receive_IT+0x82>
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	691b      	ldr	r3, [r3, #16]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d105      	bne.n	800a9b0 <HAL_UART_Receive_IT+0x78>
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a9aa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9ae:	e02d      	b.n	800aa0c <HAL_UART_Receive_IT+0xd4>
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	22ff      	movs	r2, #255	; 0xff
 800a9b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9b8:	e028      	b.n	800aa0c <HAL_UART_Receive_IT+0xd4>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d10d      	bne.n	800a9de <HAL_UART_Receive_IT+0xa6>
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	691b      	ldr	r3, [r3, #16]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d104      	bne.n	800a9d4 <HAL_UART_Receive_IT+0x9c>
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	22ff      	movs	r2, #255	; 0xff
 800a9ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9d2:	e01b      	b.n	800aa0c <HAL_UART_Receive_IT+0xd4>
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	227f      	movs	r2, #127	; 0x7f
 800a9d8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9dc:	e016      	b.n	800aa0c <HAL_UART_Receive_IT+0xd4>
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	689b      	ldr	r3, [r3, #8]
 800a9e2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9e6:	d10d      	bne.n	800aa04 <HAL_UART_Receive_IT+0xcc>
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	691b      	ldr	r3, [r3, #16]
 800a9ec:	2b00      	cmp	r3, #0
 800a9ee:	d104      	bne.n	800a9fa <HAL_UART_Receive_IT+0xc2>
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	227f      	movs	r2, #127	; 0x7f
 800a9f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a9f8:	e008      	b.n	800aa0c <HAL_UART_Receive_IT+0xd4>
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	223f      	movs	r2, #63	; 0x3f
 800a9fe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa02:	e003      	b.n	800aa0c <HAL_UART_Receive_IT+0xd4>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	2200      	movs	r2, #0
 800aa08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2222      	movs	r2, #34	; 0x22
 800aa16:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	689a      	ldr	r2, [r3, #8]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f042 0201 	orr.w	r2, r2, #1
 800aa26:	609a      	str	r2, [r3, #8]
      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
    }
#else
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	689b      	ldr	r3, [r3, #8]
 800aa2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa30:	d107      	bne.n	800aa42 <HAL_UART_Receive_IT+0x10a>
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	691b      	ldr	r3, [r3, #16]
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d103      	bne.n	800aa42 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	4a0d      	ldr	r2, [pc, #52]	; (800aa74 <HAL_UART_Receive_IT+0x13c>)
 800aa3e:	661a      	str	r2, [r3, #96]	; 0x60
 800aa40:	e002      	b.n	800aa48 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	4a0c      	ldr	r2, [pc, #48]	; (800aa78 <HAL_UART_Receive_IT+0x140>)
 800aa46:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	2200      	movs	r2, #0
 800aa4c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	681a      	ldr	r2, [r3, #0]
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800aa5e:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 800aa60:	2300      	movs	r3, #0
 800aa62:	e000      	b.n	800aa66 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800aa64:	2302      	movs	r3, #2
  }
}
 800aa66:	4618      	mov	r0, r3
 800aa68:	3714      	adds	r7, #20
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	0800b821 	.word	0x0800b821
 800aa78:	0800b777 	.word	0x0800b777

0800aa7c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	b088      	sub	sp, #32
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	69db      	ldr	r3, [r3, #28]
 800aa8a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	689b      	ldr	r3, [r3, #8]
 800aa9a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aa9c:	69fa      	ldr	r2, [r7, #28]
 800aa9e:	f640 030f 	movw	r3, #2063	; 0x80f
 800aaa2:	4013      	ands	r3, r2
 800aaa4:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800aaa6:	693b      	ldr	r3, [r7, #16]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d113      	bne.n	800aad4 <HAL_UART_IRQHandler+0x58>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800aaac:	69fb      	ldr	r3, [r7, #28]
 800aaae:	f003 0320 	and.w	r3, r3, #32
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d00e      	beq.n	800aad4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aab6:	69bb      	ldr	r3, [r7, #24]
 800aab8:	f003 0320 	and.w	r3, r3, #32
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d009      	beq.n	800aad4 <HAL_UART_IRQHandler+0x58>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	f000 8114 	beq.w	800acf2 <HAL_UART_IRQHandler+0x276>
      {
        huart->RxISR(huart);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aace:	6878      	ldr	r0, [r7, #4]
 800aad0:	4798      	blx	r3
      }
      return;
 800aad2:	e10e      	b.n	800acf2 <HAL_UART_IRQHandler+0x276>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	f000 80d6 	beq.w	800ac88 <HAL_UART_IRQHandler+0x20c>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800aadc:	697b      	ldr	r3, [r7, #20]
 800aade:	f003 0301 	and.w	r3, r3, #1
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d105      	bne.n	800aaf2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800aae6:	69bb      	ldr	r3, [r7, #24]
 800aae8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800aaec:	2b00      	cmp	r3, #0
 800aaee:	f000 80cb 	beq.w	800ac88 <HAL_UART_IRQHandler+0x20c>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	f003 0301 	and.w	r3, r3, #1
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	d00e      	beq.n	800ab1a <HAL_UART_IRQHandler+0x9e>
 800aafc:	69bb      	ldr	r3, [r7, #24]
 800aafe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d009      	beq.n	800ab1a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	2201      	movs	r2, #1
 800ab0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab12:	f043 0201 	orr.w	r2, r3, #1
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab1a:	69fb      	ldr	r3, [r7, #28]
 800ab1c:	f003 0302 	and.w	r3, r3, #2
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d00e      	beq.n	800ab42 <HAL_UART_IRQHandler+0xc6>
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f003 0301 	and.w	r3, r3, #1
 800ab2a:	2b00      	cmp	r3, #0
 800ab2c:	d009      	beq.n	800ab42 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	2202      	movs	r2, #2
 800ab34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab3a:	f043 0204 	orr.w	r2, r3, #4
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab42:	69fb      	ldr	r3, [r7, #28]
 800ab44:	f003 0304 	and.w	r3, r3, #4
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d00e      	beq.n	800ab6a <HAL_UART_IRQHandler+0xee>
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	f003 0301 	and.w	r3, r3, #1
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d009      	beq.n	800ab6a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	2204      	movs	r2, #4
 800ab5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab62:	f043 0202 	orr.w	r2, r3, #2
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	67da      	str	r2, [r3, #124]	; 0x7c
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ab6a:	69fb      	ldr	r3, [r7, #28]
 800ab6c:	f003 0308 	and.w	r3, r3, #8
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d013      	beq.n	800ab9c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	f003 0320 	and.w	r3, r3, #32
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d104      	bne.n	800ab88 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ab7e:	697b      	ldr	r3, [r7, #20]
 800ab80:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d009      	beq.n	800ab9c <HAL_UART_IRQHandler+0x120>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2208      	movs	r2, #8
 800ab8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab94:	f043 0208 	orr.w	r2, r3, #8
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ab9c:	69fb      	ldr	r3, [r7, #28]
 800ab9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d00f      	beq.n	800abc6 <HAL_UART_IRQHandler+0x14a>
 800aba6:	69bb      	ldr	r3, [r7, #24]
 800aba8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00a      	beq.n	800abc6 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800abb8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abbe:	f043 0220 	orr.w	r2, r3, #32
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f000 8093 	beq.w	800acf6 <HAL_UART_IRQHandler+0x27a>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800abd0:	69fb      	ldr	r3, [r7, #28]
 800abd2:	f003 0320 	and.w	r3, r3, #32
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00c      	beq.n	800abf4 <HAL_UART_IRQHandler+0x178>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800abda:	69bb      	ldr	r3, [r7, #24]
 800abdc:	f003 0320 	and.w	r3, r3, #32
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d007      	beq.n	800abf4 <HAL_UART_IRQHandler+0x178>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d003      	beq.n	800abf4 <HAL_UART_IRQHandler+0x178>
        {
          huart->RxISR(huart);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abf0:	6878      	ldr	r0, [r7, #4]
 800abf2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abf8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	689b      	ldr	r3, [r3, #8]
 800ac00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac04:	2b40      	cmp	r3, #64	; 0x40
 800ac06:	d004      	beq.n	800ac12 <HAL_UART_IRQHandler+0x196>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d031      	beq.n	800ac76 <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac12:	6878      	ldr	r0, [r7, #4]
 800ac14:	f000 fd60 	bl	800b6d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	689b      	ldr	r3, [r3, #8]
 800ac1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac22:	2b40      	cmp	r3, #64	; 0x40
 800ac24:	d123      	bne.n	800ac6e <HAL_UART_IRQHandler+0x1f2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	689a      	ldr	r2, [r3, #8]
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac34:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d013      	beq.n	800ac66 <HAL_UART_IRQHandler+0x1ea>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac42:	4a30      	ldr	r2, [pc, #192]	; (800ad04 <HAL_UART_IRQHandler+0x288>)
 800ac44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	f7fb fdf3 	bl	8006836 <HAL_DMA_Abort_IT>
 800ac50:	4603      	mov	r3, r0
 800ac52:	2b00      	cmp	r3, #0
 800ac54:	d016      	beq.n	800ac84 <HAL_UART_IRQHandler+0x208>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ac60:	4610      	mov	r0, r2
 800ac62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac64:	e00e      	b.n	800ac84 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ac66:	6878      	ldr	r0, [r7, #4]
 800ac68:	f000 f858 	bl	800ad1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac6c:	e00a      	b.n	800ac84 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 f854 	bl	800ad1c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac74:	e006      	b.n	800ac84 <HAL_UART_IRQHandler+0x208>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ac76:	6878      	ldr	r0, [r7, #4]
 800ac78:	f000 f850 	bl	800ad1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	2200      	movs	r2, #0
 800ac80:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800ac82:	e038      	b.n	800acf6 <HAL_UART_IRQHandler+0x27a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac84:	bf00      	nop
    return;
 800ac86:	e036      	b.n	800acf6 <HAL_UART_IRQHandler+0x27a>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00d      	beq.n	800acae <HAL_UART_IRQHandler+0x232>
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d008      	beq.n	800acae <HAL_UART_IRQHandler+0x232>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800aca4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800aca6:	6878      	ldr	r0, [r7, #4]
 800aca8:	f000 fe0f 	bl	800b8ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800acac:	e026      	b.n	800acfc <HAL_UART_IRQHandler+0x280>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800acae:	69fb      	ldr	r3, [r7, #28]
 800acb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d00d      	beq.n	800acd4 <HAL_UART_IRQHandler+0x258>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800acb8:	69bb      	ldr	r3, [r7, #24]
 800acba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acbe:	2b00      	cmp	r3, #0
 800acc0:	d008      	beq.n	800acd4 <HAL_UART_IRQHandler+0x258>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d017      	beq.n	800acfa <HAL_UART_IRQHandler+0x27e>
    {
      huart->TxISR(huart);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acce:	6878      	ldr	r0, [r7, #4]
 800acd0:	4798      	blx	r3
    }
    return;
 800acd2:	e012      	b.n	800acfa <HAL_UART_IRQHandler+0x27e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d00e      	beq.n	800acfc <HAL_UART_IRQHandler+0x280>
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d009      	beq.n	800acfc <HAL_UART_IRQHandler+0x280>
  {
    UART_EndTransmit_IT(huart);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fd2b 	bl	800b744 <UART_EndTransmit_IT>
    return;
 800acee:	bf00      	nop
 800acf0:	e004      	b.n	800acfc <HAL_UART_IRQHandler+0x280>
      return;
 800acf2:	bf00      	nop
 800acf4:	e002      	b.n	800acfc <HAL_UART_IRQHandler+0x280>
    return;
 800acf6:	bf00      	nop
 800acf8:	e000      	b.n	800acfc <HAL_UART_IRQHandler+0x280>
    return;
 800acfa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 800acfc:	3720      	adds	r7, #32
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}
 800ad02:	bf00      	nop
 800ad04:	0800b719 	.word	0x0800b719

0800ad08 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad08:	b480      	push	{r7}
 800ad0a:	b083      	sub	sp, #12
 800ad0c:	af00      	add	r7, sp, #0
 800ad0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad10:	bf00      	nop
 800ad12:	370c      	adds	r7, #12
 800ad14:	46bd      	mov	sp, r7
 800ad16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad1a:	4770      	bx	lr

0800ad1c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad1c:	b480      	push	{r7}
 800ad1e:	b083      	sub	sp, #12
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad24:	bf00      	nop
 800ad26:	370c      	adds	r7, #12
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr

0800ad30 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad30:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800ad34:	b08a      	sub	sp, #40	; 0x28
 800ad36:	af00      	add	r7, sp, #0
 800ad38:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800ad42:	2300      	movs	r3, #0
 800ad44:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	689a      	ldr	r2, [r3, #8]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	431a      	orrs	r2, r3
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	695b      	ldr	r3, [r3, #20]
 800ad54:	431a      	orrs	r2, r3
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	69db      	ldr	r3, [r3, #28]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	4bb8      	ldr	r3, [pc, #736]	; (800b048 <UART_SetConfig+0x318>)
 800ad66:	4013      	ands	r3, r2
 800ad68:	687a      	ldr	r2, [r7, #4]
 800ad6a:	6812      	ldr	r2, [r2, #0]
 800ad6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ad6e:	430b      	orrs	r3, r1
 800ad70:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	685b      	ldr	r3, [r3, #4]
 800ad78:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	68da      	ldr	r2, [r3, #12]
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	430a      	orrs	r2, r1
 800ad86:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	4aae      	ldr	r2, [pc, #696]	; (800b04c <UART_SetConfig+0x31c>)
 800ad94:	4293      	cmp	r3, r2
 800ad96:	d004      	beq.n	800ada2 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6a1b      	ldr	r3, [r3, #32]
 800ad9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad9e:	4313      	orrs	r3, r2
 800ada0:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	689b      	ldr	r3, [r3, #8]
 800ada8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800adb2:	430a      	orrs	r2, r1
 800adb4:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4aa5      	ldr	r2, [pc, #660]	; (800b050 <UART_SetConfig+0x320>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d126      	bne.n	800ae0e <UART_SetConfig+0xde>
 800adc0:	4ba4      	ldr	r3, [pc, #656]	; (800b054 <UART_SetConfig+0x324>)
 800adc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800adc6:	f003 0303 	and.w	r3, r3, #3
 800adca:	2b03      	cmp	r3, #3
 800adcc:	d81a      	bhi.n	800ae04 <UART_SetConfig+0xd4>
 800adce:	a201      	add	r2, pc, #4	; (adr r2, 800add4 <UART_SetConfig+0xa4>)
 800add0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800add4:	0800ade5 	.word	0x0800ade5
 800add8:	0800adf5 	.word	0x0800adf5
 800addc:	0800aded 	.word	0x0800aded
 800ade0:	0800adfd 	.word	0x0800adfd
 800ade4:	2301      	movs	r3, #1
 800ade6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800adea:	e105      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800adec:	2302      	movs	r3, #2
 800adee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800adf2:	e101      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800adf4:	2304      	movs	r3, #4
 800adf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800adfa:	e0fd      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800adfc:	2308      	movs	r3, #8
 800adfe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae02:	e0f9      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800ae04:	2310      	movs	r3, #16
 800ae06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae0a:	bf00      	nop
 800ae0c:	e0f4      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	4a91      	ldr	r2, [pc, #580]	; (800b058 <UART_SetConfig+0x328>)
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d138      	bne.n	800ae8a <UART_SetConfig+0x15a>
 800ae18:	4b8e      	ldr	r3, [pc, #568]	; (800b054 <UART_SetConfig+0x324>)
 800ae1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae1e:	f003 030c 	and.w	r3, r3, #12
 800ae22:	2b0c      	cmp	r3, #12
 800ae24:	d82c      	bhi.n	800ae80 <UART_SetConfig+0x150>
 800ae26:	a201      	add	r2, pc, #4	; (adr r2, 800ae2c <UART_SetConfig+0xfc>)
 800ae28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae2c:	0800ae61 	.word	0x0800ae61
 800ae30:	0800ae81 	.word	0x0800ae81
 800ae34:	0800ae81 	.word	0x0800ae81
 800ae38:	0800ae81 	.word	0x0800ae81
 800ae3c:	0800ae71 	.word	0x0800ae71
 800ae40:	0800ae81 	.word	0x0800ae81
 800ae44:	0800ae81 	.word	0x0800ae81
 800ae48:	0800ae81 	.word	0x0800ae81
 800ae4c:	0800ae69 	.word	0x0800ae69
 800ae50:	0800ae81 	.word	0x0800ae81
 800ae54:	0800ae81 	.word	0x0800ae81
 800ae58:	0800ae81 	.word	0x0800ae81
 800ae5c:	0800ae79 	.word	0x0800ae79
 800ae60:	2300      	movs	r3, #0
 800ae62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae66:	e0c7      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae6e:	e0c3      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800ae70:	2304      	movs	r3, #4
 800ae72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae76:	e0bf      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800ae78:	2308      	movs	r3, #8
 800ae7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae7e:	e0bb      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800ae80:	2310      	movs	r3, #16
 800ae82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800ae86:	bf00      	nop
 800ae88:	e0b6      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	4a73      	ldr	r2, [pc, #460]	; (800b05c <UART_SetConfig+0x32c>)
 800ae90:	4293      	cmp	r3, r2
 800ae92:	d125      	bne.n	800aee0 <UART_SetConfig+0x1b0>
 800ae94:	4b6f      	ldr	r3, [pc, #444]	; (800b054 <UART_SetConfig+0x324>)
 800ae96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ae9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800ae9e:	2b10      	cmp	r3, #16
 800aea0:	d011      	beq.n	800aec6 <UART_SetConfig+0x196>
 800aea2:	2b10      	cmp	r3, #16
 800aea4:	d802      	bhi.n	800aeac <UART_SetConfig+0x17c>
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d005      	beq.n	800aeb6 <UART_SetConfig+0x186>
 800aeaa:	e014      	b.n	800aed6 <UART_SetConfig+0x1a6>
 800aeac:	2b20      	cmp	r3, #32
 800aeae:	d006      	beq.n	800aebe <UART_SetConfig+0x18e>
 800aeb0:	2b30      	cmp	r3, #48	; 0x30
 800aeb2:	d00c      	beq.n	800aece <UART_SetConfig+0x19e>
 800aeb4:	e00f      	b.n	800aed6 <UART_SetConfig+0x1a6>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aebc:	e09c      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800aebe:	2302      	movs	r3, #2
 800aec0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aec4:	e098      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800aec6:	2304      	movs	r3, #4
 800aec8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aecc:	e094      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800aece:	2308      	movs	r3, #8
 800aed0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aed4:	e090      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800aed6:	2310      	movs	r3, #16
 800aed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800aedc:	bf00      	nop
 800aede:	e08b      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a5e      	ldr	r2, [pc, #376]	; (800b060 <UART_SetConfig+0x330>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d125      	bne.n	800af36 <UART_SetConfig+0x206>
 800aeea:	4b5a      	ldr	r3, [pc, #360]	; (800b054 <UART_SetConfig+0x324>)
 800aeec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aef0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aef4:	2b40      	cmp	r3, #64	; 0x40
 800aef6:	d011      	beq.n	800af1c <UART_SetConfig+0x1ec>
 800aef8:	2b40      	cmp	r3, #64	; 0x40
 800aefa:	d802      	bhi.n	800af02 <UART_SetConfig+0x1d2>
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d005      	beq.n	800af0c <UART_SetConfig+0x1dc>
 800af00:	e014      	b.n	800af2c <UART_SetConfig+0x1fc>
 800af02:	2b80      	cmp	r3, #128	; 0x80
 800af04:	d006      	beq.n	800af14 <UART_SetConfig+0x1e4>
 800af06:	2bc0      	cmp	r3, #192	; 0xc0
 800af08:	d00c      	beq.n	800af24 <UART_SetConfig+0x1f4>
 800af0a:	e00f      	b.n	800af2c <UART_SetConfig+0x1fc>
 800af0c:	2300      	movs	r3, #0
 800af0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af12:	e071      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af14:	2302      	movs	r3, #2
 800af16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af1a:	e06d      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af1c:	2304      	movs	r3, #4
 800af1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af22:	e069      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af24:	2308      	movs	r3, #8
 800af26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af2a:	e065      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af2c:	2310      	movs	r3, #16
 800af2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af32:	bf00      	nop
 800af34:	e060      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4a4a      	ldr	r2, [pc, #296]	; (800b064 <UART_SetConfig+0x334>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d129      	bne.n	800af94 <UART_SetConfig+0x264>
 800af40:	4b44      	ldr	r3, [pc, #272]	; (800b054 <UART_SetConfig+0x324>)
 800af42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af4e:	d014      	beq.n	800af7a <UART_SetConfig+0x24a>
 800af50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af54:	d802      	bhi.n	800af5c <UART_SetConfig+0x22c>
 800af56:	2b00      	cmp	r3, #0
 800af58:	d007      	beq.n	800af6a <UART_SetConfig+0x23a>
 800af5a:	e016      	b.n	800af8a <UART_SetConfig+0x25a>
 800af5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af60:	d007      	beq.n	800af72 <UART_SetConfig+0x242>
 800af62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af66:	d00c      	beq.n	800af82 <UART_SetConfig+0x252>
 800af68:	e00f      	b.n	800af8a <UART_SetConfig+0x25a>
 800af6a:	2300      	movs	r3, #0
 800af6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af70:	e042      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af72:	2302      	movs	r3, #2
 800af74:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af78:	e03e      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af7a:	2304      	movs	r3, #4
 800af7c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af80:	e03a      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af82:	2308      	movs	r3, #8
 800af84:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af88:	e036      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af8a:	2310      	movs	r3, #16
 800af8c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800af90:	bf00      	nop
 800af92:	e031      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	4a2c      	ldr	r2, [pc, #176]	; (800b04c <UART_SetConfig+0x31c>)
 800af9a:	4293      	cmp	r3, r2
 800af9c:	d129      	bne.n	800aff2 <UART_SetConfig+0x2c2>
 800af9e:	4b2d      	ldr	r3, [pc, #180]	; (800b054 <UART_SetConfig+0x324>)
 800afa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afa4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afac:	d014      	beq.n	800afd8 <UART_SetConfig+0x2a8>
 800afae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afb2:	d802      	bhi.n	800afba <UART_SetConfig+0x28a>
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d007      	beq.n	800afc8 <UART_SetConfig+0x298>
 800afb8:	e016      	b.n	800afe8 <UART_SetConfig+0x2b8>
 800afba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afbe:	d007      	beq.n	800afd0 <UART_SetConfig+0x2a0>
 800afc0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afc4:	d00c      	beq.n	800afe0 <UART_SetConfig+0x2b0>
 800afc6:	e00f      	b.n	800afe8 <UART_SetConfig+0x2b8>
 800afc8:	2300      	movs	r3, #0
 800afca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afce:	e013      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800afd0:	2302      	movs	r3, #2
 800afd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afd6:	e00f      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800afd8:	2304      	movs	r3, #4
 800afda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afde:	e00b      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800afe0:	2308      	movs	r3, #8
 800afe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afe6:	e007      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800afe8:	2310      	movs	r3, #16
 800afea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800afee:	bf00      	nop
 800aff0:	e002      	b.n	800aff8 <UART_SetConfig+0x2c8>
 800aff2:	2310      	movs	r3, #16
 800aff4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	4a13      	ldr	r2, [pc, #76]	; (800b04c <UART_SetConfig+0x31c>)
 800affe:	4293      	cmp	r3, r2
 800b000:	f040 80fe 	bne.w	800b200 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b004:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b008:	2b08      	cmp	r3, #8
 800b00a:	d837      	bhi.n	800b07c <UART_SetConfig+0x34c>
 800b00c:	a201      	add	r2, pc, #4	; (adr r2, 800b014 <UART_SetConfig+0x2e4>)
 800b00e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b012:	bf00      	nop
 800b014:	0800b039 	.word	0x0800b039
 800b018:	0800b07d 	.word	0x0800b07d
 800b01c:	0800b041 	.word	0x0800b041
 800b020:	0800b07d 	.word	0x0800b07d
 800b024:	0800b06d 	.word	0x0800b06d
 800b028:	0800b07d 	.word	0x0800b07d
 800b02c:	0800b07d 	.word	0x0800b07d
 800b030:	0800b07d 	.word	0x0800b07d
 800b034:	0800b075 	.word	0x0800b075
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800b038:	f7fd f950 	bl	80082dc <HAL_RCC_GetPCLK1Freq>
 800b03c:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b03e:	e020      	b.n	800b082 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800b040:	4b09      	ldr	r3, [pc, #36]	; (800b068 <UART_SetConfig+0x338>)
 800b042:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b044:	e01d      	b.n	800b082 <UART_SetConfig+0x352>
 800b046:	bf00      	nop
 800b048:	efff69f3 	.word	0xefff69f3
 800b04c:	40008000 	.word	0x40008000
 800b050:	40013800 	.word	0x40013800
 800b054:	40021000 	.word	0x40021000
 800b058:	40004400 	.word	0x40004400
 800b05c:	40004800 	.word	0x40004800
 800b060:	40004c00 	.word	0x40004c00
 800b064:	40005000 	.word	0x40005000
 800b068:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800b06c:	f7fd f8a0 	bl	80081b0 <HAL_RCC_GetSysClockFreq>
 800b070:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b072:	e006      	b.n	800b082 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800b074:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b078:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b07a:	e002      	b.n	800b082 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800b07c:	2301      	movs	r3, #1
 800b07e:	76fb      	strb	r3, [r7, #27]
        break;
 800b080:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 81b9 	beq.w	800b3fc <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685a      	ldr	r2, [r3, #4]
 800b08e:	4613      	mov	r3, r2
 800b090:	005b      	lsls	r3, r3, #1
 800b092:	4413      	add	r3, r2
 800b094:	697a      	ldr	r2, [r7, #20]
 800b096:	429a      	cmp	r2, r3
 800b098:	d305      	bcc.n	800b0a6 <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	685b      	ldr	r3, [r3, #4]
 800b09e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800b0a0:	697a      	ldr	r2, [r7, #20]
 800b0a2:	429a      	cmp	r2, r3
 800b0a4:	d902      	bls.n	800b0ac <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	76fb      	strb	r3, [r7, #27]
 800b0aa:	e1a7      	b.n	800b3fc <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800b0ac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b0b0:	2b08      	cmp	r3, #8
 800b0b2:	f200 8092 	bhi.w	800b1da <UART_SetConfig+0x4aa>
 800b0b6:	a201      	add	r2, pc, #4	; (adr r2, 800b0bc <UART_SetConfig+0x38c>)
 800b0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0bc:	0800b0e1 	.word	0x0800b0e1
 800b0c0:	0800b1db 	.word	0x0800b1db
 800b0c4:	0800b12f 	.word	0x0800b12f
 800b0c8:	0800b1db 	.word	0x0800b1db
 800b0cc:	0800b163 	.word	0x0800b163
 800b0d0:	0800b1db 	.word	0x0800b1db
 800b0d4:	0800b1db 	.word	0x0800b1db
 800b0d8:	0800b1db 	.word	0x0800b1db
 800b0dc:	0800b1b1 	.word	0x0800b1b1
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800b0e0:	f7fd f8fc 	bl	80082dc <HAL_RCC_GetPCLK1Freq>
 800b0e4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b0e6:	693b      	ldr	r3, [r7, #16]
 800b0e8:	4619      	mov	r1, r3
 800b0ea:	f04f 0200 	mov.w	r2, #0
 800b0ee:	f04f 0300 	mov.w	r3, #0
 800b0f2:	f04f 0400 	mov.w	r4, #0
 800b0f6:	0214      	lsls	r4, r2, #8
 800b0f8:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b0fc:	020b      	lsls	r3, r1, #8
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	6852      	ldr	r2, [r2, #4]
 800b102:	0852      	lsrs	r2, r2, #1
 800b104:	4611      	mov	r1, r2
 800b106:	f04f 0200 	mov.w	r2, #0
 800b10a:	eb13 0b01 	adds.w	fp, r3, r1
 800b10e:	eb44 0c02 	adc.w	ip, r4, r2
 800b112:	4658      	mov	r0, fp
 800b114:	4661      	mov	r1, ip
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	f04f 0400 	mov.w	r4, #0
 800b11e:	461a      	mov	r2, r3
 800b120:	4623      	mov	r3, r4
 800b122:	f7f5 fe11 	bl	8000d48 <__aeabi_uldivmod>
 800b126:	4603      	mov	r3, r0
 800b128:	460c      	mov	r4, r1
 800b12a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b12c:	e058      	b.n	800b1e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	085b      	lsrs	r3, r3, #1
 800b134:	f04f 0400 	mov.w	r4, #0
 800b138:	49ae      	ldr	r1, [pc, #696]	; (800b3f4 <UART_SetConfig+0x6c4>)
 800b13a:	f04f 0200 	mov.w	r2, #0
 800b13e:	eb13 0b01 	adds.w	fp, r3, r1
 800b142:	eb44 0c02 	adc.w	ip, r4, r2
 800b146:	4658      	mov	r0, fp
 800b148:	4661      	mov	r1, ip
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	685b      	ldr	r3, [r3, #4]
 800b14e:	f04f 0400 	mov.w	r4, #0
 800b152:	461a      	mov	r2, r3
 800b154:	4623      	mov	r3, r4
 800b156:	f7f5 fdf7 	bl	8000d48 <__aeabi_uldivmod>
 800b15a:	4603      	mov	r3, r0
 800b15c:	460c      	mov	r4, r1
 800b15e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b160:	e03e      	b.n	800b1e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800b162:	f7fd f825 	bl	80081b0 <HAL_RCC_GetSysClockFreq>
 800b166:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b168:	693b      	ldr	r3, [r7, #16]
 800b16a:	4619      	mov	r1, r3
 800b16c:	f04f 0200 	mov.w	r2, #0
 800b170:	f04f 0300 	mov.w	r3, #0
 800b174:	f04f 0400 	mov.w	r4, #0
 800b178:	0214      	lsls	r4, r2, #8
 800b17a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800b17e:	020b      	lsls	r3, r1, #8
 800b180:	687a      	ldr	r2, [r7, #4]
 800b182:	6852      	ldr	r2, [r2, #4]
 800b184:	0852      	lsrs	r2, r2, #1
 800b186:	4611      	mov	r1, r2
 800b188:	f04f 0200 	mov.w	r2, #0
 800b18c:	eb13 0b01 	adds.w	fp, r3, r1
 800b190:	eb44 0c02 	adc.w	ip, r4, r2
 800b194:	4658      	mov	r0, fp
 800b196:	4661      	mov	r1, ip
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	685b      	ldr	r3, [r3, #4]
 800b19c:	f04f 0400 	mov.w	r4, #0
 800b1a0:	461a      	mov	r2, r3
 800b1a2:	4623      	mov	r3, r4
 800b1a4:	f7f5 fdd0 	bl	8000d48 <__aeabi_uldivmod>
 800b1a8:	4603      	mov	r3, r0
 800b1aa:	460c      	mov	r4, r1
 800b1ac:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b1ae:	e017      	b.n	800b1e0 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	085b      	lsrs	r3, r3, #1
 800b1b6:	f04f 0400 	mov.w	r4, #0
 800b1ba:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800b1be:	f144 0100 	adc.w	r1, r4, #0
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f04f 0400 	mov.w	r4, #0
 800b1ca:	461a      	mov	r2, r3
 800b1cc:	4623      	mov	r3, r4
 800b1ce:	f7f5 fdbb 	bl	8000d48 <__aeabi_uldivmod>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	460c      	mov	r4, r1
 800b1d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800b1d8:	e002      	b.n	800b1e0 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	76fb      	strb	r3, [r7, #27]
            break;
 800b1de:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b1e0:	69fb      	ldr	r3, [r7, #28]
 800b1e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b1e6:	d308      	bcc.n	800b1fa <UART_SetConfig+0x4ca>
 800b1e8:	69fb      	ldr	r3, [r7, #28]
 800b1ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1ee:	d204      	bcs.n	800b1fa <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	69fa      	ldr	r2, [r7, #28]
 800b1f6:	60da      	str	r2, [r3, #12]
 800b1f8:	e100      	b.n	800b3fc <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	76fb      	strb	r3, [r7, #27]
 800b1fe:	e0fd      	b.n	800b3fc <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b208:	f040 8084 	bne.w	800b314 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800b20c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b210:	2b08      	cmp	r3, #8
 800b212:	d85f      	bhi.n	800b2d4 <UART_SetConfig+0x5a4>
 800b214:	a201      	add	r2, pc, #4	; (adr r2, 800b21c <UART_SetConfig+0x4ec>)
 800b216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b21a:	bf00      	nop
 800b21c:	0800b241 	.word	0x0800b241
 800b220:	0800b261 	.word	0x0800b261
 800b224:	0800b281 	.word	0x0800b281
 800b228:	0800b2d5 	.word	0x0800b2d5
 800b22c:	0800b29d 	.word	0x0800b29d
 800b230:	0800b2d5 	.word	0x0800b2d5
 800b234:	0800b2d5 	.word	0x0800b2d5
 800b238:	0800b2d5 	.word	0x0800b2d5
 800b23c:	0800b2bd 	.word	0x0800b2bd
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b240:	f7fd f84c 	bl	80082dc <HAL_RCC_GetPCLK1Freq>
 800b244:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b246:	693b      	ldr	r3, [r7, #16]
 800b248:	005a      	lsls	r2, r3, #1
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	085b      	lsrs	r3, r3, #1
 800b250:	441a      	add	r2, r3
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	685b      	ldr	r3, [r3, #4]
 800b256:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25a:	b29b      	uxth	r3, r3
 800b25c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b25e:	e03c      	b.n	800b2da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b260:	f7fd f852 	bl	8008308 <HAL_RCC_GetPCLK2Freq>
 800b264:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b266:	693b      	ldr	r3, [r7, #16]
 800b268:	005a      	lsls	r2, r3, #1
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	085b      	lsrs	r3, r3, #1
 800b270:	441a      	add	r2, r3
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	685b      	ldr	r3, [r3, #4]
 800b276:	fbb2 f3f3 	udiv	r3, r2, r3
 800b27a:	b29b      	uxth	r3, r3
 800b27c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b27e:	e02c      	b.n	800b2da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	685b      	ldr	r3, [r3, #4]
 800b284:	085b      	lsrs	r3, r3, #1
 800b286:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800b28a:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800b28e:	687a      	ldr	r2, [r7, #4]
 800b290:	6852      	ldr	r2, [r2, #4]
 800b292:	fbb3 f3f2 	udiv	r3, r3, r2
 800b296:	b29b      	uxth	r3, r3
 800b298:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b29a:	e01e      	b.n	800b2da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b29c:	f7fc ff88 	bl	80081b0 <HAL_RCC_GetSysClockFreq>
 800b2a0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	005a      	lsls	r2, r3, #1
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	685b      	ldr	r3, [r3, #4]
 800b2aa:	085b      	lsrs	r3, r3, #1
 800b2ac:	441a      	add	r2, r3
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	685b      	ldr	r3, [r3, #4]
 800b2b2:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b2ba:	e00e      	b.n	800b2da <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	685b      	ldr	r3, [r3, #4]
 800b2c0:	085b      	lsrs	r3, r3, #1
 800b2c2:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	685b      	ldr	r3, [r3, #4]
 800b2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2ce:	b29b      	uxth	r3, r3
 800b2d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b2d2:	e002      	b.n	800b2da <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800b2d4:	2301      	movs	r3, #1
 800b2d6:	76fb      	strb	r3, [r7, #27]
        break;
 800b2d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	2b0f      	cmp	r3, #15
 800b2de:	d916      	bls.n	800b30e <UART_SetConfig+0x5de>
 800b2e0:	69fb      	ldr	r3, [r7, #28]
 800b2e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2e6:	d212      	bcs.n	800b30e <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	b29b      	uxth	r3, r3
 800b2ec:	f023 030f 	bic.w	r3, r3, #15
 800b2f0:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b2f2:	69fb      	ldr	r3, [r7, #28]
 800b2f4:	085b      	lsrs	r3, r3, #1
 800b2f6:	b29b      	uxth	r3, r3
 800b2f8:	f003 0307 	and.w	r3, r3, #7
 800b2fc:	b29a      	uxth	r2, r3
 800b2fe:	89fb      	ldrh	r3, [r7, #14]
 800b300:	4313      	orrs	r3, r2
 800b302:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	89fa      	ldrh	r2, [r7, #14]
 800b30a:	60da      	str	r2, [r3, #12]
 800b30c:	e076      	b.n	800b3fc <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	76fb      	strb	r3, [r7, #27]
 800b312:	e073      	b.n	800b3fc <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800b314:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b318:	2b08      	cmp	r3, #8
 800b31a:	d85c      	bhi.n	800b3d6 <UART_SetConfig+0x6a6>
 800b31c:	a201      	add	r2, pc, #4	; (adr r2, 800b324 <UART_SetConfig+0x5f4>)
 800b31e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b322:	bf00      	nop
 800b324:	0800b349 	.word	0x0800b349
 800b328:	0800b367 	.word	0x0800b367
 800b32c:	0800b385 	.word	0x0800b385
 800b330:	0800b3d7 	.word	0x0800b3d7
 800b334:	0800b3a1 	.word	0x0800b3a1
 800b338:	0800b3d7 	.word	0x0800b3d7
 800b33c:	0800b3d7 	.word	0x0800b3d7
 800b340:	0800b3d7 	.word	0x0800b3d7
 800b344:	0800b3bf 	.word	0x0800b3bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b348:	f7fc ffc8 	bl	80082dc <HAL_RCC_GetPCLK1Freq>
 800b34c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	685b      	ldr	r3, [r3, #4]
 800b352:	085a      	lsrs	r2, r3, #1
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	441a      	add	r2, r3
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	685b      	ldr	r3, [r3, #4]
 800b35c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b360:	b29b      	uxth	r3, r3
 800b362:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b364:	e03a      	b.n	800b3dc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b366:	f7fc ffcf 	bl	8008308 <HAL_RCC_GetPCLK2Freq>
 800b36a:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	085a      	lsrs	r2, r3, #1
 800b372:	693b      	ldr	r3, [r7, #16]
 800b374:	441a      	add	r2, r3
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b37e:	b29b      	uxth	r3, r3
 800b380:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b382:	e02b      	b.n	800b3dc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	685b      	ldr	r3, [r3, #4]
 800b388:	085b      	lsrs	r3, r3, #1
 800b38a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800b38e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800b392:	687a      	ldr	r2, [r7, #4]
 800b394:	6852      	ldr	r2, [r2, #4]
 800b396:	fbb3 f3f2 	udiv	r3, r3, r2
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b39e:	e01d      	b.n	800b3dc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b3a0:	f7fc ff06 	bl	80081b0 <HAL_RCC_GetSysClockFreq>
 800b3a4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	685b      	ldr	r3, [r3, #4]
 800b3aa:	085a      	lsrs	r2, r3, #1
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	441a      	add	r2, r3
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	685b      	ldr	r3, [r3, #4]
 800b3b4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3b8:	b29b      	uxth	r3, r3
 800b3ba:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b3bc:	e00e      	b.n	800b3dc <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	085b      	lsrs	r3, r3, #1
 800b3c4:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	fbb2 f3f3 	udiv	r3, r2, r3
 800b3d0:	b29b      	uxth	r3, r3
 800b3d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800b3d4:	e002      	b.n	800b3dc <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800b3d6:	2301      	movs	r3, #1
 800b3d8:	76fb      	strb	r3, [r7, #27]
        break;
 800b3da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	2b0f      	cmp	r3, #15
 800b3e0:	d90a      	bls.n	800b3f8 <UART_SetConfig+0x6c8>
 800b3e2:	69fb      	ldr	r3, [r7, #28]
 800b3e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3e8:	d206      	bcs.n	800b3f8 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	69fa      	ldr	r2, [r7, #28]
 800b3f0:	60da      	str	r2, [r3, #12]
 800b3f2:	e003      	b.n	800b3fc <UART_SetConfig+0x6cc>
 800b3f4:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2200      	movs	r2, #0
 800b406:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b408:	7efb      	ldrb	r3, [r7, #27]
}
 800b40a:	4618      	mov	r0, r3
 800b40c:	3728      	adds	r7, #40	; 0x28
 800b40e:	46bd      	mov	sp, r7
 800b410:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800b414 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b414:	b480      	push	{r7}
 800b416:	b083      	sub	sp, #12
 800b418:	af00      	add	r7, sp, #0
 800b41a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b420:	f003 0301 	and.w	r3, r3, #1
 800b424:	2b00      	cmp	r3, #0
 800b426:	d00a      	beq.n	800b43e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685b      	ldr	r3, [r3, #4]
 800b42e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	681b      	ldr	r3, [r3, #0]
 800b43a:	430a      	orrs	r2, r1
 800b43c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b442:	f003 0302 	and.w	r3, r3, #2
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00a      	beq.n	800b460 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	430a      	orrs	r2, r1
 800b45e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b464:	f003 0304 	and.w	r3, r3, #4
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d00a      	beq.n	800b482 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	685b      	ldr	r3, [r3, #4]
 800b472:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	430a      	orrs	r2, r1
 800b480:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b486:	f003 0308 	and.w	r3, r3, #8
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00a      	beq.n	800b4a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	430a      	orrs	r2, r1
 800b4a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a8:	f003 0310 	and.w	r3, r3, #16
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d00a      	beq.n	800b4c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	689b      	ldr	r3, [r3, #8]
 800b4b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	430a      	orrs	r2, r1
 800b4c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ca:	f003 0320 	and.w	r3, r3, #32
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d00a      	beq.n	800b4e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	689b      	ldr	r3, [r3, #8]
 800b4d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	430a      	orrs	r2, r1
 800b4e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d01a      	beq.n	800b52a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	430a      	orrs	r2, r1
 800b508:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b50e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b512:	d10a      	bne.n	800b52a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	685b      	ldr	r3, [r3, #4]
 800b51a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	430a      	orrs	r2, r1
 800b528:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b532:	2b00      	cmp	r3, #0
 800b534:	d00a      	beq.n	800b54c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	430a      	orrs	r2, r1
 800b54a:	605a      	str	r2, [r3, #4]
  }
}
 800b54c:	bf00      	nop
 800b54e:	370c      	adds	r7, #12
 800b550:	46bd      	mov	sp, r7
 800b552:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b556:	4770      	bx	lr

0800b558 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b086      	sub	sp, #24
 800b55c:	af02      	add	r7, sp, #8
 800b55e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2200      	movs	r2, #0
 800b564:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b566:	f7fb f827 	bl	80065b8 <HAL_GetTick>
 800b56a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	f003 0308 	and.w	r3, r3, #8
 800b576:	2b08      	cmp	r3, #8
 800b578:	d10e      	bne.n	800b598 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b57a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b57e:	9300      	str	r3, [sp, #0]
 800b580:	68fb      	ldr	r3, [r7, #12]
 800b582:	2200      	movs	r2, #0
 800b584:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b588:	6878      	ldr	r0, [r7, #4]
 800b58a:	f000 f82a 	bl	800b5e2 <UART_WaitOnFlagUntilTimeout>
 800b58e:	4603      	mov	r3, r0
 800b590:	2b00      	cmp	r3, #0
 800b592:	d001      	beq.n	800b598 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b594:	2303      	movs	r3, #3
 800b596:	e020      	b.n	800b5da <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b598:	687b      	ldr	r3, [r7, #4]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	f003 0304 	and.w	r3, r3, #4
 800b5a2:	2b04      	cmp	r3, #4
 800b5a4:	d10e      	bne.n	800b5c4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b5a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 f814 	bl	800b5e2 <UART_WaitOnFlagUntilTimeout>
 800b5ba:	4603      	mov	r3, r0
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d001      	beq.n	800b5c4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e00a      	b.n	800b5da <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	2220      	movs	r2, #32
 800b5c8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2220      	movs	r2, #32
 800b5ce:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	2200      	movs	r2, #0
 800b5d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b5d8:	2300      	movs	r3, #0
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3710      	adds	r7, #16
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	60f8      	str	r0, [r7, #12]
 800b5ea:	60b9      	str	r1, [r7, #8]
 800b5ec:	603b      	str	r3, [r7, #0]
 800b5ee:	4613      	mov	r3, r2
 800b5f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5f2:	e05d      	b.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b5f4:	69bb      	ldr	r3, [r7, #24]
 800b5f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b5fa:	d059      	beq.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b5fc:	f7fa ffdc 	bl	80065b8 <HAL_GetTick>
 800b600:	4602      	mov	r2, r0
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	1ad3      	subs	r3, r2, r3
 800b606:	69ba      	ldr	r2, [r7, #24]
 800b608:	429a      	cmp	r2, r3
 800b60a:	d302      	bcc.n	800b612 <UART_WaitOnFlagUntilTimeout+0x30>
 800b60c:	69bb      	ldr	r3, [r7, #24]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d11b      	bne.n	800b64a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b620:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	689a      	ldr	r2, [r3, #8]
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 0201 	bic.w	r2, r2, #1
 800b630:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	2220      	movs	r2, #32
 800b636:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	2220      	movs	r2, #32
 800b63c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	2200      	movs	r2, #0
 800b642:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b646:	2303      	movs	r3, #3
 800b648:	e042      	b.n	800b6d0 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	681b      	ldr	r3, [r3, #0]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0304 	and.w	r3, r3, #4
 800b654:	2b00      	cmp	r3, #0
 800b656:	d02b      	beq.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	69db      	ldr	r3, [r3, #28]
 800b65e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b662:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b666:	d123      	bne.n	800b6b0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b670:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	681a      	ldr	r2, [r3, #0]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b680:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	681b      	ldr	r3, [r3, #0]
 800b686:	689a      	ldr	r2, [r3, #8]
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	f022 0201 	bic.w	r2, r2, #1
 800b690:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2220      	movs	r2, #32
 800b696:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	2220      	movs	r2, #32
 800b69c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	2220      	movs	r2, #32
 800b6a2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e00f      	b.n	800b6d0 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	681b      	ldr	r3, [r3, #0]
 800b6b4:	69da      	ldr	r2, [r3, #28]
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	4013      	ands	r3, r2
 800b6ba:	68ba      	ldr	r2, [r7, #8]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	bf0c      	ite	eq
 800b6c0:	2301      	moveq	r3, #1
 800b6c2:	2300      	movne	r3, #0
 800b6c4:	b2db      	uxtb	r3, r3
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	429a      	cmp	r2, r3
 800b6cc:	d092      	beq.n	800b5f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b6ce:	2300      	movs	r3, #0
}
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	3710      	adds	r7, #16
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b6d8:	b480      	push	{r7}
 800b6da:	b083      	sub	sp, #12
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	681a      	ldr	r2, [r3, #0]
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b6ee:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	689a      	ldr	r2, [r3, #8]
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f022 0201 	bic.w	r2, r2, #1
 800b6fe:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_FIFOEN */

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2220      	movs	r2, #32
 800b704:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	2200      	movs	r2, #0
 800b70a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b70c:	bf00      	nop
 800b70e:	370c      	adds	r7, #12
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr

0800b718 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	b084      	sub	sp, #16
 800b71c:	af00      	add	r7, sp, #0
 800b71e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b724:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b736:	68f8      	ldr	r0, [r7, #12]
 800b738:	f7ff faf0 	bl	800ad1c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b73c:	bf00      	nop
 800b73e:	3710      	adds	r7, #16
 800b740:	46bd      	mov	sp, r7
 800b742:	bd80      	pop	{r7, pc}

0800b744 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b744:	b580      	push	{r7, lr}
 800b746:	b082      	sub	sp, #8
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	681a      	ldr	r2, [r3, #0]
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b75a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	2220      	movs	r2, #32
 800b760:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	2200      	movs	r2, #0
 800b766:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b768:	6878      	ldr	r0, [r7, #4]
 800b76a:	f7ff facd 	bl	800ad08 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b76e:	bf00      	nop
 800b770:	3708      	adds	r7, #8
 800b772:	46bd      	mov	sp, r7
 800b774:	bd80      	pop	{r7, pc}

0800b776 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b776:	b580      	push	{r7, lr}
 800b778:	b084      	sub	sp, #16
 800b77a:	af00      	add	r7, sp, #0
 800b77c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b784:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b78a:	2b22      	cmp	r3, #34	; 0x22
 800b78c:	d13a      	bne.n	800b804 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b794:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b796:	89bb      	ldrh	r3, [r7, #12]
 800b798:	b2d9      	uxtb	r1, r3
 800b79a:	89fb      	ldrh	r3, [r7, #14]
 800b79c:	b2da      	uxtb	r2, r3
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7a2:	400a      	ands	r2, r1
 800b7a4:	b2d2      	uxtb	r2, r2
 800b7a6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ac:	1c5a      	adds	r2, r3, #1
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7b8:	b29b      	uxth	r3, r3
 800b7ba:	3b01      	subs	r3, #1
 800b7bc:	b29a      	uxth	r2, r3
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7ca:	b29b      	uxth	r3, r3
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	d123      	bne.n	800b818 <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b7de:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	689a      	ldr	r2, [r3, #8]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f022 0201 	bic.w	r2, r2, #1
 800b7ee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2220      	movs	r2, #32
 800b7f4:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b7fc:	6878      	ldr	r0, [r7, #4]
 800b7fe:	f7fa fb93 	bl	8005f28 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b802:	e009      	b.n	800b818 <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	8b1b      	ldrh	r3, [r3, #24]
 800b80a:	b29a      	uxth	r2, r3
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	f042 0208 	orr.w	r2, r2, #8
 800b814:	b292      	uxth	r2, r2
 800b816:	831a      	strh	r2, [r3, #24]
}
 800b818:	bf00      	nop
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b82e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b834:	2b22      	cmp	r3, #34	; 0x22
 800b836:	d13a      	bne.n	800b8ae <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800b83e:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b844:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b846:	89ba      	ldrh	r2, [r7, #12]
 800b848:	89fb      	ldrh	r3, [r7, #14]
 800b84a:	4013      	ands	r3, r2
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	68bb      	ldr	r3, [r7, #8]
 800b850:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b856:	1c9a      	adds	r2, r3, #2
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b862:	b29b      	uxth	r3, r3
 800b864:	3b01      	subs	r3, #1
 800b866:	b29a      	uxth	r2, r3
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b874:	b29b      	uxth	r3, r3
 800b876:	2b00      	cmp	r3, #0
 800b878:	d123      	bne.n	800b8c2 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	681a      	ldr	r2, [r3, #0]
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b888:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	689a      	ldr	r2, [r3, #8]
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	f022 0201 	bic.w	r2, r2, #1
 800b898:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	2220      	movs	r2, #32
 800b89e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7fa fb3e 	bl	8005f28 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8ac:	e009      	b.n	800b8c2 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	8b1b      	ldrh	r3, [r3, #24]
 800b8b4:	b29a      	uxth	r2, r3
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f042 0208 	orr.w	r2, r2, #8
 800b8be:	b292      	uxth	r2, r2
 800b8c0:	831a      	strh	r2, [r3, #24]
}
 800b8c2:	bf00      	nop
 800b8c4:	3710      	adds	r7, #16
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bd80      	pop	{r7, pc}

0800b8ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800b8ca:	b480      	push	{r7}
 800b8cc:	b083      	sub	sp, #12
 800b8ce:	af00      	add	r7, sp, #0
 800b8d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800b8d2:	bf00      	nop
 800b8d4:	370c      	adds	r7, #12
 800b8d6:	46bd      	mov	sp, r7
 800b8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8dc:	4770      	bx	lr
	...

0800b8e0 <__errno>:
 800b8e0:	4b01      	ldr	r3, [pc, #4]	; (800b8e8 <__errno+0x8>)
 800b8e2:	6818      	ldr	r0, [r3, #0]
 800b8e4:	4770      	bx	lr
 800b8e6:	bf00      	nop
 800b8e8:	20000034 	.word	0x20000034

0800b8ec <__libc_init_array>:
 800b8ec:	b570      	push	{r4, r5, r6, lr}
 800b8ee:	4e0d      	ldr	r6, [pc, #52]	; (800b924 <__libc_init_array+0x38>)
 800b8f0:	4c0d      	ldr	r4, [pc, #52]	; (800b928 <__libc_init_array+0x3c>)
 800b8f2:	1ba4      	subs	r4, r4, r6
 800b8f4:	10a4      	asrs	r4, r4, #2
 800b8f6:	2500      	movs	r5, #0
 800b8f8:	42a5      	cmp	r5, r4
 800b8fa:	d109      	bne.n	800b910 <__libc_init_array+0x24>
 800b8fc:	4e0b      	ldr	r6, [pc, #44]	; (800b92c <__libc_init_array+0x40>)
 800b8fe:	4c0c      	ldr	r4, [pc, #48]	; (800b930 <__libc_init_array+0x44>)
 800b900:	f002 f9be 	bl	800dc80 <_init>
 800b904:	1ba4      	subs	r4, r4, r6
 800b906:	10a4      	asrs	r4, r4, #2
 800b908:	2500      	movs	r5, #0
 800b90a:	42a5      	cmp	r5, r4
 800b90c:	d105      	bne.n	800b91a <__libc_init_array+0x2e>
 800b90e:	bd70      	pop	{r4, r5, r6, pc}
 800b910:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b914:	4798      	blx	r3
 800b916:	3501      	adds	r5, #1
 800b918:	e7ee      	b.n	800b8f8 <__libc_init_array+0xc>
 800b91a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b91e:	4798      	blx	r3
 800b920:	3501      	adds	r5, #1
 800b922:	e7f2      	b.n	800b90a <__libc_init_array+0x1e>
 800b924:	080140e4 	.word	0x080140e4
 800b928:	080140e4 	.word	0x080140e4
 800b92c:	080140e4 	.word	0x080140e4
 800b930:	080140e8 	.word	0x080140e8

0800b934 <memset>:
 800b934:	4402      	add	r2, r0
 800b936:	4603      	mov	r3, r0
 800b938:	4293      	cmp	r3, r2
 800b93a:	d100      	bne.n	800b93e <memset+0xa>
 800b93c:	4770      	bx	lr
 800b93e:	f803 1b01 	strb.w	r1, [r3], #1
 800b942:	e7f9      	b.n	800b938 <memset+0x4>

0800b944 <__cvt>:
 800b944:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b948:	ec55 4b10 	vmov	r4, r5, d0
 800b94c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800b94e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b952:	2d00      	cmp	r5, #0
 800b954:	460e      	mov	r6, r1
 800b956:	4691      	mov	r9, r2
 800b958:	4619      	mov	r1, r3
 800b95a:	bfb8      	it	lt
 800b95c:	4622      	movlt	r2, r4
 800b95e:	462b      	mov	r3, r5
 800b960:	f027 0720 	bic.w	r7, r7, #32
 800b964:	bfbb      	ittet	lt
 800b966:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b96a:	461d      	movlt	r5, r3
 800b96c:	2300      	movge	r3, #0
 800b96e:	232d      	movlt	r3, #45	; 0x2d
 800b970:	bfb8      	it	lt
 800b972:	4614      	movlt	r4, r2
 800b974:	2f46      	cmp	r7, #70	; 0x46
 800b976:	700b      	strb	r3, [r1, #0]
 800b978:	d004      	beq.n	800b984 <__cvt+0x40>
 800b97a:	2f45      	cmp	r7, #69	; 0x45
 800b97c:	d100      	bne.n	800b980 <__cvt+0x3c>
 800b97e:	3601      	adds	r6, #1
 800b980:	2102      	movs	r1, #2
 800b982:	e000      	b.n	800b986 <__cvt+0x42>
 800b984:	2103      	movs	r1, #3
 800b986:	ab03      	add	r3, sp, #12
 800b988:	9301      	str	r3, [sp, #4]
 800b98a:	ab02      	add	r3, sp, #8
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	4632      	mov	r2, r6
 800b990:	4653      	mov	r3, sl
 800b992:	ec45 4b10 	vmov	d0, r4, r5
 800b996:	f000 fcdf 	bl	800c358 <_dtoa_r>
 800b99a:	2f47      	cmp	r7, #71	; 0x47
 800b99c:	4680      	mov	r8, r0
 800b99e:	d102      	bne.n	800b9a6 <__cvt+0x62>
 800b9a0:	f019 0f01 	tst.w	r9, #1
 800b9a4:	d026      	beq.n	800b9f4 <__cvt+0xb0>
 800b9a6:	2f46      	cmp	r7, #70	; 0x46
 800b9a8:	eb08 0906 	add.w	r9, r8, r6
 800b9ac:	d111      	bne.n	800b9d2 <__cvt+0x8e>
 800b9ae:	f898 3000 	ldrb.w	r3, [r8]
 800b9b2:	2b30      	cmp	r3, #48	; 0x30
 800b9b4:	d10a      	bne.n	800b9cc <__cvt+0x88>
 800b9b6:	2200      	movs	r2, #0
 800b9b8:	2300      	movs	r3, #0
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	4629      	mov	r1, r5
 800b9be:	f7f5 f903 	bl	8000bc8 <__aeabi_dcmpeq>
 800b9c2:	b918      	cbnz	r0, 800b9cc <__cvt+0x88>
 800b9c4:	f1c6 0601 	rsb	r6, r6, #1
 800b9c8:	f8ca 6000 	str.w	r6, [sl]
 800b9cc:	f8da 3000 	ldr.w	r3, [sl]
 800b9d0:	4499      	add	r9, r3
 800b9d2:	2200      	movs	r2, #0
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	4620      	mov	r0, r4
 800b9d8:	4629      	mov	r1, r5
 800b9da:	f7f5 f8f5 	bl	8000bc8 <__aeabi_dcmpeq>
 800b9de:	b938      	cbnz	r0, 800b9f0 <__cvt+0xac>
 800b9e0:	2230      	movs	r2, #48	; 0x30
 800b9e2:	9b03      	ldr	r3, [sp, #12]
 800b9e4:	454b      	cmp	r3, r9
 800b9e6:	d205      	bcs.n	800b9f4 <__cvt+0xb0>
 800b9e8:	1c59      	adds	r1, r3, #1
 800b9ea:	9103      	str	r1, [sp, #12]
 800b9ec:	701a      	strb	r2, [r3, #0]
 800b9ee:	e7f8      	b.n	800b9e2 <__cvt+0x9e>
 800b9f0:	f8cd 900c 	str.w	r9, [sp, #12]
 800b9f4:	9b03      	ldr	r3, [sp, #12]
 800b9f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b9f8:	eba3 0308 	sub.w	r3, r3, r8
 800b9fc:	4640      	mov	r0, r8
 800b9fe:	6013      	str	r3, [r2, #0]
 800ba00:	b004      	add	sp, #16
 800ba02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800ba06 <__exponent>:
 800ba06:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba08:	2900      	cmp	r1, #0
 800ba0a:	4604      	mov	r4, r0
 800ba0c:	bfba      	itte	lt
 800ba0e:	4249      	neglt	r1, r1
 800ba10:	232d      	movlt	r3, #45	; 0x2d
 800ba12:	232b      	movge	r3, #43	; 0x2b
 800ba14:	2909      	cmp	r1, #9
 800ba16:	f804 2b02 	strb.w	r2, [r4], #2
 800ba1a:	7043      	strb	r3, [r0, #1]
 800ba1c:	dd20      	ble.n	800ba60 <__exponent+0x5a>
 800ba1e:	f10d 0307 	add.w	r3, sp, #7
 800ba22:	461f      	mov	r7, r3
 800ba24:	260a      	movs	r6, #10
 800ba26:	fb91 f5f6 	sdiv	r5, r1, r6
 800ba2a:	fb06 1115 	mls	r1, r6, r5, r1
 800ba2e:	3130      	adds	r1, #48	; 0x30
 800ba30:	2d09      	cmp	r5, #9
 800ba32:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ba36:	f103 32ff 	add.w	r2, r3, #4294967295
 800ba3a:	4629      	mov	r1, r5
 800ba3c:	dc09      	bgt.n	800ba52 <__exponent+0x4c>
 800ba3e:	3130      	adds	r1, #48	; 0x30
 800ba40:	3b02      	subs	r3, #2
 800ba42:	f802 1c01 	strb.w	r1, [r2, #-1]
 800ba46:	42bb      	cmp	r3, r7
 800ba48:	4622      	mov	r2, r4
 800ba4a:	d304      	bcc.n	800ba56 <__exponent+0x50>
 800ba4c:	1a10      	subs	r0, r2, r0
 800ba4e:	b003      	add	sp, #12
 800ba50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba52:	4613      	mov	r3, r2
 800ba54:	e7e7      	b.n	800ba26 <__exponent+0x20>
 800ba56:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba5a:	f804 2b01 	strb.w	r2, [r4], #1
 800ba5e:	e7f2      	b.n	800ba46 <__exponent+0x40>
 800ba60:	2330      	movs	r3, #48	; 0x30
 800ba62:	4419      	add	r1, r3
 800ba64:	7083      	strb	r3, [r0, #2]
 800ba66:	1d02      	adds	r2, r0, #4
 800ba68:	70c1      	strb	r1, [r0, #3]
 800ba6a:	e7ef      	b.n	800ba4c <__exponent+0x46>

0800ba6c <_printf_float>:
 800ba6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba70:	b08d      	sub	sp, #52	; 0x34
 800ba72:	460c      	mov	r4, r1
 800ba74:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800ba78:	4616      	mov	r6, r2
 800ba7a:	461f      	mov	r7, r3
 800ba7c:	4605      	mov	r5, r0
 800ba7e:	f001 fa23 	bl	800cec8 <_localeconv_r>
 800ba82:	6803      	ldr	r3, [r0, #0]
 800ba84:	9304      	str	r3, [sp, #16]
 800ba86:	4618      	mov	r0, r3
 800ba88:	f7f4 fc1c 	bl	80002c4 <strlen>
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	930a      	str	r3, [sp, #40]	; 0x28
 800ba90:	f8d8 3000 	ldr.w	r3, [r8]
 800ba94:	9005      	str	r0, [sp, #20]
 800ba96:	3307      	adds	r3, #7
 800ba98:	f023 0307 	bic.w	r3, r3, #7
 800ba9c:	f103 0208 	add.w	r2, r3, #8
 800baa0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800baa4:	f8d4 b000 	ldr.w	fp, [r4]
 800baa8:	f8c8 2000 	str.w	r2, [r8]
 800baac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800bab4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800bab8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800babc:	9307      	str	r3, [sp, #28]
 800babe:	f8cd 8018 	str.w	r8, [sp, #24]
 800bac2:	f04f 32ff 	mov.w	r2, #4294967295
 800bac6:	4ba7      	ldr	r3, [pc, #668]	; (800bd64 <_printf_float+0x2f8>)
 800bac8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bacc:	f7f5 f8ae 	bl	8000c2c <__aeabi_dcmpun>
 800bad0:	bb70      	cbnz	r0, 800bb30 <_printf_float+0xc4>
 800bad2:	f04f 32ff 	mov.w	r2, #4294967295
 800bad6:	4ba3      	ldr	r3, [pc, #652]	; (800bd64 <_printf_float+0x2f8>)
 800bad8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800badc:	f7f5 f888 	bl	8000bf0 <__aeabi_dcmple>
 800bae0:	bb30      	cbnz	r0, 800bb30 <_printf_float+0xc4>
 800bae2:	2200      	movs	r2, #0
 800bae4:	2300      	movs	r3, #0
 800bae6:	4640      	mov	r0, r8
 800bae8:	4649      	mov	r1, r9
 800baea:	f7f5 f877 	bl	8000bdc <__aeabi_dcmplt>
 800baee:	b110      	cbz	r0, 800baf6 <_printf_float+0x8a>
 800baf0:	232d      	movs	r3, #45	; 0x2d
 800baf2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800baf6:	4a9c      	ldr	r2, [pc, #624]	; (800bd68 <_printf_float+0x2fc>)
 800baf8:	4b9c      	ldr	r3, [pc, #624]	; (800bd6c <_printf_float+0x300>)
 800bafa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bafe:	bf8c      	ite	hi
 800bb00:	4690      	movhi	r8, r2
 800bb02:	4698      	movls	r8, r3
 800bb04:	2303      	movs	r3, #3
 800bb06:	f02b 0204 	bic.w	r2, fp, #4
 800bb0a:	6123      	str	r3, [r4, #16]
 800bb0c:	6022      	str	r2, [r4, #0]
 800bb0e:	f04f 0900 	mov.w	r9, #0
 800bb12:	9700      	str	r7, [sp, #0]
 800bb14:	4633      	mov	r3, r6
 800bb16:	aa0b      	add	r2, sp, #44	; 0x2c
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f000 f9e6 	bl	800beec <_printf_common>
 800bb20:	3001      	adds	r0, #1
 800bb22:	f040 808d 	bne.w	800bc40 <_printf_float+0x1d4>
 800bb26:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2a:	b00d      	add	sp, #52	; 0x34
 800bb2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb30:	4642      	mov	r2, r8
 800bb32:	464b      	mov	r3, r9
 800bb34:	4640      	mov	r0, r8
 800bb36:	4649      	mov	r1, r9
 800bb38:	f7f5 f878 	bl	8000c2c <__aeabi_dcmpun>
 800bb3c:	b110      	cbz	r0, 800bb44 <_printf_float+0xd8>
 800bb3e:	4a8c      	ldr	r2, [pc, #560]	; (800bd70 <_printf_float+0x304>)
 800bb40:	4b8c      	ldr	r3, [pc, #560]	; (800bd74 <_printf_float+0x308>)
 800bb42:	e7da      	b.n	800bafa <_printf_float+0x8e>
 800bb44:	6861      	ldr	r1, [r4, #4]
 800bb46:	1c4b      	adds	r3, r1, #1
 800bb48:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800bb4c:	a80a      	add	r0, sp, #40	; 0x28
 800bb4e:	d13e      	bne.n	800bbce <_printf_float+0x162>
 800bb50:	2306      	movs	r3, #6
 800bb52:	6063      	str	r3, [r4, #4]
 800bb54:	2300      	movs	r3, #0
 800bb56:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bb5a:	ab09      	add	r3, sp, #36	; 0x24
 800bb5c:	9300      	str	r3, [sp, #0]
 800bb5e:	ec49 8b10 	vmov	d0, r8, r9
 800bb62:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bb66:	6022      	str	r2, [r4, #0]
 800bb68:	f8cd a004 	str.w	sl, [sp, #4]
 800bb6c:	6861      	ldr	r1, [r4, #4]
 800bb6e:	4628      	mov	r0, r5
 800bb70:	f7ff fee8 	bl	800b944 <__cvt>
 800bb74:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800bb78:	2b47      	cmp	r3, #71	; 0x47
 800bb7a:	4680      	mov	r8, r0
 800bb7c:	d109      	bne.n	800bb92 <_printf_float+0x126>
 800bb7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb80:	1cd8      	adds	r0, r3, #3
 800bb82:	db02      	blt.n	800bb8a <_printf_float+0x11e>
 800bb84:	6862      	ldr	r2, [r4, #4]
 800bb86:	4293      	cmp	r3, r2
 800bb88:	dd47      	ble.n	800bc1a <_printf_float+0x1ae>
 800bb8a:	f1aa 0a02 	sub.w	sl, sl, #2
 800bb8e:	fa5f fa8a 	uxtb.w	sl, sl
 800bb92:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bb96:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bb98:	d824      	bhi.n	800bbe4 <_printf_float+0x178>
 800bb9a:	3901      	subs	r1, #1
 800bb9c:	4652      	mov	r2, sl
 800bb9e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800bba2:	9109      	str	r1, [sp, #36]	; 0x24
 800bba4:	f7ff ff2f 	bl	800ba06 <__exponent>
 800bba8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbaa:	1813      	adds	r3, r2, r0
 800bbac:	2a01      	cmp	r2, #1
 800bbae:	4681      	mov	r9, r0
 800bbb0:	6123      	str	r3, [r4, #16]
 800bbb2:	dc02      	bgt.n	800bbba <_printf_float+0x14e>
 800bbb4:	6822      	ldr	r2, [r4, #0]
 800bbb6:	07d1      	lsls	r1, r2, #31
 800bbb8:	d501      	bpl.n	800bbbe <_printf_float+0x152>
 800bbba:	3301      	adds	r3, #1
 800bbbc:	6123      	str	r3, [r4, #16]
 800bbbe:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d0a5      	beq.n	800bb12 <_printf_float+0xa6>
 800bbc6:	232d      	movs	r3, #45	; 0x2d
 800bbc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bbcc:	e7a1      	b.n	800bb12 <_printf_float+0xa6>
 800bbce:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800bbd2:	f000 8177 	beq.w	800bec4 <_printf_float+0x458>
 800bbd6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800bbda:	d1bb      	bne.n	800bb54 <_printf_float+0xe8>
 800bbdc:	2900      	cmp	r1, #0
 800bbde:	d1b9      	bne.n	800bb54 <_printf_float+0xe8>
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	e7b6      	b.n	800bb52 <_printf_float+0xe6>
 800bbe4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800bbe8:	d119      	bne.n	800bc1e <_printf_float+0x1b2>
 800bbea:	2900      	cmp	r1, #0
 800bbec:	6863      	ldr	r3, [r4, #4]
 800bbee:	dd0c      	ble.n	800bc0a <_printf_float+0x19e>
 800bbf0:	6121      	str	r1, [r4, #16]
 800bbf2:	b913      	cbnz	r3, 800bbfa <_printf_float+0x18e>
 800bbf4:	6822      	ldr	r2, [r4, #0]
 800bbf6:	07d2      	lsls	r2, r2, #31
 800bbf8:	d502      	bpl.n	800bc00 <_printf_float+0x194>
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	440b      	add	r3, r1
 800bbfe:	6123      	str	r3, [r4, #16]
 800bc00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc02:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc04:	f04f 0900 	mov.w	r9, #0
 800bc08:	e7d9      	b.n	800bbbe <_printf_float+0x152>
 800bc0a:	b913      	cbnz	r3, 800bc12 <_printf_float+0x1a6>
 800bc0c:	6822      	ldr	r2, [r4, #0]
 800bc0e:	07d0      	lsls	r0, r2, #31
 800bc10:	d501      	bpl.n	800bc16 <_printf_float+0x1aa>
 800bc12:	3302      	adds	r3, #2
 800bc14:	e7f3      	b.n	800bbfe <_printf_float+0x192>
 800bc16:	2301      	movs	r3, #1
 800bc18:	e7f1      	b.n	800bbfe <_printf_float+0x192>
 800bc1a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800bc1e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800bc22:	4293      	cmp	r3, r2
 800bc24:	db05      	blt.n	800bc32 <_printf_float+0x1c6>
 800bc26:	6822      	ldr	r2, [r4, #0]
 800bc28:	6123      	str	r3, [r4, #16]
 800bc2a:	07d1      	lsls	r1, r2, #31
 800bc2c:	d5e8      	bpl.n	800bc00 <_printf_float+0x194>
 800bc2e:	3301      	adds	r3, #1
 800bc30:	e7e5      	b.n	800bbfe <_printf_float+0x192>
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	bfd4      	ite	le
 800bc36:	f1c3 0302 	rsble	r3, r3, #2
 800bc3a:	2301      	movgt	r3, #1
 800bc3c:	4413      	add	r3, r2
 800bc3e:	e7de      	b.n	800bbfe <_printf_float+0x192>
 800bc40:	6823      	ldr	r3, [r4, #0]
 800bc42:	055a      	lsls	r2, r3, #21
 800bc44:	d407      	bmi.n	800bc56 <_printf_float+0x1ea>
 800bc46:	6923      	ldr	r3, [r4, #16]
 800bc48:	4642      	mov	r2, r8
 800bc4a:	4631      	mov	r1, r6
 800bc4c:	4628      	mov	r0, r5
 800bc4e:	47b8      	blx	r7
 800bc50:	3001      	adds	r0, #1
 800bc52:	d12b      	bne.n	800bcac <_printf_float+0x240>
 800bc54:	e767      	b.n	800bb26 <_printf_float+0xba>
 800bc56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800bc5a:	f240 80dc 	bls.w	800be16 <_printf_float+0x3aa>
 800bc5e:	2200      	movs	r2, #0
 800bc60:	2300      	movs	r3, #0
 800bc62:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bc66:	f7f4 ffaf 	bl	8000bc8 <__aeabi_dcmpeq>
 800bc6a:	2800      	cmp	r0, #0
 800bc6c:	d033      	beq.n	800bcd6 <_printf_float+0x26a>
 800bc6e:	2301      	movs	r3, #1
 800bc70:	4a41      	ldr	r2, [pc, #260]	; (800bd78 <_printf_float+0x30c>)
 800bc72:	4631      	mov	r1, r6
 800bc74:	4628      	mov	r0, r5
 800bc76:	47b8      	blx	r7
 800bc78:	3001      	adds	r0, #1
 800bc7a:	f43f af54 	beq.w	800bb26 <_printf_float+0xba>
 800bc7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc82:	429a      	cmp	r2, r3
 800bc84:	db02      	blt.n	800bc8c <_printf_float+0x220>
 800bc86:	6823      	ldr	r3, [r4, #0]
 800bc88:	07d8      	lsls	r0, r3, #31
 800bc8a:	d50f      	bpl.n	800bcac <_printf_float+0x240>
 800bc8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bc90:	4631      	mov	r1, r6
 800bc92:	4628      	mov	r0, r5
 800bc94:	47b8      	blx	r7
 800bc96:	3001      	adds	r0, #1
 800bc98:	f43f af45 	beq.w	800bb26 <_printf_float+0xba>
 800bc9c:	f04f 0800 	mov.w	r8, #0
 800bca0:	f104 091a 	add.w	r9, r4, #26
 800bca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bca6:	3b01      	subs	r3, #1
 800bca8:	4543      	cmp	r3, r8
 800bcaa:	dc09      	bgt.n	800bcc0 <_printf_float+0x254>
 800bcac:	6823      	ldr	r3, [r4, #0]
 800bcae:	079b      	lsls	r3, r3, #30
 800bcb0:	f100 8103 	bmi.w	800beba <_printf_float+0x44e>
 800bcb4:	68e0      	ldr	r0, [r4, #12]
 800bcb6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bcb8:	4298      	cmp	r0, r3
 800bcba:	bfb8      	it	lt
 800bcbc:	4618      	movlt	r0, r3
 800bcbe:	e734      	b.n	800bb2a <_printf_float+0xbe>
 800bcc0:	2301      	movs	r3, #1
 800bcc2:	464a      	mov	r2, r9
 800bcc4:	4631      	mov	r1, r6
 800bcc6:	4628      	mov	r0, r5
 800bcc8:	47b8      	blx	r7
 800bcca:	3001      	adds	r0, #1
 800bccc:	f43f af2b 	beq.w	800bb26 <_printf_float+0xba>
 800bcd0:	f108 0801 	add.w	r8, r8, #1
 800bcd4:	e7e6      	b.n	800bca4 <_printf_float+0x238>
 800bcd6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	dc2b      	bgt.n	800bd34 <_printf_float+0x2c8>
 800bcdc:	2301      	movs	r3, #1
 800bcde:	4a26      	ldr	r2, [pc, #152]	; (800bd78 <_printf_float+0x30c>)
 800bce0:	4631      	mov	r1, r6
 800bce2:	4628      	mov	r0, r5
 800bce4:	47b8      	blx	r7
 800bce6:	3001      	adds	r0, #1
 800bce8:	f43f af1d 	beq.w	800bb26 <_printf_float+0xba>
 800bcec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcee:	b923      	cbnz	r3, 800bcfa <_printf_float+0x28e>
 800bcf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bcf2:	b913      	cbnz	r3, 800bcfa <_printf_float+0x28e>
 800bcf4:	6823      	ldr	r3, [r4, #0]
 800bcf6:	07d9      	lsls	r1, r3, #31
 800bcf8:	d5d8      	bpl.n	800bcac <_printf_float+0x240>
 800bcfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bcfe:	4631      	mov	r1, r6
 800bd00:	4628      	mov	r0, r5
 800bd02:	47b8      	blx	r7
 800bd04:	3001      	adds	r0, #1
 800bd06:	f43f af0e 	beq.w	800bb26 <_printf_float+0xba>
 800bd0a:	f04f 0900 	mov.w	r9, #0
 800bd0e:	f104 0a1a 	add.w	sl, r4, #26
 800bd12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd14:	425b      	negs	r3, r3
 800bd16:	454b      	cmp	r3, r9
 800bd18:	dc01      	bgt.n	800bd1e <_printf_float+0x2b2>
 800bd1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bd1c:	e794      	b.n	800bc48 <_printf_float+0x1dc>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	4652      	mov	r2, sl
 800bd22:	4631      	mov	r1, r6
 800bd24:	4628      	mov	r0, r5
 800bd26:	47b8      	blx	r7
 800bd28:	3001      	adds	r0, #1
 800bd2a:	f43f aefc 	beq.w	800bb26 <_printf_float+0xba>
 800bd2e:	f109 0901 	add.w	r9, r9, #1
 800bd32:	e7ee      	b.n	800bd12 <_printf_float+0x2a6>
 800bd34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bd38:	429a      	cmp	r2, r3
 800bd3a:	bfa8      	it	ge
 800bd3c:	461a      	movge	r2, r3
 800bd3e:	2a00      	cmp	r2, #0
 800bd40:	4691      	mov	r9, r2
 800bd42:	dd07      	ble.n	800bd54 <_printf_float+0x2e8>
 800bd44:	4613      	mov	r3, r2
 800bd46:	4631      	mov	r1, r6
 800bd48:	4642      	mov	r2, r8
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	47b8      	blx	r7
 800bd4e:	3001      	adds	r0, #1
 800bd50:	f43f aee9 	beq.w	800bb26 <_printf_float+0xba>
 800bd54:	f104 031a 	add.w	r3, r4, #26
 800bd58:	f04f 0b00 	mov.w	fp, #0
 800bd5c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bd60:	9306      	str	r3, [sp, #24]
 800bd62:	e015      	b.n	800bd90 <_printf_float+0x324>
 800bd64:	7fefffff 	.word	0x7fefffff
 800bd68:	08013e14 	.word	0x08013e14
 800bd6c:	08013e10 	.word	0x08013e10
 800bd70:	08013e1c 	.word	0x08013e1c
 800bd74:	08013e18 	.word	0x08013e18
 800bd78:	08013e20 	.word	0x08013e20
 800bd7c:	2301      	movs	r3, #1
 800bd7e:	9a06      	ldr	r2, [sp, #24]
 800bd80:	4631      	mov	r1, r6
 800bd82:	4628      	mov	r0, r5
 800bd84:	47b8      	blx	r7
 800bd86:	3001      	adds	r0, #1
 800bd88:	f43f aecd 	beq.w	800bb26 <_printf_float+0xba>
 800bd8c:	f10b 0b01 	add.w	fp, fp, #1
 800bd90:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800bd94:	ebaa 0309 	sub.w	r3, sl, r9
 800bd98:	455b      	cmp	r3, fp
 800bd9a:	dcef      	bgt.n	800bd7c <_printf_float+0x310>
 800bd9c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bda0:	429a      	cmp	r2, r3
 800bda2:	44d0      	add	r8, sl
 800bda4:	db15      	blt.n	800bdd2 <_printf_float+0x366>
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	07da      	lsls	r2, r3, #31
 800bdaa:	d412      	bmi.n	800bdd2 <_printf_float+0x366>
 800bdac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdae:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bdb0:	eba3 020a 	sub.w	r2, r3, sl
 800bdb4:	eba3 0a01 	sub.w	sl, r3, r1
 800bdb8:	4592      	cmp	sl, r2
 800bdba:	bfa8      	it	ge
 800bdbc:	4692      	movge	sl, r2
 800bdbe:	f1ba 0f00 	cmp.w	sl, #0
 800bdc2:	dc0e      	bgt.n	800bde2 <_printf_float+0x376>
 800bdc4:	f04f 0800 	mov.w	r8, #0
 800bdc8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bdcc:	f104 091a 	add.w	r9, r4, #26
 800bdd0:	e019      	b.n	800be06 <_printf_float+0x39a>
 800bdd2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bdd6:	4631      	mov	r1, r6
 800bdd8:	4628      	mov	r0, r5
 800bdda:	47b8      	blx	r7
 800bddc:	3001      	adds	r0, #1
 800bdde:	d1e5      	bne.n	800bdac <_printf_float+0x340>
 800bde0:	e6a1      	b.n	800bb26 <_printf_float+0xba>
 800bde2:	4653      	mov	r3, sl
 800bde4:	4642      	mov	r2, r8
 800bde6:	4631      	mov	r1, r6
 800bde8:	4628      	mov	r0, r5
 800bdea:	47b8      	blx	r7
 800bdec:	3001      	adds	r0, #1
 800bdee:	d1e9      	bne.n	800bdc4 <_printf_float+0x358>
 800bdf0:	e699      	b.n	800bb26 <_printf_float+0xba>
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	464a      	mov	r2, r9
 800bdf6:	4631      	mov	r1, r6
 800bdf8:	4628      	mov	r0, r5
 800bdfa:	47b8      	blx	r7
 800bdfc:	3001      	adds	r0, #1
 800bdfe:	f43f ae92 	beq.w	800bb26 <_printf_float+0xba>
 800be02:	f108 0801 	add.w	r8, r8, #1
 800be06:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800be0a:	1a9b      	subs	r3, r3, r2
 800be0c:	eba3 030a 	sub.w	r3, r3, sl
 800be10:	4543      	cmp	r3, r8
 800be12:	dcee      	bgt.n	800bdf2 <_printf_float+0x386>
 800be14:	e74a      	b.n	800bcac <_printf_float+0x240>
 800be16:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800be18:	2a01      	cmp	r2, #1
 800be1a:	dc01      	bgt.n	800be20 <_printf_float+0x3b4>
 800be1c:	07db      	lsls	r3, r3, #31
 800be1e:	d53a      	bpl.n	800be96 <_printf_float+0x42a>
 800be20:	2301      	movs	r3, #1
 800be22:	4642      	mov	r2, r8
 800be24:	4631      	mov	r1, r6
 800be26:	4628      	mov	r0, r5
 800be28:	47b8      	blx	r7
 800be2a:	3001      	adds	r0, #1
 800be2c:	f43f ae7b 	beq.w	800bb26 <_printf_float+0xba>
 800be30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be34:	4631      	mov	r1, r6
 800be36:	4628      	mov	r0, r5
 800be38:	47b8      	blx	r7
 800be3a:	3001      	adds	r0, #1
 800be3c:	f108 0801 	add.w	r8, r8, #1
 800be40:	f43f ae71 	beq.w	800bb26 <_printf_float+0xba>
 800be44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be46:	2200      	movs	r2, #0
 800be48:	f103 3aff 	add.w	sl, r3, #4294967295
 800be4c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800be50:	2300      	movs	r3, #0
 800be52:	f7f4 feb9 	bl	8000bc8 <__aeabi_dcmpeq>
 800be56:	b9c8      	cbnz	r0, 800be8c <_printf_float+0x420>
 800be58:	4653      	mov	r3, sl
 800be5a:	4642      	mov	r2, r8
 800be5c:	4631      	mov	r1, r6
 800be5e:	4628      	mov	r0, r5
 800be60:	47b8      	blx	r7
 800be62:	3001      	adds	r0, #1
 800be64:	d10e      	bne.n	800be84 <_printf_float+0x418>
 800be66:	e65e      	b.n	800bb26 <_printf_float+0xba>
 800be68:	2301      	movs	r3, #1
 800be6a:	4652      	mov	r2, sl
 800be6c:	4631      	mov	r1, r6
 800be6e:	4628      	mov	r0, r5
 800be70:	47b8      	blx	r7
 800be72:	3001      	adds	r0, #1
 800be74:	f43f ae57 	beq.w	800bb26 <_printf_float+0xba>
 800be78:	f108 0801 	add.w	r8, r8, #1
 800be7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800be7e:	3b01      	subs	r3, #1
 800be80:	4543      	cmp	r3, r8
 800be82:	dcf1      	bgt.n	800be68 <_printf_float+0x3fc>
 800be84:	464b      	mov	r3, r9
 800be86:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800be8a:	e6de      	b.n	800bc4a <_printf_float+0x1de>
 800be8c:	f04f 0800 	mov.w	r8, #0
 800be90:	f104 0a1a 	add.w	sl, r4, #26
 800be94:	e7f2      	b.n	800be7c <_printf_float+0x410>
 800be96:	2301      	movs	r3, #1
 800be98:	e7df      	b.n	800be5a <_printf_float+0x3ee>
 800be9a:	2301      	movs	r3, #1
 800be9c:	464a      	mov	r2, r9
 800be9e:	4631      	mov	r1, r6
 800bea0:	4628      	mov	r0, r5
 800bea2:	47b8      	blx	r7
 800bea4:	3001      	adds	r0, #1
 800bea6:	f43f ae3e 	beq.w	800bb26 <_printf_float+0xba>
 800beaa:	f108 0801 	add.w	r8, r8, #1
 800beae:	68e3      	ldr	r3, [r4, #12]
 800beb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800beb2:	1a9b      	subs	r3, r3, r2
 800beb4:	4543      	cmp	r3, r8
 800beb6:	dcf0      	bgt.n	800be9a <_printf_float+0x42e>
 800beb8:	e6fc      	b.n	800bcb4 <_printf_float+0x248>
 800beba:	f04f 0800 	mov.w	r8, #0
 800bebe:	f104 0919 	add.w	r9, r4, #25
 800bec2:	e7f4      	b.n	800beae <_printf_float+0x442>
 800bec4:	2900      	cmp	r1, #0
 800bec6:	f43f ae8b 	beq.w	800bbe0 <_printf_float+0x174>
 800beca:	2300      	movs	r3, #0
 800becc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800bed0:	ab09      	add	r3, sp, #36	; 0x24
 800bed2:	9300      	str	r3, [sp, #0]
 800bed4:	ec49 8b10 	vmov	d0, r8, r9
 800bed8:	6022      	str	r2, [r4, #0]
 800beda:	f8cd a004 	str.w	sl, [sp, #4]
 800bede:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bee2:	4628      	mov	r0, r5
 800bee4:	f7ff fd2e 	bl	800b944 <__cvt>
 800bee8:	4680      	mov	r8, r0
 800beea:	e648      	b.n	800bb7e <_printf_float+0x112>

0800beec <_printf_common>:
 800beec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	4691      	mov	r9, r2
 800bef2:	461f      	mov	r7, r3
 800bef4:	688a      	ldr	r2, [r1, #8]
 800bef6:	690b      	ldr	r3, [r1, #16]
 800bef8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800befc:	4293      	cmp	r3, r2
 800befe:	bfb8      	it	lt
 800bf00:	4613      	movlt	r3, r2
 800bf02:	f8c9 3000 	str.w	r3, [r9]
 800bf06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bf0a:	4606      	mov	r6, r0
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	b112      	cbz	r2, 800bf16 <_printf_common+0x2a>
 800bf10:	3301      	adds	r3, #1
 800bf12:	f8c9 3000 	str.w	r3, [r9]
 800bf16:	6823      	ldr	r3, [r4, #0]
 800bf18:	0699      	lsls	r1, r3, #26
 800bf1a:	bf42      	ittt	mi
 800bf1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bf20:	3302      	addmi	r3, #2
 800bf22:	f8c9 3000 	strmi.w	r3, [r9]
 800bf26:	6825      	ldr	r5, [r4, #0]
 800bf28:	f015 0506 	ands.w	r5, r5, #6
 800bf2c:	d107      	bne.n	800bf3e <_printf_common+0x52>
 800bf2e:	f104 0a19 	add.w	sl, r4, #25
 800bf32:	68e3      	ldr	r3, [r4, #12]
 800bf34:	f8d9 2000 	ldr.w	r2, [r9]
 800bf38:	1a9b      	subs	r3, r3, r2
 800bf3a:	42ab      	cmp	r3, r5
 800bf3c:	dc28      	bgt.n	800bf90 <_printf_common+0xa4>
 800bf3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bf42:	6822      	ldr	r2, [r4, #0]
 800bf44:	3300      	adds	r3, #0
 800bf46:	bf18      	it	ne
 800bf48:	2301      	movne	r3, #1
 800bf4a:	0692      	lsls	r2, r2, #26
 800bf4c:	d42d      	bmi.n	800bfaa <_printf_common+0xbe>
 800bf4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf52:	4639      	mov	r1, r7
 800bf54:	4630      	mov	r0, r6
 800bf56:	47c0      	blx	r8
 800bf58:	3001      	adds	r0, #1
 800bf5a:	d020      	beq.n	800bf9e <_printf_common+0xb2>
 800bf5c:	6823      	ldr	r3, [r4, #0]
 800bf5e:	68e5      	ldr	r5, [r4, #12]
 800bf60:	f8d9 2000 	ldr.w	r2, [r9]
 800bf64:	f003 0306 	and.w	r3, r3, #6
 800bf68:	2b04      	cmp	r3, #4
 800bf6a:	bf08      	it	eq
 800bf6c:	1aad      	subeq	r5, r5, r2
 800bf6e:	68a3      	ldr	r3, [r4, #8]
 800bf70:	6922      	ldr	r2, [r4, #16]
 800bf72:	bf0c      	ite	eq
 800bf74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bf78:	2500      	movne	r5, #0
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	bfc4      	itt	gt
 800bf7e:	1a9b      	subgt	r3, r3, r2
 800bf80:	18ed      	addgt	r5, r5, r3
 800bf82:	f04f 0900 	mov.w	r9, #0
 800bf86:	341a      	adds	r4, #26
 800bf88:	454d      	cmp	r5, r9
 800bf8a:	d11a      	bne.n	800bfc2 <_printf_common+0xd6>
 800bf8c:	2000      	movs	r0, #0
 800bf8e:	e008      	b.n	800bfa2 <_printf_common+0xb6>
 800bf90:	2301      	movs	r3, #1
 800bf92:	4652      	mov	r2, sl
 800bf94:	4639      	mov	r1, r7
 800bf96:	4630      	mov	r0, r6
 800bf98:	47c0      	blx	r8
 800bf9a:	3001      	adds	r0, #1
 800bf9c:	d103      	bne.n	800bfa6 <_printf_common+0xba>
 800bf9e:	f04f 30ff 	mov.w	r0, #4294967295
 800bfa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfa6:	3501      	adds	r5, #1
 800bfa8:	e7c3      	b.n	800bf32 <_printf_common+0x46>
 800bfaa:	18e1      	adds	r1, r4, r3
 800bfac:	1c5a      	adds	r2, r3, #1
 800bfae:	2030      	movs	r0, #48	; 0x30
 800bfb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bfb4:	4422      	add	r2, r4
 800bfb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bfba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bfbe:	3302      	adds	r3, #2
 800bfc0:	e7c5      	b.n	800bf4e <_printf_common+0x62>
 800bfc2:	2301      	movs	r3, #1
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4639      	mov	r1, r7
 800bfc8:	4630      	mov	r0, r6
 800bfca:	47c0      	blx	r8
 800bfcc:	3001      	adds	r0, #1
 800bfce:	d0e6      	beq.n	800bf9e <_printf_common+0xb2>
 800bfd0:	f109 0901 	add.w	r9, r9, #1
 800bfd4:	e7d8      	b.n	800bf88 <_printf_common+0x9c>
	...

0800bfd8 <_printf_i>:
 800bfd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bfdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800bfe0:	460c      	mov	r4, r1
 800bfe2:	7e09      	ldrb	r1, [r1, #24]
 800bfe4:	b085      	sub	sp, #20
 800bfe6:	296e      	cmp	r1, #110	; 0x6e
 800bfe8:	4617      	mov	r7, r2
 800bfea:	4606      	mov	r6, r0
 800bfec:	4698      	mov	r8, r3
 800bfee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bff0:	f000 80b3 	beq.w	800c15a <_printf_i+0x182>
 800bff4:	d822      	bhi.n	800c03c <_printf_i+0x64>
 800bff6:	2963      	cmp	r1, #99	; 0x63
 800bff8:	d036      	beq.n	800c068 <_printf_i+0x90>
 800bffa:	d80a      	bhi.n	800c012 <_printf_i+0x3a>
 800bffc:	2900      	cmp	r1, #0
 800bffe:	f000 80b9 	beq.w	800c174 <_printf_i+0x19c>
 800c002:	2958      	cmp	r1, #88	; 0x58
 800c004:	f000 8083 	beq.w	800c10e <_printf_i+0x136>
 800c008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c00c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c010:	e032      	b.n	800c078 <_printf_i+0xa0>
 800c012:	2964      	cmp	r1, #100	; 0x64
 800c014:	d001      	beq.n	800c01a <_printf_i+0x42>
 800c016:	2969      	cmp	r1, #105	; 0x69
 800c018:	d1f6      	bne.n	800c008 <_printf_i+0x30>
 800c01a:	6820      	ldr	r0, [r4, #0]
 800c01c:	6813      	ldr	r3, [r2, #0]
 800c01e:	0605      	lsls	r5, r0, #24
 800c020:	f103 0104 	add.w	r1, r3, #4
 800c024:	d52a      	bpl.n	800c07c <_printf_i+0xa4>
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	6011      	str	r1, [r2, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	da03      	bge.n	800c036 <_printf_i+0x5e>
 800c02e:	222d      	movs	r2, #45	; 0x2d
 800c030:	425b      	negs	r3, r3
 800c032:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c036:	486f      	ldr	r0, [pc, #444]	; (800c1f4 <_printf_i+0x21c>)
 800c038:	220a      	movs	r2, #10
 800c03a:	e039      	b.n	800c0b0 <_printf_i+0xd8>
 800c03c:	2973      	cmp	r1, #115	; 0x73
 800c03e:	f000 809d 	beq.w	800c17c <_printf_i+0x1a4>
 800c042:	d808      	bhi.n	800c056 <_printf_i+0x7e>
 800c044:	296f      	cmp	r1, #111	; 0x6f
 800c046:	d020      	beq.n	800c08a <_printf_i+0xb2>
 800c048:	2970      	cmp	r1, #112	; 0x70
 800c04a:	d1dd      	bne.n	800c008 <_printf_i+0x30>
 800c04c:	6823      	ldr	r3, [r4, #0]
 800c04e:	f043 0320 	orr.w	r3, r3, #32
 800c052:	6023      	str	r3, [r4, #0]
 800c054:	e003      	b.n	800c05e <_printf_i+0x86>
 800c056:	2975      	cmp	r1, #117	; 0x75
 800c058:	d017      	beq.n	800c08a <_printf_i+0xb2>
 800c05a:	2978      	cmp	r1, #120	; 0x78
 800c05c:	d1d4      	bne.n	800c008 <_printf_i+0x30>
 800c05e:	2378      	movs	r3, #120	; 0x78
 800c060:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c064:	4864      	ldr	r0, [pc, #400]	; (800c1f8 <_printf_i+0x220>)
 800c066:	e055      	b.n	800c114 <_printf_i+0x13c>
 800c068:	6813      	ldr	r3, [r2, #0]
 800c06a:	1d19      	adds	r1, r3, #4
 800c06c:	681b      	ldr	r3, [r3, #0]
 800c06e:	6011      	str	r1, [r2, #0]
 800c070:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c074:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c078:	2301      	movs	r3, #1
 800c07a:	e08c      	b.n	800c196 <_printf_i+0x1be>
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	6011      	str	r1, [r2, #0]
 800c080:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c084:	bf18      	it	ne
 800c086:	b21b      	sxthne	r3, r3
 800c088:	e7cf      	b.n	800c02a <_printf_i+0x52>
 800c08a:	6813      	ldr	r3, [r2, #0]
 800c08c:	6825      	ldr	r5, [r4, #0]
 800c08e:	1d18      	adds	r0, r3, #4
 800c090:	6010      	str	r0, [r2, #0]
 800c092:	0628      	lsls	r0, r5, #24
 800c094:	d501      	bpl.n	800c09a <_printf_i+0xc2>
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	e002      	b.n	800c0a0 <_printf_i+0xc8>
 800c09a:	0668      	lsls	r0, r5, #25
 800c09c:	d5fb      	bpl.n	800c096 <_printf_i+0xbe>
 800c09e:	881b      	ldrh	r3, [r3, #0]
 800c0a0:	4854      	ldr	r0, [pc, #336]	; (800c1f4 <_printf_i+0x21c>)
 800c0a2:	296f      	cmp	r1, #111	; 0x6f
 800c0a4:	bf14      	ite	ne
 800c0a6:	220a      	movne	r2, #10
 800c0a8:	2208      	moveq	r2, #8
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c0b0:	6865      	ldr	r5, [r4, #4]
 800c0b2:	60a5      	str	r5, [r4, #8]
 800c0b4:	2d00      	cmp	r5, #0
 800c0b6:	f2c0 8095 	blt.w	800c1e4 <_printf_i+0x20c>
 800c0ba:	6821      	ldr	r1, [r4, #0]
 800c0bc:	f021 0104 	bic.w	r1, r1, #4
 800c0c0:	6021      	str	r1, [r4, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d13d      	bne.n	800c142 <_printf_i+0x16a>
 800c0c6:	2d00      	cmp	r5, #0
 800c0c8:	f040 808e 	bne.w	800c1e8 <_printf_i+0x210>
 800c0cc:	4665      	mov	r5, ip
 800c0ce:	2a08      	cmp	r2, #8
 800c0d0:	d10b      	bne.n	800c0ea <_printf_i+0x112>
 800c0d2:	6823      	ldr	r3, [r4, #0]
 800c0d4:	07db      	lsls	r3, r3, #31
 800c0d6:	d508      	bpl.n	800c0ea <_printf_i+0x112>
 800c0d8:	6923      	ldr	r3, [r4, #16]
 800c0da:	6862      	ldr	r2, [r4, #4]
 800c0dc:	429a      	cmp	r2, r3
 800c0de:	bfde      	ittt	le
 800c0e0:	2330      	movle	r3, #48	; 0x30
 800c0e2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c0e6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c0ea:	ebac 0305 	sub.w	r3, ip, r5
 800c0ee:	6123      	str	r3, [r4, #16]
 800c0f0:	f8cd 8000 	str.w	r8, [sp]
 800c0f4:	463b      	mov	r3, r7
 800c0f6:	aa03      	add	r2, sp, #12
 800c0f8:	4621      	mov	r1, r4
 800c0fa:	4630      	mov	r0, r6
 800c0fc:	f7ff fef6 	bl	800beec <_printf_common>
 800c100:	3001      	adds	r0, #1
 800c102:	d14d      	bne.n	800c1a0 <_printf_i+0x1c8>
 800c104:	f04f 30ff 	mov.w	r0, #4294967295
 800c108:	b005      	add	sp, #20
 800c10a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c10e:	4839      	ldr	r0, [pc, #228]	; (800c1f4 <_printf_i+0x21c>)
 800c110:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c114:	6813      	ldr	r3, [r2, #0]
 800c116:	6821      	ldr	r1, [r4, #0]
 800c118:	1d1d      	adds	r5, r3, #4
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	6015      	str	r5, [r2, #0]
 800c11e:	060a      	lsls	r2, r1, #24
 800c120:	d50b      	bpl.n	800c13a <_printf_i+0x162>
 800c122:	07ca      	lsls	r2, r1, #31
 800c124:	bf44      	itt	mi
 800c126:	f041 0120 	orrmi.w	r1, r1, #32
 800c12a:	6021      	strmi	r1, [r4, #0]
 800c12c:	b91b      	cbnz	r3, 800c136 <_printf_i+0x15e>
 800c12e:	6822      	ldr	r2, [r4, #0]
 800c130:	f022 0220 	bic.w	r2, r2, #32
 800c134:	6022      	str	r2, [r4, #0]
 800c136:	2210      	movs	r2, #16
 800c138:	e7b7      	b.n	800c0aa <_printf_i+0xd2>
 800c13a:	064d      	lsls	r5, r1, #25
 800c13c:	bf48      	it	mi
 800c13e:	b29b      	uxthmi	r3, r3
 800c140:	e7ef      	b.n	800c122 <_printf_i+0x14a>
 800c142:	4665      	mov	r5, ip
 800c144:	fbb3 f1f2 	udiv	r1, r3, r2
 800c148:	fb02 3311 	mls	r3, r2, r1, r3
 800c14c:	5cc3      	ldrb	r3, [r0, r3]
 800c14e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c152:	460b      	mov	r3, r1
 800c154:	2900      	cmp	r1, #0
 800c156:	d1f5      	bne.n	800c144 <_printf_i+0x16c>
 800c158:	e7b9      	b.n	800c0ce <_printf_i+0xf6>
 800c15a:	6813      	ldr	r3, [r2, #0]
 800c15c:	6825      	ldr	r5, [r4, #0]
 800c15e:	6961      	ldr	r1, [r4, #20]
 800c160:	1d18      	adds	r0, r3, #4
 800c162:	6010      	str	r0, [r2, #0]
 800c164:	0628      	lsls	r0, r5, #24
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	d501      	bpl.n	800c16e <_printf_i+0x196>
 800c16a:	6019      	str	r1, [r3, #0]
 800c16c:	e002      	b.n	800c174 <_printf_i+0x19c>
 800c16e:	066a      	lsls	r2, r5, #25
 800c170:	d5fb      	bpl.n	800c16a <_printf_i+0x192>
 800c172:	8019      	strh	r1, [r3, #0]
 800c174:	2300      	movs	r3, #0
 800c176:	6123      	str	r3, [r4, #16]
 800c178:	4665      	mov	r5, ip
 800c17a:	e7b9      	b.n	800c0f0 <_printf_i+0x118>
 800c17c:	6813      	ldr	r3, [r2, #0]
 800c17e:	1d19      	adds	r1, r3, #4
 800c180:	6011      	str	r1, [r2, #0]
 800c182:	681d      	ldr	r5, [r3, #0]
 800c184:	6862      	ldr	r2, [r4, #4]
 800c186:	2100      	movs	r1, #0
 800c188:	4628      	mov	r0, r5
 800c18a:	f7f4 f8a9 	bl	80002e0 <memchr>
 800c18e:	b108      	cbz	r0, 800c194 <_printf_i+0x1bc>
 800c190:	1b40      	subs	r0, r0, r5
 800c192:	6060      	str	r0, [r4, #4]
 800c194:	6863      	ldr	r3, [r4, #4]
 800c196:	6123      	str	r3, [r4, #16]
 800c198:	2300      	movs	r3, #0
 800c19a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c19e:	e7a7      	b.n	800c0f0 <_printf_i+0x118>
 800c1a0:	6923      	ldr	r3, [r4, #16]
 800c1a2:	462a      	mov	r2, r5
 800c1a4:	4639      	mov	r1, r7
 800c1a6:	4630      	mov	r0, r6
 800c1a8:	47c0      	blx	r8
 800c1aa:	3001      	adds	r0, #1
 800c1ac:	d0aa      	beq.n	800c104 <_printf_i+0x12c>
 800c1ae:	6823      	ldr	r3, [r4, #0]
 800c1b0:	079b      	lsls	r3, r3, #30
 800c1b2:	d413      	bmi.n	800c1dc <_printf_i+0x204>
 800c1b4:	68e0      	ldr	r0, [r4, #12]
 800c1b6:	9b03      	ldr	r3, [sp, #12]
 800c1b8:	4298      	cmp	r0, r3
 800c1ba:	bfb8      	it	lt
 800c1bc:	4618      	movlt	r0, r3
 800c1be:	e7a3      	b.n	800c108 <_printf_i+0x130>
 800c1c0:	2301      	movs	r3, #1
 800c1c2:	464a      	mov	r2, r9
 800c1c4:	4639      	mov	r1, r7
 800c1c6:	4630      	mov	r0, r6
 800c1c8:	47c0      	blx	r8
 800c1ca:	3001      	adds	r0, #1
 800c1cc:	d09a      	beq.n	800c104 <_printf_i+0x12c>
 800c1ce:	3501      	adds	r5, #1
 800c1d0:	68e3      	ldr	r3, [r4, #12]
 800c1d2:	9a03      	ldr	r2, [sp, #12]
 800c1d4:	1a9b      	subs	r3, r3, r2
 800c1d6:	42ab      	cmp	r3, r5
 800c1d8:	dcf2      	bgt.n	800c1c0 <_printf_i+0x1e8>
 800c1da:	e7eb      	b.n	800c1b4 <_printf_i+0x1dc>
 800c1dc:	2500      	movs	r5, #0
 800c1de:	f104 0919 	add.w	r9, r4, #25
 800c1e2:	e7f5      	b.n	800c1d0 <_printf_i+0x1f8>
 800c1e4:	2b00      	cmp	r3, #0
 800c1e6:	d1ac      	bne.n	800c142 <_printf_i+0x16a>
 800c1e8:	7803      	ldrb	r3, [r0, #0]
 800c1ea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c1ee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c1f2:	e76c      	b.n	800c0ce <_printf_i+0xf6>
 800c1f4:	08013e22 	.word	0x08013e22
 800c1f8:	08013e33 	.word	0x08013e33

0800c1fc <siprintf>:
 800c1fc:	b40e      	push	{r1, r2, r3}
 800c1fe:	b500      	push	{lr}
 800c200:	b09c      	sub	sp, #112	; 0x70
 800c202:	ab1d      	add	r3, sp, #116	; 0x74
 800c204:	9002      	str	r0, [sp, #8]
 800c206:	9006      	str	r0, [sp, #24]
 800c208:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c20c:	4809      	ldr	r0, [pc, #36]	; (800c234 <siprintf+0x38>)
 800c20e:	9107      	str	r1, [sp, #28]
 800c210:	9104      	str	r1, [sp, #16]
 800c212:	4909      	ldr	r1, [pc, #36]	; (800c238 <siprintf+0x3c>)
 800c214:	f853 2b04 	ldr.w	r2, [r3], #4
 800c218:	9105      	str	r1, [sp, #20]
 800c21a:	6800      	ldr	r0, [r0, #0]
 800c21c:	9301      	str	r3, [sp, #4]
 800c21e:	a902      	add	r1, sp, #8
 800c220:	f001 fa5e 	bl	800d6e0 <_svfiprintf_r>
 800c224:	9b02      	ldr	r3, [sp, #8]
 800c226:	2200      	movs	r2, #0
 800c228:	701a      	strb	r2, [r3, #0]
 800c22a:	b01c      	add	sp, #112	; 0x70
 800c22c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c230:	b003      	add	sp, #12
 800c232:	4770      	bx	lr
 800c234:	20000034 	.word	0x20000034
 800c238:	ffff0208 	.word	0xffff0208

0800c23c <quorem>:
 800c23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c240:	6903      	ldr	r3, [r0, #16]
 800c242:	690c      	ldr	r4, [r1, #16]
 800c244:	42a3      	cmp	r3, r4
 800c246:	4680      	mov	r8, r0
 800c248:	f2c0 8082 	blt.w	800c350 <quorem+0x114>
 800c24c:	3c01      	subs	r4, #1
 800c24e:	f101 0714 	add.w	r7, r1, #20
 800c252:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800c256:	f100 0614 	add.w	r6, r0, #20
 800c25a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800c25e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800c262:	eb06 030c 	add.w	r3, r6, ip
 800c266:	3501      	adds	r5, #1
 800c268:	eb07 090c 	add.w	r9, r7, ip
 800c26c:	9301      	str	r3, [sp, #4]
 800c26e:	fbb0 f5f5 	udiv	r5, r0, r5
 800c272:	b395      	cbz	r5, 800c2da <quorem+0x9e>
 800c274:	f04f 0a00 	mov.w	sl, #0
 800c278:	4638      	mov	r0, r7
 800c27a:	46b6      	mov	lr, r6
 800c27c:	46d3      	mov	fp, sl
 800c27e:	f850 2b04 	ldr.w	r2, [r0], #4
 800c282:	b293      	uxth	r3, r2
 800c284:	fb05 a303 	mla	r3, r5, r3, sl
 800c288:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c28c:	b29b      	uxth	r3, r3
 800c28e:	ebab 0303 	sub.w	r3, fp, r3
 800c292:	0c12      	lsrs	r2, r2, #16
 800c294:	f8de b000 	ldr.w	fp, [lr]
 800c298:	fb05 a202 	mla	r2, r5, r2, sl
 800c29c:	fa13 f38b 	uxtah	r3, r3, fp
 800c2a0:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800c2a4:	fa1f fb82 	uxth.w	fp, r2
 800c2a8:	f8de 2000 	ldr.w	r2, [lr]
 800c2ac:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800c2b0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c2b4:	b29b      	uxth	r3, r3
 800c2b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c2ba:	4581      	cmp	r9, r0
 800c2bc:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800c2c0:	f84e 3b04 	str.w	r3, [lr], #4
 800c2c4:	d2db      	bcs.n	800c27e <quorem+0x42>
 800c2c6:	f856 300c 	ldr.w	r3, [r6, ip]
 800c2ca:	b933      	cbnz	r3, 800c2da <quorem+0x9e>
 800c2cc:	9b01      	ldr	r3, [sp, #4]
 800c2ce:	3b04      	subs	r3, #4
 800c2d0:	429e      	cmp	r6, r3
 800c2d2:	461a      	mov	r2, r3
 800c2d4:	d330      	bcc.n	800c338 <quorem+0xfc>
 800c2d6:	f8c8 4010 	str.w	r4, [r8, #16]
 800c2da:	4640      	mov	r0, r8
 800c2dc:	f001 f82a 	bl	800d334 <__mcmp>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	db25      	blt.n	800c330 <quorem+0xf4>
 800c2e4:	3501      	adds	r5, #1
 800c2e6:	4630      	mov	r0, r6
 800c2e8:	f04f 0c00 	mov.w	ip, #0
 800c2ec:	f857 2b04 	ldr.w	r2, [r7], #4
 800c2f0:	f8d0 e000 	ldr.w	lr, [r0]
 800c2f4:	b293      	uxth	r3, r2
 800c2f6:	ebac 0303 	sub.w	r3, ip, r3
 800c2fa:	0c12      	lsrs	r2, r2, #16
 800c2fc:	fa13 f38e 	uxtah	r3, r3, lr
 800c300:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c304:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c308:	b29b      	uxth	r3, r3
 800c30a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c30e:	45b9      	cmp	r9, r7
 800c310:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c314:	f840 3b04 	str.w	r3, [r0], #4
 800c318:	d2e8      	bcs.n	800c2ec <quorem+0xb0>
 800c31a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800c31e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800c322:	b92a      	cbnz	r2, 800c330 <quorem+0xf4>
 800c324:	3b04      	subs	r3, #4
 800c326:	429e      	cmp	r6, r3
 800c328:	461a      	mov	r2, r3
 800c32a:	d30b      	bcc.n	800c344 <quorem+0x108>
 800c32c:	f8c8 4010 	str.w	r4, [r8, #16]
 800c330:	4628      	mov	r0, r5
 800c332:	b003      	add	sp, #12
 800c334:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c338:	6812      	ldr	r2, [r2, #0]
 800c33a:	3b04      	subs	r3, #4
 800c33c:	2a00      	cmp	r2, #0
 800c33e:	d1ca      	bne.n	800c2d6 <quorem+0x9a>
 800c340:	3c01      	subs	r4, #1
 800c342:	e7c5      	b.n	800c2d0 <quorem+0x94>
 800c344:	6812      	ldr	r2, [r2, #0]
 800c346:	3b04      	subs	r3, #4
 800c348:	2a00      	cmp	r2, #0
 800c34a:	d1ef      	bne.n	800c32c <quorem+0xf0>
 800c34c:	3c01      	subs	r4, #1
 800c34e:	e7ea      	b.n	800c326 <quorem+0xea>
 800c350:	2000      	movs	r0, #0
 800c352:	e7ee      	b.n	800c332 <quorem+0xf6>
 800c354:	0000      	movs	r0, r0
	...

0800c358 <_dtoa_r>:
 800c358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c35c:	ec57 6b10 	vmov	r6, r7, d0
 800c360:	b097      	sub	sp, #92	; 0x5c
 800c362:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c364:	9106      	str	r1, [sp, #24]
 800c366:	4604      	mov	r4, r0
 800c368:	920b      	str	r2, [sp, #44]	; 0x2c
 800c36a:	9312      	str	r3, [sp, #72]	; 0x48
 800c36c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c370:	e9cd 6700 	strd	r6, r7, [sp]
 800c374:	b93d      	cbnz	r5, 800c386 <_dtoa_r+0x2e>
 800c376:	2010      	movs	r0, #16
 800c378:	f000 fdb4 	bl	800cee4 <malloc>
 800c37c:	6260      	str	r0, [r4, #36]	; 0x24
 800c37e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c382:	6005      	str	r5, [r0, #0]
 800c384:	60c5      	str	r5, [r0, #12]
 800c386:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c388:	6819      	ldr	r1, [r3, #0]
 800c38a:	b151      	cbz	r1, 800c3a2 <_dtoa_r+0x4a>
 800c38c:	685a      	ldr	r2, [r3, #4]
 800c38e:	604a      	str	r2, [r1, #4]
 800c390:	2301      	movs	r3, #1
 800c392:	4093      	lsls	r3, r2
 800c394:	608b      	str	r3, [r1, #8]
 800c396:	4620      	mov	r0, r4
 800c398:	f000 fdeb 	bl	800cf72 <_Bfree>
 800c39c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]
 800c3a2:	1e3b      	subs	r3, r7, #0
 800c3a4:	bfbb      	ittet	lt
 800c3a6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800c3aa:	9301      	strlt	r3, [sp, #4]
 800c3ac:	2300      	movge	r3, #0
 800c3ae:	2201      	movlt	r2, #1
 800c3b0:	bfac      	ite	ge
 800c3b2:	f8c8 3000 	strge.w	r3, [r8]
 800c3b6:	f8c8 2000 	strlt.w	r2, [r8]
 800c3ba:	4baf      	ldr	r3, [pc, #700]	; (800c678 <_dtoa_r+0x320>)
 800c3bc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800c3c0:	ea33 0308 	bics.w	r3, r3, r8
 800c3c4:	d114      	bne.n	800c3f0 <_dtoa_r+0x98>
 800c3c6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c3c8:	f242 730f 	movw	r3, #9999	; 0x270f
 800c3cc:	6013      	str	r3, [r2, #0]
 800c3ce:	9b00      	ldr	r3, [sp, #0]
 800c3d0:	b923      	cbnz	r3, 800c3dc <_dtoa_r+0x84>
 800c3d2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800c3d6:	2800      	cmp	r0, #0
 800c3d8:	f000 8542 	beq.w	800ce60 <_dtoa_r+0xb08>
 800c3dc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c3de:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800c68c <_dtoa_r+0x334>
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 8544 	beq.w	800ce70 <_dtoa_r+0xb18>
 800c3e8:	f10b 0303 	add.w	r3, fp, #3
 800c3ec:	f000 bd3e 	b.w	800ce6c <_dtoa_r+0xb14>
 800c3f0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	4639      	mov	r1, r7
 800c3fc:	f7f4 fbe4 	bl	8000bc8 <__aeabi_dcmpeq>
 800c400:	4681      	mov	r9, r0
 800c402:	b168      	cbz	r0, 800c420 <_dtoa_r+0xc8>
 800c404:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c406:	2301      	movs	r3, #1
 800c408:	6013      	str	r3, [r2, #0]
 800c40a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	f000 8524 	beq.w	800ce5a <_dtoa_r+0xb02>
 800c412:	4b9a      	ldr	r3, [pc, #616]	; (800c67c <_dtoa_r+0x324>)
 800c414:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800c416:	f103 3bff 	add.w	fp, r3, #4294967295
 800c41a:	6013      	str	r3, [r2, #0]
 800c41c:	f000 bd28 	b.w	800ce70 <_dtoa_r+0xb18>
 800c420:	aa14      	add	r2, sp, #80	; 0x50
 800c422:	a915      	add	r1, sp, #84	; 0x54
 800c424:	ec47 6b10 	vmov	d0, r6, r7
 800c428:	4620      	mov	r0, r4
 800c42a:	f000 fffa 	bl	800d422 <__d2b>
 800c42e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800c432:	9004      	str	r0, [sp, #16]
 800c434:	2d00      	cmp	r5, #0
 800c436:	d07c      	beq.n	800c532 <_dtoa_r+0x1da>
 800c438:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c43c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800c440:	46b2      	mov	sl, r6
 800c442:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800c446:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800c44a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800c44e:	2200      	movs	r2, #0
 800c450:	4b8b      	ldr	r3, [pc, #556]	; (800c680 <_dtoa_r+0x328>)
 800c452:	4650      	mov	r0, sl
 800c454:	4659      	mov	r1, fp
 800c456:	f7f3 ff97 	bl	8000388 <__aeabi_dsub>
 800c45a:	a381      	add	r3, pc, #516	; (adr r3, 800c660 <_dtoa_r+0x308>)
 800c45c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c460:	f7f4 f94a 	bl	80006f8 <__aeabi_dmul>
 800c464:	a380      	add	r3, pc, #512	; (adr r3, 800c668 <_dtoa_r+0x310>)
 800c466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c46a:	f7f3 ff8f 	bl	800038c <__adddf3>
 800c46e:	4606      	mov	r6, r0
 800c470:	4628      	mov	r0, r5
 800c472:	460f      	mov	r7, r1
 800c474:	f7f4 f8d6 	bl	8000624 <__aeabi_i2d>
 800c478:	a37d      	add	r3, pc, #500	; (adr r3, 800c670 <_dtoa_r+0x318>)
 800c47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c47e:	f7f4 f93b 	bl	80006f8 <__aeabi_dmul>
 800c482:	4602      	mov	r2, r0
 800c484:	460b      	mov	r3, r1
 800c486:	4630      	mov	r0, r6
 800c488:	4639      	mov	r1, r7
 800c48a:	f7f3 ff7f 	bl	800038c <__adddf3>
 800c48e:	4606      	mov	r6, r0
 800c490:	460f      	mov	r7, r1
 800c492:	f7f4 fbe1 	bl	8000c58 <__aeabi_d2iz>
 800c496:	2200      	movs	r2, #0
 800c498:	4682      	mov	sl, r0
 800c49a:	2300      	movs	r3, #0
 800c49c:	4630      	mov	r0, r6
 800c49e:	4639      	mov	r1, r7
 800c4a0:	f7f4 fb9c 	bl	8000bdc <__aeabi_dcmplt>
 800c4a4:	b148      	cbz	r0, 800c4ba <_dtoa_r+0x162>
 800c4a6:	4650      	mov	r0, sl
 800c4a8:	f7f4 f8bc 	bl	8000624 <__aeabi_i2d>
 800c4ac:	4632      	mov	r2, r6
 800c4ae:	463b      	mov	r3, r7
 800c4b0:	f7f4 fb8a 	bl	8000bc8 <__aeabi_dcmpeq>
 800c4b4:	b908      	cbnz	r0, 800c4ba <_dtoa_r+0x162>
 800c4b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4ba:	f1ba 0f16 	cmp.w	sl, #22
 800c4be:	d859      	bhi.n	800c574 <_dtoa_r+0x21c>
 800c4c0:	4970      	ldr	r1, [pc, #448]	; (800c684 <_dtoa_r+0x32c>)
 800c4c2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800c4c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c4ca:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c4ce:	f7f4 fba3 	bl	8000c18 <__aeabi_dcmpgt>
 800c4d2:	2800      	cmp	r0, #0
 800c4d4:	d050      	beq.n	800c578 <_dtoa_r+0x220>
 800c4d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c4da:	2300      	movs	r3, #0
 800c4dc:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c4e0:	1b5d      	subs	r5, r3, r5
 800c4e2:	f1b5 0801 	subs.w	r8, r5, #1
 800c4e6:	bf49      	itett	mi
 800c4e8:	f1c5 0301 	rsbmi	r3, r5, #1
 800c4ec:	2300      	movpl	r3, #0
 800c4ee:	9305      	strmi	r3, [sp, #20]
 800c4f0:	f04f 0800 	movmi.w	r8, #0
 800c4f4:	bf58      	it	pl
 800c4f6:	9305      	strpl	r3, [sp, #20]
 800c4f8:	f1ba 0f00 	cmp.w	sl, #0
 800c4fc:	db3e      	blt.n	800c57c <_dtoa_r+0x224>
 800c4fe:	2300      	movs	r3, #0
 800c500:	44d0      	add	r8, sl
 800c502:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800c506:	9307      	str	r3, [sp, #28]
 800c508:	9b06      	ldr	r3, [sp, #24]
 800c50a:	2b09      	cmp	r3, #9
 800c50c:	f200 8090 	bhi.w	800c630 <_dtoa_r+0x2d8>
 800c510:	2b05      	cmp	r3, #5
 800c512:	bfc4      	itt	gt
 800c514:	3b04      	subgt	r3, #4
 800c516:	9306      	strgt	r3, [sp, #24]
 800c518:	9b06      	ldr	r3, [sp, #24]
 800c51a:	f1a3 0302 	sub.w	r3, r3, #2
 800c51e:	bfcc      	ite	gt
 800c520:	2500      	movgt	r5, #0
 800c522:	2501      	movle	r5, #1
 800c524:	2b03      	cmp	r3, #3
 800c526:	f200 808f 	bhi.w	800c648 <_dtoa_r+0x2f0>
 800c52a:	e8df f003 	tbb	[pc, r3]
 800c52e:	7f7d      	.short	0x7f7d
 800c530:	7131      	.short	0x7131
 800c532:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800c536:	441d      	add	r5, r3
 800c538:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800c53c:	2820      	cmp	r0, #32
 800c53e:	dd13      	ble.n	800c568 <_dtoa_r+0x210>
 800c540:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800c544:	9b00      	ldr	r3, [sp, #0]
 800c546:	fa08 f800 	lsl.w	r8, r8, r0
 800c54a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800c54e:	fa23 f000 	lsr.w	r0, r3, r0
 800c552:	ea48 0000 	orr.w	r0, r8, r0
 800c556:	f7f4 f855 	bl	8000604 <__aeabi_ui2d>
 800c55a:	2301      	movs	r3, #1
 800c55c:	4682      	mov	sl, r0
 800c55e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800c562:	3d01      	subs	r5, #1
 800c564:	9313      	str	r3, [sp, #76]	; 0x4c
 800c566:	e772      	b.n	800c44e <_dtoa_r+0xf6>
 800c568:	9b00      	ldr	r3, [sp, #0]
 800c56a:	f1c0 0020 	rsb	r0, r0, #32
 800c56e:	fa03 f000 	lsl.w	r0, r3, r0
 800c572:	e7f0      	b.n	800c556 <_dtoa_r+0x1fe>
 800c574:	2301      	movs	r3, #1
 800c576:	e7b1      	b.n	800c4dc <_dtoa_r+0x184>
 800c578:	900f      	str	r0, [sp, #60]	; 0x3c
 800c57a:	e7b0      	b.n	800c4de <_dtoa_r+0x186>
 800c57c:	9b05      	ldr	r3, [sp, #20]
 800c57e:	eba3 030a 	sub.w	r3, r3, sl
 800c582:	9305      	str	r3, [sp, #20]
 800c584:	f1ca 0300 	rsb	r3, sl, #0
 800c588:	9307      	str	r3, [sp, #28]
 800c58a:	2300      	movs	r3, #0
 800c58c:	930e      	str	r3, [sp, #56]	; 0x38
 800c58e:	e7bb      	b.n	800c508 <_dtoa_r+0x1b0>
 800c590:	2301      	movs	r3, #1
 800c592:	930a      	str	r3, [sp, #40]	; 0x28
 800c594:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c596:	2b00      	cmp	r3, #0
 800c598:	dd59      	ble.n	800c64e <_dtoa_r+0x2f6>
 800c59a:	9302      	str	r3, [sp, #8]
 800c59c:	4699      	mov	r9, r3
 800c59e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c5a0:	2200      	movs	r2, #0
 800c5a2:	6072      	str	r2, [r6, #4]
 800c5a4:	2204      	movs	r2, #4
 800c5a6:	f102 0014 	add.w	r0, r2, #20
 800c5aa:	4298      	cmp	r0, r3
 800c5ac:	6871      	ldr	r1, [r6, #4]
 800c5ae:	d953      	bls.n	800c658 <_dtoa_r+0x300>
 800c5b0:	4620      	mov	r0, r4
 800c5b2:	f000 fcaa 	bl	800cf0a <_Balloc>
 800c5b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c5b8:	6030      	str	r0, [r6, #0]
 800c5ba:	f1b9 0f0e 	cmp.w	r9, #14
 800c5be:	f8d3 b000 	ldr.w	fp, [r3]
 800c5c2:	f200 80e6 	bhi.w	800c792 <_dtoa_r+0x43a>
 800c5c6:	2d00      	cmp	r5, #0
 800c5c8:	f000 80e3 	beq.w	800c792 <_dtoa_r+0x43a>
 800c5cc:	ed9d 7b00 	vldr	d7, [sp]
 800c5d0:	f1ba 0f00 	cmp.w	sl, #0
 800c5d4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800c5d8:	dd74      	ble.n	800c6c4 <_dtoa_r+0x36c>
 800c5da:	4a2a      	ldr	r2, [pc, #168]	; (800c684 <_dtoa_r+0x32c>)
 800c5dc:	f00a 030f 	and.w	r3, sl, #15
 800c5e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800c5e4:	ed93 7b00 	vldr	d7, [r3]
 800c5e8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800c5ec:	06f0      	lsls	r0, r6, #27
 800c5ee:	ed8d 7b08 	vstr	d7, [sp, #32]
 800c5f2:	d565      	bpl.n	800c6c0 <_dtoa_r+0x368>
 800c5f4:	4b24      	ldr	r3, [pc, #144]	; (800c688 <_dtoa_r+0x330>)
 800c5f6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c5fa:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c5fe:	f7f4 f9a5 	bl	800094c <__aeabi_ddiv>
 800c602:	e9cd 0100 	strd	r0, r1, [sp]
 800c606:	f006 060f 	and.w	r6, r6, #15
 800c60a:	2503      	movs	r5, #3
 800c60c:	4f1e      	ldr	r7, [pc, #120]	; (800c688 <_dtoa_r+0x330>)
 800c60e:	e04c      	b.n	800c6aa <_dtoa_r+0x352>
 800c610:	2301      	movs	r3, #1
 800c612:	930a      	str	r3, [sp, #40]	; 0x28
 800c614:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c616:	4453      	add	r3, sl
 800c618:	f103 0901 	add.w	r9, r3, #1
 800c61c:	9302      	str	r3, [sp, #8]
 800c61e:	464b      	mov	r3, r9
 800c620:	2b01      	cmp	r3, #1
 800c622:	bfb8      	it	lt
 800c624:	2301      	movlt	r3, #1
 800c626:	e7ba      	b.n	800c59e <_dtoa_r+0x246>
 800c628:	2300      	movs	r3, #0
 800c62a:	e7b2      	b.n	800c592 <_dtoa_r+0x23a>
 800c62c:	2300      	movs	r3, #0
 800c62e:	e7f0      	b.n	800c612 <_dtoa_r+0x2ba>
 800c630:	2501      	movs	r5, #1
 800c632:	2300      	movs	r3, #0
 800c634:	9306      	str	r3, [sp, #24]
 800c636:	950a      	str	r5, [sp, #40]	; 0x28
 800c638:	f04f 33ff 	mov.w	r3, #4294967295
 800c63c:	9302      	str	r3, [sp, #8]
 800c63e:	4699      	mov	r9, r3
 800c640:	2200      	movs	r2, #0
 800c642:	2312      	movs	r3, #18
 800c644:	920b      	str	r2, [sp, #44]	; 0x2c
 800c646:	e7aa      	b.n	800c59e <_dtoa_r+0x246>
 800c648:	2301      	movs	r3, #1
 800c64a:	930a      	str	r3, [sp, #40]	; 0x28
 800c64c:	e7f4      	b.n	800c638 <_dtoa_r+0x2e0>
 800c64e:	2301      	movs	r3, #1
 800c650:	9302      	str	r3, [sp, #8]
 800c652:	4699      	mov	r9, r3
 800c654:	461a      	mov	r2, r3
 800c656:	e7f5      	b.n	800c644 <_dtoa_r+0x2ec>
 800c658:	3101      	adds	r1, #1
 800c65a:	6071      	str	r1, [r6, #4]
 800c65c:	0052      	lsls	r2, r2, #1
 800c65e:	e7a2      	b.n	800c5a6 <_dtoa_r+0x24e>
 800c660:	636f4361 	.word	0x636f4361
 800c664:	3fd287a7 	.word	0x3fd287a7
 800c668:	8b60c8b3 	.word	0x8b60c8b3
 800c66c:	3fc68a28 	.word	0x3fc68a28
 800c670:	509f79fb 	.word	0x509f79fb
 800c674:	3fd34413 	.word	0x3fd34413
 800c678:	7ff00000 	.word	0x7ff00000
 800c67c:	08013e21 	.word	0x08013e21
 800c680:	3ff80000 	.word	0x3ff80000
 800c684:	08013ee0 	.word	0x08013ee0
 800c688:	08013eb8 	.word	0x08013eb8
 800c68c:	08013e4d 	.word	0x08013e4d
 800c690:	07f1      	lsls	r1, r6, #31
 800c692:	d508      	bpl.n	800c6a6 <_dtoa_r+0x34e>
 800c694:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c69c:	f7f4 f82c 	bl	80006f8 <__aeabi_dmul>
 800c6a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c6a4:	3501      	adds	r5, #1
 800c6a6:	1076      	asrs	r6, r6, #1
 800c6a8:	3708      	adds	r7, #8
 800c6aa:	2e00      	cmp	r6, #0
 800c6ac:	d1f0      	bne.n	800c690 <_dtoa_r+0x338>
 800c6ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c6b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c6b6:	f7f4 f949 	bl	800094c <__aeabi_ddiv>
 800c6ba:	e9cd 0100 	strd	r0, r1, [sp]
 800c6be:	e01a      	b.n	800c6f6 <_dtoa_r+0x39e>
 800c6c0:	2502      	movs	r5, #2
 800c6c2:	e7a3      	b.n	800c60c <_dtoa_r+0x2b4>
 800c6c4:	f000 80a0 	beq.w	800c808 <_dtoa_r+0x4b0>
 800c6c8:	f1ca 0600 	rsb	r6, sl, #0
 800c6cc:	4b9f      	ldr	r3, [pc, #636]	; (800c94c <_dtoa_r+0x5f4>)
 800c6ce:	4fa0      	ldr	r7, [pc, #640]	; (800c950 <_dtoa_r+0x5f8>)
 800c6d0:	f006 020f 	and.w	r2, r6, #15
 800c6d4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c6d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6dc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800c6e0:	f7f4 f80a 	bl	80006f8 <__aeabi_dmul>
 800c6e4:	e9cd 0100 	strd	r0, r1, [sp]
 800c6e8:	1136      	asrs	r6, r6, #4
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	2502      	movs	r5, #2
 800c6ee:	2e00      	cmp	r6, #0
 800c6f0:	d17f      	bne.n	800c7f2 <_dtoa_r+0x49a>
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d1e1      	bne.n	800c6ba <_dtoa_r+0x362>
 800c6f6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	f000 8087 	beq.w	800c80c <_dtoa_r+0x4b4>
 800c6fe:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c702:	2200      	movs	r2, #0
 800c704:	4b93      	ldr	r3, [pc, #588]	; (800c954 <_dtoa_r+0x5fc>)
 800c706:	4630      	mov	r0, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f4 fa67 	bl	8000bdc <__aeabi_dcmplt>
 800c70e:	2800      	cmp	r0, #0
 800c710:	d07c      	beq.n	800c80c <_dtoa_r+0x4b4>
 800c712:	f1b9 0f00 	cmp.w	r9, #0
 800c716:	d079      	beq.n	800c80c <_dtoa_r+0x4b4>
 800c718:	9b02      	ldr	r3, [sp, #8]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	dd35      	ble.n	800c78a <_dtoa_r+0x432>
 800c71e:	f10a 33ff 	add.w	r3, sl, #4294967295
 800c722:	9308      	str	r3, [sp, #32]
 800c724:	4639      	mov	r1, r7
 800c726:	2200      	movs	r2, #0
 800c728:	4b8b      	ldr	r3, [pc, #556]	; (800c958 <_dtoa_r+0x600>)
 800c72a:	4630      	mov	r0, r6
 800c72c:	f7f3 ffe4 	bl	80006f8 <__aeabi_dmul>
 800c730:	e9cd 0100 	strd	r0, r1, [sp]
 800c734:	9f02      	ldr	r7, [sp, #8]
 800c736:	3501      	adds	r5, #1
 800c738:	4628      	mov	r0, r5
 800c73a:	f7f3 ff73 	bl	8000624 <__aeabi_i2d>
 800c73e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c742:	f7f3 ffd9 	bl	80006f8 <__aeabi_dmul>
 800c746:	2200      	movs	r2, #0
 800c748:	4b84      	ldr	r3, [pc, #528]	; (800c95c <_dtoa_r+0x604>)
 800c74a:	f7f3 fe1f 	bl	800038c <__adddf3>
 800c74e:	4605      	mov	r5, r0
 800c750:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800c754:	2f00      	cmp	r7, #0
 800c756:	d15d      	bne.n	800c814 <_dtoa_r+0x4bc>
 800c758:	2200      	movs	r2, #0
 800c75a:	4b81      	ldr	r3, [pc, #516]	; (800c960 <_dtoa_r+0x608>)
 800c75c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c760:	f7f3 fe12 	bl	8000388 <__aeabi_dsub>
 800c764:	462a      	mov	r2, r5
 800c766:	4633      	mov	r3, r6
 800c768:	e9cd 0100 	strd	r0, r1, [sp]
 800c76c:	f7f4 fa54 	bl	8000c18 <__aeabi_dcmpgt>
 800c770:	2800      	cmp	r0, #0
 800c772:	f040 8288 	bne.w	800cc86 <_dtoa_r+0x92e>
 800c776:	462a      	mov	r2, r5
 800c778:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800c77c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c780:	f7f4 fa2c 	bl	8000bdc <__aeabi_dcmplt>
 800c784:	2800      	cmp	r0, #0
 800c786:	f040 827c 	bne.w	800cc82 <_dtoa_r+0x92a>
 800c78a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c78e:	e9cd 2300 	strd	r2, r3, [sp]
 800c792:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c794:	2b00      	cmp	r3, #0
 800c796:	f2c0 8150 	blt.w	800ca3a <_dtoa_r+0x6e2>
 800c79a:	f1ba 0f0e 	cmp.w	sl, #14
 800c79e:	f300 814c 	bgt.w	800ca3a <_dtoa_r+0x6e2>
 800c7a2:	4b6a      	ldr	r3, [pc, #424]	; (800c94c <_dtoa_r+0x5f4>)
 800c7a4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800c7a8:	ed93 7b00 	vldr	d7, [r3]
 800c7ac:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800c7b4:	f280 80d8 	bge.w	800c968 <_dtoa_r+0x610>
 800c7b8:	f1b9 0f00 	cmp.w	r9, #0
 800c7bc:	f300 80d4 	bgt.w	800c968 <_dtoa_r+0x610>
 800c7c0:	f040 825e 	bne.w	800cc80 <_dtoa_r+0x928>
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	4b66      	ldr	r3, [pc, #408]	; (800c960 <_dtoa_r+0x608>)
 800c7c8:	ec51 0b17 	vmov	r0, r1, d7
 800c7cc:	f7f3 ff94 	bl	80006f8 <__aeabi_dmul>
 800c7d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c7d4:	f7f4 fa16 	bl	8000c04 <__aeabi_dcmpge>
 800c7d8:	464f      	mov	r7, r9
 800c7da:	464e      	mov	r6, r9
 800c7dc:	2800      	cmp	r0, #0
 800c7de:	f040 8234 	bne.w	800cc4a <_dtoa_r+0x8f2>
 800c7e2:	2331      	movs	r3, #49	; 0x31
 800c7e4:	f10b 0501 	add.w	r5, fp, #1
 800c7e8:	f88b 3000 	strb.w	r3, [fp]
 800c7ec:	f10a 0a01 	add.w	sl, sl, #1
 800c7f0:	e22f      	b.n	800cc52 <_dtoa_r+0x8fa>
 800c7f2:	07f2      	lsls	r2, r6, #31
 800c7f4:	d505      	bpl.n	800c802 <_dtoa_r+0x4aa>
 800c7f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7fa:	f7f3 ff7d 	bl	80006f8 <__aeabi_dmul>
 800c7fe:	3501      	adds	r5, #1
 800c800:	2301      	movs	r3, #1
 800c802:	1076      	asrs	r6, r6, #1
 800c804:	3708      	adds	r7, #8
 800c806:	e772      	b.n	800c6ee <_dtoa_r+0x396>
 800c808:	2502      	movs	r5, #2
 800c80a:	e774      	b.n	800c6f6 <_dtoa_r+0x39e>
 800c80c:	f8cd a020 	str.w	sl, [sp, #32]
 800c810:	464f      	mov	r7, r9
 800c812:	e791      	b.n	800c738 <_dtoa_r+0x3e0>
 800c814:	4b4d      	ldr	r3, [pc, #308]	; (800c94c <_dtoa_r+0x5f4>)
 800c816:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c81a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800c81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c820:	2b00      	cmp	r3, #0
 800c822:	d047      	beq.n	800c8b4 <_dtoa_r+0x55c>
 800c824:	4602      	mov	r2, r0
 800c826:	460b      	mov	r3, r1
 800c828:	2000      	movs	r0, #0
 800c82a:	494e      	ldr	r1, [pc, #312]	; (800c964 <_dtoa_r+0x60c>)
 800c82c:	f7f4 f88e 	bl	800094c <__aeabi_ddiv>
 800c830:	462a      	mov	r2, r5
 800c832:	4633      	mov	r3, r6
 800c834:	f7f3 fda8 	bl	8000388 <__aeabi_dsub>
 800c838:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c83c:	465d      	mov	r5, fp
 800c83e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c842:	f7f4 fa09 	bl	8000c58 <__aeabi_d2iz>
 800c846:	4606      	mov	r6, r0
 800c848:	f7f3 feec 	bl	8000624 <__aeabi_i2d>
 800c84c:	4602      	mov	r2, r0
 800c84e:	460b      	mov	r3, r1
 800c850:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c854:	f7f3 fd98 	bl	8000388 <__aeabi_dsub>
 800c858:	3630      	adds	r6, #48	; 0x30
 800c85a:	f805 6b01 	strb.w	r6, [r5], #1
 800c85e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c862:	e9cd 0100 	strd	r0, r1, [sp]
 800c866:	f7f4 f9b9 	bl	8000bdc <__aeabi_dcmplt>
 800c86a:	2800      	cmp	r0, #0
 800c86c:	d163      	bne.n	800c936 <_dtoa_r+0x5de>
 800c86e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c872:	2000      	movs	r0, #0
 800c874:	4937      	ldr	r1, [pc, #220]	; (800c954 <_dtoa_r+0x5fc>)
 800c876:	f7f3 fd87 	bl	8000388 <__aeabi_dsub>
 800c87a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c87e:	f7f4 f9ad 	bl	8000bdc <__aeabi_dcmplt>
 800c882:	2800      	cmp	r0, #0
 800c884:	f040 80b7 	bne.w	800c9f6 <_dtoa_r+0x69e>
 800c888:	eba5 030b 	sub.w	r3, r5, fp
 800c88c:	429f      	cmp	r7, r3
 800c88e:	f77f af7c 	ble.w	800c78a <_dtoa_r+0x432>
 800c892:	2200      	movs	r2, #0
 800c894:	4b30      	ldr	r3, [pc, #192]	; (800c958 <_dtoa_r+0x600>)
 800c896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c89a:	f7f3 ff2d 	bl	80006f8 <__aeabi_dmul>
 800c89e:	2200      	movs	r2, #0
 800c8a0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c8a4:	4b2c      	ldr	r3, [pc, #176]	; (800c958 <_dtoa_r+0x600>)
 800c8a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8aa:	f7f3 ff25 	bl	80006f8 <__aeabi_dmul>
 800c8ae:	e9cd 0100 	strd	r0, r1, [sp]
 800c8b2:	e7c4      	b.n	800c83e <_dtoa_r+0x4e6>
 800c8b4:	462a      	mov	r2, r5
 800c8b6:	4633      	mov	r3, r6
 800c8b8:	f7f3 ff1e 	bl	80006f8 <__aeabi_dmul>
 800c8bc:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800c8c0:	eb0b 0507 	add.w	r5, fp, r7
 800c8c4:	465e      	mov	r6, fp
 800c8c6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8ca:	f7f4 f9c5 	bl	8000c58 <__aeabi_d2iz>
 800c8ce:	4607      	mov	r7, r0
 800c8d0:	f7f3 fea8 	bl	8000624 <__aeabi_i2d>
 800c8d4:	3730      	adds	r7, #48	; 0x30
 800c8d6:	4602      	mov	r2, r0
 800c8d8:	460b      	mov	r3, r1
 800c8da:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c8de:	f7f3 fd53 	bl	8000388 <__aeabi_dsub>
 800c8e2:	f806 7b01 	strb.w	r7, [r6], #1
 800c8e6:	42ae      	cmp	r6, r5
 800c8e8:	e9cd 0100 	strd	r0, r1, [sp]
 800c8ec:	f04f 0200 	mov.w	r2, #0
 800c8f0:	d126      	bne.n	800c940 <_dtoa_r+0x5e8>
 800c8f2:	4b1c      	ldr	r3, [pc, #112]	; (800c964 <_dtoa_r+0x60c>)
 800c8f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c8f8:	f7f3 fd48 	bl	800038c <__adddf3>
 800c8fc:	4602      	mov	r2, r0
 800c8fe:	460b      	mov	r3, r1
 800c900:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c904:	f7f4 f988 	bl	8000c18 <__aeabi_dcmpgt>
 800c908:	2800      	cmp	r0, #0
 800c90a:	d174      	bne.n	800c9f6 <_dtoa_r+0x69e>
 800c90c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800c910:	2000      	movs	r0, #0
 800c912:	4914      	ldr	r1, [pc, #80]	; (800c964 <_dtoa_r+0x60c>)
 800c914:	f7f3 fd38 	bl	8000388 <__aeabi_dsub>
 800c918:	4602      	mov	r2, r0
 800c91a:	460b      	mov	r3, r1
 800c91c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c920:	f7f4 f95c 	bl	8000bdc <__aeabi_dcmplt>
 800c924:	2800      	cmp	r0, #0
 800c926:	f43f af30 	beq.w	800c78a <_dtoa_r+0x432>
 800c92a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c92e:	2b30      	cmp	r3, #48	; 0x30
 800c930:	f105 32ff 	add.w	r2, r5, #4294967295
 800c934:	d002      	beq.n	800c93c <_dtoa_r+0x5e4>
 800c936:	f8dd a020 	ldr.w	sl, [sp, #32]
 800c93a:	e04a      	b.n	800c9d2 <_dtoa_r+0x67a>
 800c93c:	4615      	mov	r5, r2
 800c93e:	e7f4      	b.n	800c92a <_dtoa_r+0x5d2>
 800c940:	4b05      	ldr	r3, [pc, #20]	; (800c958 <_dtoa_r+0x600>)
 800c942:	f7f3 fed9 	bl	80006f8 <__aeabi_dmul>
 800c946:	e9cd 0100 	strd	r0, r1, [sp]
 800c94a:	e7bc      	b.n	800c8c6 <_dtoa_r+0x56e>
 800c94c:	08013ee0 	.word	0x08013ee0
 800c950:	08013eb8 	.word	0x08013eb8
 800c954:	3ff00000 	.word	0x3ff00000
 800c958:	40240000 	.word	0x40240000
 800c95c:	401c0000 	.word	0x401c0000
 800c960:	40140000 	.word	0x40140000
 800c964:	3fe00000 	.word	0x3fe00000
 800c968:	e9dd 6700 	ldrd	r6, r7, [sp]
 800c96c:	465d      	mov	r5, fp
 800c96e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c972:	4630      	mov	r0, r6
 800c974:	4639      	mov	r1, r7
 800c976:	f7f3 ffe9 	bl	800094c <__aeabi_ddiv>
 800c97a:	f7f4 f96d 	bl	8000c58 <__aeabi_d2iz>
 800c97e:	4680      	mov	r8, r0
 800c980:	f7f3 fe50 	bl	8000624 <__aeabi_i2d>
 800c984:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c988:	f7f3 feb6 	bl	80006f8 <__aeabi_dmul>
 800c98c:	4602      	mov	r2, r0
 800c98e:	460b      	mov	r3, r1
 800c990:	4630      	mov	r0, r6
 800c992:	4639      	mov	r1, r7
 800c994:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800c998:	f7f3 fcf6 	bl	8000388 <__aeabi_dsub>
 800c99c:	f805 6b01 	strb.w	r6, [r5], #1
 800c9a0:	eba5 060b 	sub.w	r6, r5, fp
 800c9a4:	45b1      	cmp	r9, r6
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	d139      	bne.n	800ca20 <_dtoa_r+0x6c8>
 800c9ac:	f7f3 fcee 	bl	800038c <__adddf3>
 800c9b0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9b4:	4606      	mov	r6, r0
 800c9b6:	460f      	mov	r7, r1
 800c9b8:	f7f4 f92e 	bl	8000c18 <__aeabi_dcmpgt>
 800c9bc:	b9c8      	cbnz	r0, 800c9f2 <_dtoa_r+0x69a>
 800c9be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c9c2:	4630      	mov	r0, r6
 800c9c4:	4639      	mov	r1, r7
 800c9c6:	f7f4 f8ff 	bl	8000bc8 <__aeabi_dcmpeq>
 800c9ca:	b110      	cbz	r0, 800c9d2 <_dtoa_r+0x67a>
 800c9cc:	f018 0f01 	tst.w	r8, #1
 800c9d0:	d10f      	bne.n	800c9f2 <_dtoa_r+0x69a>
 800c9d2:	9904      	ldr	r1, [sp, #16]
 800c9d4:	4620      	mov	r0, r4
 800c9d6:	f000 facc 	bl	800cf72 <_Bfree>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c9de:	702b      	strb	r3, [r5, #0]
 800c9e0:	f10a 0301 	add.w	r3, sl, #1
 800c9e4:	6013      	str	r3, [r2, #0]
 800c9e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 8241 	beq.w	800ce70 <_dtoa_r+0xb18>
 800c9ee:	601d      	str	r5, [r3, #0]
 800c9f0:	e23e      	b.n	800ce70 <_dtoa_r+0xb18>
 800c9f2:	f8cd a020 	str.w	sl, [sp, #32]
 800c9f6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c9fa:	2a39      	cmp	r2, #57	; 0x39
 800c9fc:	f105 33ff 	add.w	r3, r5, #4294967295
 800ca00:	d108      	bne.n	800ca14 <_dtoa_r+0x6bc>
 800ca02:	459b      	cmp	fp, r3
 800ca04:	d10a      	bne.n	800ca1c <_dtoa_r+0x6c4>
 800ca06:	9b08      	ldr	r3, [sp, #32]
 800ca08:	3301      	adds	r3, #1
 800ca0a:	9308      	str	r3, [sp, #32]
 800ca0c:	2330      	movs	r3, #48	; 0x30
 800ca0e:	f88b 3000 	strb.w	r3, [fp]
 800ca12:	465b      	mov	r3, fp
 800ca14:	781a      	ldrb	r2, [r3, #0]
 800ca16:	3201      	adds	r2, #1
 800ca18:	701a      	strb	r2, [r3, #0]
 800ca1a:	e78c      	b.n	800c936 <_dtoa_r+0x5de>
 800ca1c:	461d      	mov	r5, r3
 800ca1e:	e7ea      	b.n	800c9f6 <_dtoa_r+0x69e>
 800ca20:	2200      	movs	r2, #0
 800ca22:	4b9b      	ldr	r3, [pc, #620]	; (800cc90 <_dtoa_r+0x938>)
 800ca24:	f7f3 fe68 	bl	80006f8 <__aeabi_dmul>
 800ca28:	2200      	movs	r2, #0
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	4606      	mov	r6, r0
 800ca2e:	460f      	mov	r7, r1
 800ca30:	f7f4 f8ca 	bl	8000bc8 <__aeabi_dcmpeq>
 800ca34:	2800      	cmp	r0, #0
 800ca36:	d09a      	beq.n	800c96e <_dtoa_r+0x616>
 800ca38:	e7cb      	b.n	800c9d2 <_dtoa_r+0x67a>
 800ca3a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca3c:	2a00      	cmp	r2, #0
 800ca3e:	f000 808b 	beq.w	800cb58 <_dtoa_r+0x800>
 800ca42:	9a06      	ldr	r2, [sp, #24]
 800ca44:	2a01      	cmp	r2, #1
 800ca46:	dc6e      	bgt.n	800cb26 <_dtoa_r+0x7ce>
 800ca48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ca4a:	2a00      	cmp	r2, #0
 800ca4c:	d067      	beq.n	800cb1e <_dtoa_r+0x7c6>
 800ca4e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ca52:	9f07      	ldr	r7, [sp, #28]
 800ca54:	9d05      	ldr	r5, [sp, #20]
 800ca56:	9a05      	ldr	r2, [sp, #20]
 800ca58:	2101      	movs	r1, #1
 800ca5a:	441a      	add	r2, r3
 800ca5c:	4620      	mov	r0, r4
 800ca5e:	9205      	str	r2, [sp, #20]
 800ca60:	4498      	add	r8, r3
 800ca62:	f000 fb26 	bl	800d0b2 <__i2b>
 800ca66:	4606      	mov	r6, r0
 800ca68:	2d00      	cmp	r5, #0
 800ca6a:	dd0c      	ble.n	800ca86 <_dtoa_r+0x72e>
 800ca6c:	f1b8 0f00 	cmp.w	r8, #0
 800ca70:	dd09      	ble.n	800ca86 <_dtoa_r+0x72e>
 800ca72:	4545      	cmp	r5, r8
 800ca74:	9a05      	ldr	r2, [sp, #20]
 800ca76:	462b      	mov	r3, r5
 800ca78:	bfa8      	it	ge
 800ca7a:	4643      	movge	r3, r8
 800ca7c:	1ad2      	subs	r2, r2, r3
 800ca7e:	9205      	str	r2, [sp, #20]
 800ca80:	1aed      	subs	r5, r5, r3
 800ca82:	eba8 0803 	sub.w	r8, r8, r3
 800ca86:	9b07      	ldr	r3, [sp, #28]
 800ca88:	b1eb      	cbz	r3, 800cac6 <_dtoa_r+0x76e>
 800ca8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d067      	beq.n	800cb60 <_dtoa_r+0x808>
 800ca90:	b18f      	cbz	r7, 800cab6 <_dtoa_r+0x75e>
 800ca92:	4631      	mov	r1, r6
 800ca94:	463a      	mov	r2, r7
 800ca96:	4620      	mov	r0, r4
 800ca98:	f000 fbaa 	bl	800d1f0 <__pow5mult>
 800ca9c:	9a04      	ldr	r2, [sp, #16]
 800ca9e:	4601      	mov	r1, r0
 800caa0:	4606      	mov	r6, r0
 800caa2:	4620      	mov	r0, r4
 800caa4:	f000 fb0e 	bl	800d0c4 <__multiply>
 800caa8:	9904      	ldr	r1, [sp, #16]
 800caaa:	9008      	str	r0, [sp, #32]
 800caac:	4620      	mov	r0, r4
 800caae:	f000 fa60 	bl	800cf72 <_Bfree>
 800cab2:	9b08      	ldr	r3, [sp, #32]
 800cab4:	9304      	str	r3, [sp, #16]
 800cab6:	9b07      	ldr	r3, [sp, #28]
 800cab8:	1bda      	subs	r2, r3, r7
 800caba:	d004      	beq.n	800cac6 <_dtoa_r+0x76e>
 800cabc:	9904      	ldr	r1, [sp, #16]
 800cabe:	4620      	mov	r0, r4
 800cac0:	f000 fb96 	bl	800d1f0 <__pow5mult>
 800cac4:	9004      	str	r0, [sp, #16]
 800cac6:	2101      	movs	r1, #1
 800cac8:	4620      	mov	r0, r4
 800caca:	f000 faf2 	bl	800d0b2 <__i2b>
 800cace:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cad0:	4607      	mov	r7, r0
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	f000 81d0 	beq.w	800ce78 <_dtoa_r+0xb20>
 800cad8:	461a      	mov	r2, r3
 800cada:	4601      	mov	r1, r0
 800cadc:	4620      	mov	r0, r4
 800cade:	f000 fb87 	bl	800d1f0 <__pow5mult>
 800cae2:	9b06      	ldr	r3, [sp, #24]
 800cae4:	2b01      	cmp	r3, #1
 800cae6:	4607      	mov	r7, r0
 800cae8:	dc40      	bgt.n	800cb6c <_dtoa_r+0x814>
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d139      	bne.n	800cb64 <_dtoa_r+0x80c>
 800caf0:	9b01      	ldr	r3, [sp, #4]
 800caf2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d136      	bne.n	800cb68 <_dtoa_r+0x810>
 800cafa:	9b01      	ldr	r3, [sp, #4]
 800cafc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb00:	0d1b      	lsrs	r3, r3, #20
 800cb02:	051b      	lsls	r3, r3, #20
 800cb04:	b12b      	cbz	r3, 800cb12 <_dtoa_r+0x7ba>
 800cb06:	9b05      	ldr	r3, [sp, #20]
 800cb08:	3301      	adds	r3, #1
 800cb0a:	9305      	str	r3, [sp, #20]
 800cb0c:	f108 0801 	add.w	r8, r8, #1
 800cb10:	2301      	movs	r3, #1
 800cb12:	9307      	str	r3, [sp, #28]
 800cb14:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d12a      	bne.n	800cb70 <_dtoa_r+0x818>
 800cb1a:	2001      	movs	r0, #1
 800cb1c:	e030      	b.n	800cb80 <_dtoa_r+0x828>
 800cb1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb20:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800cb24:	e795      	b.n	800ca52 <_dtoa_r+0x6fa>
 800cb26:	9b07      	ldr	r3, [sp, #28]
 800cb28:	f109 37ff 	add.w	r7, r9, #4294967295
 800cb2c:	42bb      	cmp	r3, r7
 800cb2e:	bfbf      	itttt	lt
 800cb30:	9b07      	ldrlt	r3, [sp, #28]
 800cb32:	9707      	strlt	r7, [sp, #28]
 800cb34:	1afa      	sublt	r2, r7, r3
 800cb36:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800cb38:	bfbb      	ittet	lt
 800cb3a:	189b      	addlt	r3, r3, r2
 800cb3c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800cb3e:	1bdf      	subge	r7, r3, r7
 800cb40:	2700      	movlt	r7, #0
 800cb42:	f1b9 0f00 	cmp.w	r9, #0
 800cb46:	bfb5      	itete	lt
 800cb48:	9b05      	ldrlt	r3, [sp, #20]
 800cb4a:	9d05      	ldrge	r5, [sp, #20]
 800cb4c:	eba3 0509 	sublt.w	r5, r3, r9
 800cb50:	464b      	movge	r3, r9
 800cb52:	bfb8      	it	lt
 800cb54:	2300      	movlt	r3, #0
 800cb56:	e77e      	b.n	800ca56 <_dtoa_r+0x6fe>
 800cb58:	9f07      	ldr	r7, [sp, #28]
 800cb5a:	9d05      	ldr	r5, [sp, #20]
 800cb5c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800cb5e:	e783      	b.n	800ca68 <_dtoa_r+0x710>
 800cb60:	9a07      	ldr	r2, [sp, #28]
 800cb62:	e7ab      	b.n	800cabc <_dtoa_r+0x764>
 800cb64:	2300      	movs	r3, #0
 800cb66:	e7d4      	b.n	800cb12 <_dtoa_r+0x7ba>
 800cb68:	9b00      	ldr	r3, [sp, #0]
 800cb6a:	e7d2      	b.n	800cb12 <_dtoa_r+0x7ba>
 800cb6c:	2300      	movs	r3, #0
 800cb6e:	9307      	str	r3, [sp, #28]
 800cb70:	693b      	ldr	r3, [r7, #16]
 800cb72:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800cb76:	6918      	ldr	r0, [r3, #16]
 800cb78:	f000 fa4d 	bl	800d016 <__hi0bits>
 800cb7c:	f1c0 0020 	rsb	r0, r0, #32
 800cb80:	4440      	add	r0, r8
 800cb82:	f010 001f 	ands.w	r0, r0, #31
 800cb86:	d047      	beq.n	800cc18 <_dtoa_r+0x8c0>
 800cb88:	f1c0 0320 	rsb	r3, r0, #32
 800cb8c:	2b04      	cmp	r3, #4
 800cb8e:	dd3b      	ble.n	800cc08 <_dtoa_r+0x8b0>
 800cb90:	9b05      	ldr	r3, [sp, #20]
 800cb92:	f1c0 001c 	rsb	r0, r0, #28
 800cb96:	4403      	add	r3, r0
 800cb98:	9305      	str	r3, [sp, #20]
 800cb9a:	4405      	add	r5, r0
 800cb9c:	4480      	add	r8, r0
 800cb9e:	9b05      	ldr	r3, [sp, #20]
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	dd05      	ble.n	800cbb0 <_dtoa_r+0x858>
 800cba4:	461a      	mov	r2, r3
 800cba6:	9904      	ldr	r1, [sp, #16]
 800cba8:	4620      	mov	r0, r4
 800cbaa:	f000 fb6f 	bl	800d28c <__lshift>
 800cbae:	9004      	str	r0, [sp, #16]
 800cbb0:	f1b8 0f00 	cmp.w	r8, #0
 800cbb4:	dd05      	ble.n	800cbc2 <_dtoa_r+0x86a>
 800cbb6:	4639      	mov	r1, r7
 800cbb8:	4642      	mov	r2, r8
 800cbba:	4620      	mov	r0, r4
 800cbbc:	f000 fb66 	bl	800d28c <__lshift>
 800cbc0:	4607      	mov	r7, r0
 800cbc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbc4:	b353      	cbz	r3, 800cc1c <_dtoa_r+0x8c4>
 800cbc6:	4639      	mov	r1, r7
 800cbc8:	9804      	ldr	r0, [sp, #16]
 800cbca:	f000 fbb3 	bl	800d334 <__mcmp>
 800cbce:	2800      	cmp	r0, #0
 800cbd0:	da24      	bge.n	800cc1c <_dtoa_r+0x8c4>
 800cbd2:	2300      	movs	r3, #0
 800cbd4:	220a      	movs	r2, #10
 800cbd6:	9904      	ldr	r1, [sp, #16]
 800cbd8:	4620      	mov	r0, r4
 800cbda:	f000 f9e1 	bl	800cfa0 <__multadd>
 800cbde:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbe0:	9004      	str	r0, [sp, #16]
 800cbe2:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	f000 814d 	beq.w	800ce86 <_dtoa_r+0xb2e>
 800cbec:	2300      	movs	r3, #0
 800cbee:	4631      	mov	r1, r6
 800cbf0:	220a      	movs	r2, #10
 800cbf2:	4620      	mov	r0, r4
 800cbf4:	f000 f9d4 	bl	800cfa0 <__multadd>
 800cbf8:	9b02      	ldr	r3, [sp, #8]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	4606      	mov	r6, r0
 800cbfe:	dc4f      	bgt.n	800cca0 <_dtoa_r+0x948>
 800cc00:	9b06      	ldr	r3, [sp, #24]
 800cc02:	2b02      	cmp	r3, #2
 800cc04:	dd4c      	ble.n	800cca0 <_dtoa_r+0x948>
 800cc06:	e011      	b.n	800cc2c <_dtoa_r+0x8d4>
 800cc08:	d0c9      	beq.n	800cb9e <_dtoa_r+0x846>
 800cc0a:	9a05      	ldr	r2, [sp, #20]
 800cc0c:	331c      	adds	r3, #28
 800cc0e:	441a      	add	r2, r3
 800cc10:	9205      	str	r2, [sp, #20]
 800cc12:	441d      	add	r5, r3
 800cc14:	4498      	add	r8, r3
 800cc16:	e7c2      	b.n	800cb9e <_dtoa_r+0x846>
 800cc18:	4603      	mov	r3, r0
 800cc1a:	e7f6      	b.n	800cc0a <_dtoa_r+0x8b2>
 800cc1c:	f1b9 0f00 	cmp.w	r9, #0
 800cc20:	dc38      	bgt.n	800cc94 <_dtoa_r+0x93c>
 800cc22:	9b06      	ldr	r3, [sp, #24]
 800cc24:	2b02      	cmp	r3, #2
 800cc26:	dd35      	ble.n	800cc94 <_dtoa_r+0x93c>
 800cc28:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc2c:	9b02      	ldr	r3, [sp, #8]
 800cc2e:	b963      	cbnz	r3, 800cc4a <_dtoa_r+0x8f2>
 800cc30:	4639      	mov	r1, r7
 800cc32:	2205      	movs	r2, #5
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 f9b3 	bl	800cfa0 <__multadd>
 800cc3a:	4601      	mov	r1, r0
 800cc3c:	4607      	mov	r7, r0
 800cc3e:	9804      	ldr	r0, [sp, #16]
 800cc40:	f000 fb78 	bl	800d334 <__mcmp>
 800cc44:	2800      	cmp	r0, #0
 800cc46:	f73f adcc 	bgt.w	800c7e2 <_dtoa_r+0x48a>
 800cc4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cc4c:	465d      	mov	r5, fp
 800cc4e:	ea6f 0a03 	mvn.w	sl, r3
 800cc52:	f04f 0900 	mov.w	r9, #0
 800cc56:	4639      	mov	r1, r7
 800cc58:	4620      	mov	r0, r4
 800cc5a:	f000 f98a 	bl	800cf72 <_Bfree>
 800cc5e:	2e00      	cmp	r6, #0
 800cc60:	f43f aeb7 	beq.w	800c9d2 <_dtoa_r+0x67a>
 800cc64:	f1b9 0f00 	cmp.w	r9, #0
 800cc68:	d005      	beq.n	800cc76 <_dtoa_r+0x91e>
 800cc6a:	45b1      	cmp	r9, r6
 800cc6c:	d003      	beq.n	800cc76 <_dtoa_r+0x91e>
 800cc6e:	4649      	mov	r1, r9
 800cc70:	4620      	mov	r0, r4
 800cc72:	f000 f97e 	bl	800cf72 <_Bfree>
 800cc76:	4631      	mov	r1, r6
 800cc78:	4620      	mov	r0, r4
 800cc7a:	f000 f97a 	bl	800cf72 <_Bfree>
 800cc7e:	e6a8      	b.n	800c9d2 <_dtoa_r+0x67a>
 800cc80:	2700      	movs	r7, #0
 800cc82:	463e      	mov	r6, r7
 800cc84:	e7e1      	b.n	800cc4a <_dtoa_r+0x8f2>
 800cc86:	f8dd a020 	ldr.w	sl, [sp, #32]
 800cc8a:	463e      	mov	r6, r7
 800cc8c:	e5a9      	b.n	800c7e2 <_dtoa_r+0x48a>
 800cc8e:	bf00      	nop
 800cc90:	40240000 	.word	0x40240000
 800cc94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cc96:	f8cd 9008 	str.w	r9, [sp, #8]
 800cc9a:	2b00      	cmp	r3, #0
 800cc9c:	f000 80fa 	beq.w	800ce94 <_dtoa_r+0xb3c>
 800cca0:	2d00      	cmp	r5, #0
 800cca2:	dd05      	ble.n	800ccb0 <_dtoa_r+0x958>
 800cca4:	4631      	mov	r1, r6
 800cca6:	462a      	mov	r2, r5
 800cca8:	4620      	mov	r0, r4
 800ccaa:	f000 faef 	bl	800d28c <__lshift>
 800ccae:	4606      	mov	r6, r0
 800ccb0:	9b07      	ldr	r3, [sp, #28]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d04c      	beq.n	800cd50 <_dtoa_r+0x9f8>
 800ccb6:	6871      	ldr	r1, [r6, #4]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f000 f926 	bl	800cf0a <_Balloc>
 800ccbe:	6932      	ldr	r2, [r6, #16]
 800ccc0:	3202      	adds	r2, #2
 800ccc2:	4605      	mov	r5, r0
 800ccc4:	0092      	lsls	r2, r2, #2
 800ccc6:	f106 010c 	add.w	r1, r6, #12
 800ccca:	300c      	adds	r0, #12
 800cccc:	f000 f912 	bl	800cef4 <memcpy>
 800ccd0:	2201      	movs	r2, #1
 800ccd2:	4629      	mov	r1, r5
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	f000 fad9 	bl	800d28c <__lshift>
 800ccda:	9b00      	ldr	r3, [sp, #0]
 800ccdc:	f8cd b014 	str.w	fp, [sp, #20]
 800cce0:	f003 0301 	and.w	r3, r3, #1
 800cce4:	46b1      	mov	r9, r6
 800cce6:	9307      	str	r3, [sp, #28]
 800cce8:	4606      	mov	r6, r0
 800ccea:	4639      	mov	r1, r7
 800ccec:	9804      	ldr	r0, [sp, #16]
 800ccee:	f7ff faa5 	bl	800c23c <quorem>
 800ccf2:	4649      	mov	r1, r9
 800ccf4:	4605      	mov	r5, r0
 800ccf6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800ccfa:	9804      	ldr	r0, [sp, #16]
 800ccfc:	f000 fb1a 	bl	800d334 <__mcmp>
 800cd00:	4632      	mov	r2, r6
 800cd02:	9000      	str	r0, [sp, #0]
 800cd04:	4639      	mov	r1, r7
 800cd06:	4620      	mov	r0, r4
 800cd08:	f000 fb2e 	bl	800d368 <__mdiff>
 800cd0c:	68c3      	ldr	r3, [r0, #12]
 800cd0e:	4602      	mov	r2, r0
 800cd10:	bb03      	cbnz	r3, 800cd54 <_dtoa_r+0x9fc>
 800cd12:	4601      	mov	r1, r0
 800cd14:	9008      	str	r0, [sp, #32]
 800cd16:	9804      	ldr	r0, [sp, #16]
 800cd18:	f000 fb0c 	bl	800d334 <__mcmp>
 800cd1c:	9a08      	ldr	r2, [sp, #32]
 800cd1e:	4603      	mov	r3, r0
 800cd20:	4611      	mov	r1, r2
 800cd22:	4620      	mov	r0, r4
 800cd24:	9308      	str	r3, [sp, #32]
 800cd26:	f000 f924 	bl	800cf72 <_Bfree>
 800cd2a:	9b08      	ldr	r3, [sp, #32]
 800cd2c:	b9a3      	cbnz	r3, 800cd58 <_dtoa_r+0xa00>
 800cd2e:	9a06      	ldr	r2, [sp, #24]
 800cd30:	b992      	cbnz	r2, 800cd58 <_dtoa_r+0xa00>
 800cd32:	9a07      	ldr	r2, [sp, #28]
 800cd34:	b982      	cbnz	r2, 800cd58 <_dtoa_r+0xa00>
 800cd36:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd3a:	d029      	beq.n	800cd90 <_dtoa_r+0xa38>
 800cd3c:	9b00      	ldr	r3, [sp, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	dd01      	ble.n	800cd46 <_dtoa_r+0x9ee>
 800cd42:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800cd46:	9b05      	ldr	r3, [sp, #20]
 800cd48:	1c5d      	adds	r5, r3, #1
 800cd4a:	f883 8000 	strb.w	r8, [r3]
 800cd4e:	e782      	b.n	800cc56 <_dtoa_r+0x8fe>
 800cd50:	4630      	mov	r0, r6
 800cd52:	e7c2      	b.n	800ccda <_dtoa_r+0x982>
 800cd54:	2301      	movs	r3, #1
 800cd56:	e7e3      	b.n	800cd20 <_dtoa_r+0x9c8>
 800cd58:	9a00      	ldr	r2, [sp, #0]
 800cd5a:	2a00      	cmp	r2, #0
 800cd5c:	db04      	blt.n	800cd68 <_dtoa_r+0xa10>
 800cd5e:	d125      	bne.n	800cdac <_dtoa_r+0xa54>
 800cd60:	9a06      	ldr	r2, [sp, #24]
 800cd62:	bb1a      	cbnz	r2, 800cdac <_dtoa_r+0xa54>
 800cd64:	9a07      	ldr	r2, [sp, #28]
 800cd66:	bb0a      	cbnz	r2, 800cdac <_dtoa_r+0xa54>
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	ddec      	ble.n	800cd46 <_dtoa_r+0x9ee>
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	9904      	ldr	r1, [sp, #16]
 800cd70:	4620      	mov	r0, r4
 800cd72:	f000 fa8b 	bl	800d28c <__lshift>
 800cd76:	4639      	mov	r1, r7
 800cd78:	9004      	str	r0, [sp, #16]
 800cd7a:	f000 fadb 	bl	800d334 <__mcmp>
 800cd7e:	2800      	cmp	r0, #0
 800cd80:	dc03      	bgt.n	800cd8a <_dtoa_r+0xa32>
 800cd82:	d1e0      	bne.n	800cd46 <_dtoa_r+0x9ee>
 800cd84:	f018 0f01 	tst.w	r8, #1
 800cd88:	d0dd      	beq.n	800cd46 <_dtoa_r+0x9ee>
 800cd8a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cd8e:	d1d8      	bne.n	800cd42 <_dtoa_r+0x9ea>
 800cd90:	9b05      	ldr	r3, [sp, #20]
 800cd92:	9a05      	ldr	r2, [sp, #20]
 800cd94:	1c5d      	adds	r5, r3, #1
 800cd96:	2339      	movs	r3, #57	; 0x39
 800cd98:	7013      	strb	r3, [r2, #0]
 800cd9a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cd9e:	2b39      	cmp	r3, #57	; 0x39
 800cda0:	f105 32ff 	add.w	r2, r5, #4294967295
 800cda4:	d04f      	beq.n	800ce46 <_dtoa_r+0xaee>
 800cda6:	3301      	adds	r3, #1
 800cda8:	7013      	strb	r3, [r2, #0]
 800cdaa:	e754      	b.n	800cc56 <_dtoa_r+0x8fe>
 800cdac:	9a05      	ldr	r2, [sp, #20]
 800cdae:	2b00      	cmp	r3, #0
 800cdb0:	f102 0501 	add.w	r5, r2, #1
 800cdb4:	dd06      	ble.n	800cdc4 <_dtoa_r+0xa6c>
 800cdb6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800cdba:	d0e9      	beq.n	800cd90 <_dtoa_r+0xa38>
 800cdbc:	f108 0801 	add.w	r8, r8, #1
 800cdc0:	9b05      	ldr	r3, [sp, #20]
 800cdc2:	e7c2      	b.n	800cd4a <_dtoa_r+0x9f2>
 800cdc4:	9a02      	ldr	r2, [sp, #8]
 800cdc6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800cdca:	eba5 030b 	sub.w	r3, r5, fp
 800cdce:	4293      	cmp	r3, r2
 800cdd0:	d021      	beq.n	800ce16 <_dtoa_r+0xabe>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	220a      	movs	r2, #10
 800cdd6:	9904      	ldr	r1, [sp, #16]
 800cdd8:	4620      	mov	r0, r4
 800cdda:	f000 f8e1 	bl	800cfa0 <__multadd>
 800cdde:	45b1      	cmp	r9, r6
 800cde0:	9004      	str	r0, [sp, #16]
 800cde2:	f04f 0300 	mov.w	r3, #0
 800cde6:	f04f 020a 	mov.w	r2, #10
 800cdea:	4649      	mov	r1, r9
 800cdec:	4620      	mov	r0, r4
 800cdee:	d105      	bne.n	800cdfc <_dtoa_r+0xaa4>
 800cdf0:	f000 f8d6 	bl	800cfa0 <__multadd>
 800cdf4:	4681      	mov	r9, r0
 800cdf6:	4606      	mov	r6, r0
 800cdf8:	9505      	str	r5, [sp, #20]
 800cdfa:	e776      	b.n	800ccea <_dtoa_r+0x992>
 800cdfc:	f000 f8d0 	bl	800cfa0 <__multadd>
 800ce00:	4631      	mov	r1, r6
 800ce02:	4681      	mov	r9, r0
 800ce04:	2300      	movs	r3, #0
 800ce06:	220a      	movs	r2, #10
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f000 f8c9 	bl	800cfa0 <__multadd>
 800ce0e:	4606      	mov	r6, r0
 800ce10:	e7f2      	b.n	800cdf8 <_dtoa_r+0xaa0>
 800ce12:	f04f 0900 	mov.w	r9, #0
 800ce16:	2201      	movs	r2, #1
 800ce18:	9904      	ldr	r1, [sp, #16]
 800ce1a:	4620      	mov	r0, r4
 800ce1c:	f000 fa36 	bl	800d28c <__lshift>
 800ce20:	4639      	mov	r1, r7
 800ce22:	9004      	str	r0, [sp, #16]
 800ce24:	f000 fa86 	bl	800d334 <__mcmp>
 800ce28:	2800      	cmp	r0, #0
 800ce2a:	dcb6      	bgt.n	800cd9a <_dtoa_r+0xa42>
 800ce2c:	d102      	bne.n	800ce34 <_dtoa_r+0xadc>
 800ce2e:	f018 0f01 	tst.w	r8, #1
 800ce32:	d1b2      	bne.n	800cd9a <_dtoa_r+0xa42>
 800ce34:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ce38:	2b30      	cmp	r3, #48	; 0x30
 800ce3a:	f105 32ff 	add.w	r2, r5, #4294967295
 800ce3e:	f47f af0a 	bne.w	800cc56 <_dtoa_r+0x8fe>
 800ce42:	4615      	mov	r5, r2
 800ce44:	e7f6      	b.n	800ce34 <_dtoa_r+0xadc>
 800ce46:	4593      	cmp	fp, r2
 800ce48:	d105      	bne.n	800ce56 <_dtoa_r+0xafe>
 800ce4a:	2331      	movs	r3, #49	; 0x31
 800ce4c:	f10a 0a01 	add.w	sl, sl, #1
 800ce50:	f88b 3000 	strb.w	r3, [fp]
 800ce54:	e6ff      	b.n	800cc56 <_dtoa_r+0x8fe>
 800ce56:	4615      	mov	r5, r2
 800ce58:	e79f      	b.n	800cd9a <_dtoa_r+0xa42>
 800ce5a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800cec0 <_dtoa_r+0xb68>
 800ce5e:	e007      	b.n	800ce70 <_dtoa_r+0xb18>
 800ce60:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ce62:	f8df b060 	ldr.w	fp, [pc, #96]	; 800cec4 <_dtoa_r+0xb6c>
 800ce66:	b11b      	cbz	r3, 800ce70 <_dtoa_r+0xb18>
 800ce68:	f10b 0308 	add.w	r3, fp, #8
 800ce6c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ce6e:	6013      	str	r3, [r2, #0]
 800ce70:	4658      	mov	r0, fp
 800ce72:	b017      	add	sp, #92	; 0x5c
 800ce74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce78:	9b06      	ldr	r3, [sp, #24]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	f77f ae35 	ble.w	800caea <_dtoa_r+0x792>
 800ce80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce82:	9307      	str	r3, [sp, #28]
 800ce84:	e649      	b.n	800cb1a <_dtoa_r+0x7c2>
 800ce86:	9b02      	ldr	r3, [sp, #8]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	dc03      	bgt.n	800ce94 <_dtoa_r+0xb3c>
 800ce8c:	9b06      	ldr	r3, [sp, #24]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	f73f aecc 	bgt.w	800cc2c <_dtoa_r+0x8d4>
 800ce94:	465d      	mov	r5, fp
 800ce96:	4639      	mov	r1, r7
 800ce98:	9804      	ldr	r0, [sp, #16]
 800ce9a:	f7ff f9cf 	bl	800c23c <quorem>
 800ce9e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800cea2:	f805 8b01 	strb.w	r8, [r5], #1
 800cea6:	9a02      	ldr	r2, [sp, #8]
 800cea8:	eba5 030b 	sub.w	r3, r5, fp
 800ceac:	429a      	cmp	r2, r3
 800ceae:	ddb0      	ble.n	800ce12 <_dtoa_r+0xaba>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	220a      	movs	r2, #10
 800ceb4:	9904      	ldr	r1, [sp, #16]
 800ceb6:	4620      	mov	r0, r4
 800ceb8:	f000 f872 	bl	800cfa0 <__multadd>
 800cebc:	9004      	str	r0, [sp, #16]
 800cebe:	e7ea      	b.n	800ce96 <_dtoa_r+0xb3e>
 800cec0:	08013e20 	.word	0x08013e20
 800cec4:	08013e44 	.word	0x08013e44

0800cec8 <_localeconv_r>:
 800cec8:	4b04      	ldr	r3, [pc, #16]	; (800cedc <_localeconv_r+0x14>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6a18      	ldr	r0, [r3, #32]
 800cece:	4b04      	ldr	r3, [pc, #16]	; (800cee0 <_localeconv_r+0x18>)
 800ced0:	2800      	cmp	r0, #0
 800ced2:	bf08      	it	eq
 800ced4:	4618      	moveq	r0, r3
 800ced6:	30f0      	adds	r0, #240	; 0xf0
 800ced8:	4770      	bx	lr
 800ceda:	bf00      	nop
 800cedc:	20000034 	.word	0x20000034
 800cee0:	20000098 	.word	0x20000098

0800cee4 <malloc>:
 800cee4:	4b02      	ldr	r3, [pc, #8]	; (800cef0 <malloc+0xc>)
 800cee6:	4601      	mov	r1, r0
 800cee8:	6818      	ldr	r0, [r3, #0]
 800ceea:	f000 bb45 	b.w	800d578 <_malloc_r>
 800ceee:	bf00      	nop
 800cef0:	20000034 	.word	0x20000034

0800cef4 <memcpy>:
 800cef4:	b510      	push	{r4, lr}
 800cef6:	1e43      	subs	r3, r0, #1
 800cef8:	440a      	add	r2, r1
 800cefa:	4291      	cmp	r1, r2
 800cefc:	d100      	bne.n	800cf00 <memcpy+0xc>
 800cefe:	bd10      	pop	{r4, pc}
 800cf00:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf04:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf08:	e7f7      	b.n	800cefa <memcpy+0x6>

0800cf0a <_Balloc>:
 800cf0a:	b570      	push	{r4, r5, r6, lr}
 800cf0c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cf0e:	4604      	mov	r4, r0
 800cf10:	460e      	mov	r6, r1
 800cf12:	b93d      	cbnz	r5, 800cf24 <_Balloc+0x1a>
 800cf14:	2010      	movs	r0, #16
 800cf16:	f7ff ffe5 	bl	800cee4 <malloc>
 800cf1a:	6260      	str	r0, [r4, #36]	; 0x24
 800cf1c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cf20:	6005      	str	r5, [r0, #0]
 800cf22:	60c5      	str	r5, [r0, #12]
 800cf24:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800cf26:	68eb      	ldr	r3, [r5, #12]
 800cf28:	b183      	cbz	r3, 800cf4c <_Balloc+0x42>
 800cf2a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf2c:	68db      	ldr	r3, [r3, #12]
 800cf2e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800cf32:	b9b8      	cbnz	r0, 800cf64 <_Balloc+0x5a>
 800cf34:	2101      	movs	r1, #1
 800cf36:	fa01 f506 	lsl.w	r5, r1, r6
 800cf3a:	1d6a      	adds	r2, r5, #5
 800cf3c:	0092      	lsls	r2, r2, #2
 800cf3e:	4620      	mov	r0, r4
 800cf40:	f000 fabe 	bl	800d4c0 <_calloc_r>
 800cf44:	b160      	cbz	r0, 800cf60 <_Balloc+0x56>
 800cf46:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800cf4a:	e00e      	b.n	800cf6a <_Balloc+0x60>
 800cf4c:	2221      	movs	r2, #33	; 0x21
 800cf4e:	2104      	movs	r1, #4
 800cf50:	4620      	mov	r0, r4
 800cf52:	f000 fab5 	bl	800d4c0 <_calloc_r>
 800cf56:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf58:	60e8      	str	r0, [r5, #12]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d1e4      	bne.n	800cf2a <_Balloc+0x20>
 800cf60:	2000      	movs	r0, #0
 800cf62:	bd70      	pop	{r4, r5, r6, pc}
 800cf64:	6802      	ldr	r2, [r0, #0]
 800cf66:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800cf6a:	2300      	movs	r3, #0
 800cf6c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf70:	e7f7      	b.n	800cf62 <_Balloc+0x58>

0800cf72 <_Bfree>:
 800cf72:	b570      	push	{r4, r5, r6, lr}
 800cf74:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800cf76:	4606      	mov	r6, r0
 800cf78:	460d      	mov	r5, r1
 800cf7a:	b93c      	cbnz	r4, 800cf8c <_Bfree+0x1a>
 800cf7c:	2010      	movs	r0, #16
 800cf7e:	f7ff ffb1 	bl	800cee4 <malloc>
 800cf82:	6270      	str	r0, [r6, #36]	; 0x24
 800cf84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf88:	6004      	str	r4, [r0, #0]
 800cf8a:	60c4      	str	r4, [r0, #12]
 800cf8c:	b13d      	cbz	r5, 800cf9e <_Bfree+0x2c>
 800cf8e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800cf90:	686a      	ldr	r2, [r5, #4]
 800cf92:	68db      	ldr	r3, [r3, #12]
 800cf94:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf98:	6029      	str	r1, [r5, #0]
 800cf9a:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}

0800cfa0 <__multadd>:
 800cfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfa4:	690d      	ldr	r5, [r1, #16]
 800cfa6:	461f      	mov	r7, r3
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	460c      	mov	r4, r1
 800cfac:	f101 0c14 	add.w	ip, r1, #20
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f8dc 0000 	ldr.w	r0, [ip]
 800cfb6:	b281      	uxth	r1, r0
 800cfb8:	fb02 7101 	mla	r1, r2, r1, r7
 800cfbc:	0c0f      	lsrs	r7, r1, #16
 800cfbe:	0c00      	lsrs	r0, r0, #16
 800cfc0:	fb02 7000 	mla	r0, r2, r0, r7
 800cfc4:	b289      	uxth	r1, r1
 800cfc6:	3301      	adds	r3, #1
 800cfc8:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800cfcc:	429d      	cmp	r5, r3
 800cfce:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800cfd2:	f84c 1b04 	str.w	r1, [ip], #4
 800cfd6:	dcec      	bgt.n	800cfb2 <__multadd+0x12>
 800cfd8:	b1d7      	cbz	r7, 800d010 <__multadd+0x70>
 800cfda:	68a3      	ldr	r3, [r4, #8]
 800cfdc:	42ab      	cmp	r3, r5
 800cfde:	dc12      	bgt.n	800d006 <__multadd+0x66>
 800cfe0:	6861      	ldr	r1, [r4, #4]
 800cfe2:	4630      	mov	r0, r6
 800cfe4:	3101      	adds	r1, #1
 800cfe6:	f7ff ff90 	bl	800cf0a <_Balloc>
 800cfea:	6922      	ldr	r2, [r4, #16]
 800cfec:	3202      	adds	r2, #2
 800cfee:	f104 010c 	add.w	r1, r4, #12
 800cff2:	4680      	mov	r8, r0
 800cff4:	0092      	lsls	r2, r2, #2
 800cff6:	300c      	adds	r0, #12
 800cff8:	f7ff ff7c 	bl	800cef4 <memcpy>
 800cffc:	4621      	mov	r1, r4
 800cffe:	4630      	mov	r0, r6
 800d000:	f7ff ffb7 	bl	800cf72 <_Bfree>
 800d004:	4644      	mov	r4, r8
 800d006:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d00a:	3501      	adds	r5, #1
 800d00c:	615f      	str	r7, [r3, #20]
 800d00e:	6125      	str	r5, [r4, #16]
 800d010:	4620      	mov	r0, r4
 800d012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d016 <__hi0bits>:
 800d016:	0c02      	lsrs	r2, r0, #16
 800d018:	0412      	lsls	r2, r2, #16
 800d01a:	4603      	mov	r3, r0
 800d01c:	b9b2      	cbnz	r2, 800d04c <__hi0bits+0x36>
 800d01e:	0403      	lsls	r3, r0, #16
 800d020:	2010      	movs	r0, #16
 800d022:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800d026:	bf04      	itt	eq
 800d028:	021b      	lsleq	r3, r3, #8
 800d02a:	3008      	addeq	r0, #8
 800d02c:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800d030:	bf04      	itt	eq
 800d032:	011b      	lsleq	r3, r3, #4
 800d034:	3004      	addeq	r0, #4
 800d036:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800d03a:	bf04      	itt	eq
 800d03c:	009b      	lsleq	r3, r3, #2
 800d03e:	3002      	addeq	r0, #2
 800d040:	2b00      	cmp	r3, #0
 800d042:	db06      	blt.n	800d052 <__hi0bits+0x3c>
 800d044:	005b      	lsls	r3, r3, #1
 800d046:	d503      	bpl.n	800d050 <__hi0bits+0x3a>
 800d048:	3001      	adds	r0, #1
 800d04a:	4770      	bx	lr
 800d04c:	2000      	movs	r0, #0
 800d04e:	e7e8      	b.n	800d022 <__hi0bits+0xc>
 800d050:	2020      	movs	r0, #32
 800d052:	4770      	bx	lr

0800d054 <__lo0bits>:
 800d054:	6803      	ldr	r3, [r0, #0]
 800d056:	f013 0207 	ands.w	r2, r3, #7
 800d05a:	4601      	mov	r1, r0
 800d05c:	d00b      	beq.n	800d076 <__lo0bits+0x22>
 800d05e:	07da      	lsls	r2, r3, #31
 800d060:	d423      	bmi.n	800d0aa <__lo0bits+0x56>
 800d062:	0798      	lsls	r0, r3, #30
 800d064:	bf49      	itett	mi
 800d066:	085b      	lsrmi	r3, r3, #1
 800d068:	089b      	lsrpl	r3, r3, #2
 800d06a:	2001      	movmi	r0, #1
 800d06c:	600b      	strmi	r3, [r1, #0]
 800d06e:	bf5c      	itt	pl
 800d070:	600b      	strpl	r3, [r1, #0]
 800d072:	2002      	movpl	r0, #2
 800d074:	4770      	bx	lr
 800d076:	b298      	uxth	r0, r3
 800d078:	b9a8      	cbnz	r0, 800d0a6 <__lo0bits+0x52>
 800d07a:	0c1b      	lsrs	r3, r3, #16
 800d07c:	2010      	movs	r0, #16
 800d07e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800d082:	bf04      	itt	eq
 800d084:	0a1b      	lsreq	r3, r3, #8
 800d086:	3008      	addeq	r0, #8
 800d088:	071a      	lsls	r2, r3, #28
 800d08a:	bf04      	itt	eq
 800d08c:	091b      	lsreq	r3, r3, #4
 800d08e:	3004      	addeq	r0, #4
 800d090:	079a      	lsls	r2, r3, #30
 800d092:	bf04      	itt	eq
 800d094:	089b      	lsreq	r3, r3, #2
 800d096:	3002      	addeq	r0, #2
 800d098:	07da      	lsls	r2, r3, #31
 800d09a:	d402      	bmi.n	800d0a2 <__lo0bits+0x4e>
 800d09c:	085b      	lsrs	r3, r3, #1
 800d09e:	d006      	beq.n	800d0ae <__lo0bits+0x5a>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	600b      	str	r3, [r1, #0]
 800d0a4:	4770      	bx	lr
 800d0a6:	4610      	mov	r0, r2
 800d0a8:	e7e9      	b.n	800d07e <__lo0bits+0x2a>
 800d0aa:	2000      	movs	r0, #0
 800d0ac:	4770      	bx	lr
 800d0ae:	2020      	movs	r0, #32
 800d0b0:	4770      	bx	lr

0800d0b2 <__i2b>:
 800d0b2:	b510      	push	{r4, lr}
 800d0b4:	460c      	mov	r4, r1
 800d0b6:	2101      	movs	r1, #1
 800d0b8:	f7ff ff27 	bl	800cf0a <_Balloc>
 800d0bc:	2201      	movs	r2, #1
 800d0be:	6144      	str	r4, [r0, #20]
 800d0c0:	6102      	str	r2, [r0, #16]
 800d0c2:	bd10      	pop	{r4, pc}

0800d0c4 <__multiply>:
 800d0c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c8:	4614      	mov	r4, r2
 800d0ca:	690a      	ldr	r2, [r1, #16]
 800d0cc:	6923      	ldr	r3, [r4, #16]
 800d0ce:	429a      	cmp	r2, r3
 800d0d0:	bfb8      	it	lt
 800d0d2:	460b      	movlt	r3, r1
 800d0d4:	4688      	mov	r8, r1
 800d0d6:	bfbc      	itt	lt
 800d0d8:	46a0      	movlt	r8, r4
 800d0da:	461c      	movlt	r4, r3
 800d0dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d0e0:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800d0e4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d0e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d0ec:	eb07 0609 	add.w	r6, r7, r9
 800d0f0:	42b3      	cmp	r3, r6
 800d0f2:	bfb8      	it	lt
 800d0f4:	3101      	addlt	r1, #1
 800d0f6:	f7ff ff08 	bl	800cf0a <_Balloc>
 800d0fa:	f100 0514 	add.w	r5, r0, #20
 800d0fe:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800d102:	462b      	mov	r3, r5
 800d104:	2200      	movs	r2, #0
 800d106:	4573      	cmp	r3, lr
 800d108:	d316      	bcc.n	800d138 <__multiply+0x74>
 800d10a:	f104 0214 	add.w	r2, r4, #20
 800d10e:	f108 0114 	add.w	r1, r8, #20
 800d112:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800d116:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800d11a:	9300      	str	r3, [sp, #0]
 800d11c:	9b00      	ldr	r3, [sp, #0]
 800d11e:	9201      	str	r2, [sp, #4]
 800d120:	4293      	cmp	r3, r2
 800d122:	d80c      	bhi.n	800d13e <__multiply+0x7a>
 800d124:	2e00      	cmp	r6, #0
 800d126:	dd03      	ble.n	800d130 <__multiply+0x6c>
 800d128:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	d05d      	beq.n	800d1ec <__multiply+0x128>
 800d130:	6106      	str	r6, [r0, #16]
 800d132:	b003      	add	sp, #12
 800d134:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d138:	f843 2b04 	str.w	r2, [r3], #4
 800d13c:	e7e3      	b.n	800d106 <__multiply+0x42>
 800d13e:	f8b2 b000 	ldrh.w	fp, [r2]
 800d142:	f1bb 0f00 	cmp.w	fp, #0
 800d146:	d023      	beq.n	800d190 <__multiply+0xcc>
 800d148:	4689      	mov	r9, r1
 800d14a:	46ac      	mov	ip, r5
 800d14c:	f04f 0800 	mov.w	r8, #0
 800d150:	f859 4b04 	ldr.w	r4, [r9], #4
 800d154:	f8dc a000 	ldr.w	sl, [ip]
 800d158:	b2a3      	uxth	r3, r4
 800d15a:	fa1f fa8a 	uxth.w	sl, sl
 800d15e:	fb0b a303 	mla	r3, fp, r3, sl
 800d162:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800d166:	f8dc 4000 	ldr.w	r4, [ip]
 800d16a:	4443      	add	r3, r8
 800d16c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d170:	fb0b 840a 	mla	r4, fp, sl, r8
 800d174:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800d178:	46e2      	mov	sl, ip
 800d17a:	b29b      	uxth	r3, r3
 800d17c:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d180:	454f      	cmp	r7, r9
 800d182:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800d186:	f84a 3b04 	str.w	r3, [sl], #4
 800d18a:	d82b      	bhi.n	800d1e4 <__multiply+0x120>
 800d18c:	f8cc 8004 	str.w	r8, [ip, #4]
 800d190:	9b01      	ldr	r3, [sp, #4]
 800d192:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800d196:	3204      	adds	r2, #4
 800d198:	f1ba 0f00 	cmp.w	sl, #0
 800d19c:	d020      	beq.n	800d1e0 <__multiply+0x11c>
 800d19e:	682b      	ldr	r3, [r5, #0]
 800d1a0:	4689      	mov	r9, r1
 800d1a2:	46a8      	mov	r8, r5
 800d1a4:	f04f 0b00 	mov.w	fp, #0
 800d1a8:	f8b9 c000 	ldrh.w	ip, [r9]
 800d1ac:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800d1b0:	fb0a 440c 	mla	r4, sl, ip, r4
 800d1b4:	445c      	add	r4, fp
 800d1b6:	46c4      	mov	ip, r8
 800d1b8:	b29b      	uxth	r3, r3
 800d1ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800d1be:	f84c 3b04 	str.w	r3, [ip], #4
 800d1c2:	f859 3b04 	ldr.w	r3, [r9], #4
 800d1c6:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800d1ca:	0c1b      	lsrs	r3, r3, #16
 800d1cc:	fb0a b303 	mla	r3, sl, r3, fp
 800d1d0:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800d1d4:	454f      	cmp	r7, r9
 800d1d6:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800d1da:	d805      	bhi.n	800d1e8 <__multiply+0x124>
 800d1dc:	f8c8 3004 	str.w	r3, [r8, #4]
 800d1e0:	3504      	adds	r5, #4
 800d1e2:	e79b      	b.n	800d11c <__multiply+0x58>
 800d1e4:	46d4      	mov	ip, sl
 800d1e6:	e7b3      	b.n	800d150 <__multiply+0x8c>
 800d1e8:	46e0      	mov	r8, ip
 800d1ea:	e7dd      	b.n	800d1a8 <__multiply+0xe4>
 800d1ec:	3e01      	subs	r6, #1
 800d1ee:	e799      	b.n	800d124 <__multiply+0x60>

0800d1f0 <__pow5mult>:
 800d1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d1f4:	4615      	mov	r5, r2
 800d1f6:	f012 0203 	ands.w	r2, r2, #3
 800d1fa:	4606      	mov	r6, r0
 800d1fc:	460f      	mov	r7, r1
 800d1fe:	d007      	beq.n	800d210 <__pow5mult+0x20>
 800d200:	3a01      	subs	r2, #1
 800d202:	4c21      	ldr	r4, [pc, #132]	; (800d288 <__pow5mult+0x98>)
 800d204:	2300      	movs	r3, #0
 800d206:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d20a:	f7ff fec9 	bl	800cfa0 <__multadd>
 800d20e:	4607      	mov	r7, r0
 800d210:	10ad      	asrs	r5, r5, #2
 800d212:	d035      	beq.n	800d280 <__pow5mult+0x90>
 800d214:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d216:	b93c      	cbnz	r4, 800d228 <__pow5mult+0x38>
 800d218:	2010      	movs	r0, #16
 800d21a:	f7ff fe63 	bl	800cee4 <malloc>
 800d21e:	6270      	str	r0, [r6, #36]	; 0x24
 800d220:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d224:	6004      	str	r4, [r0, #0]
 800d226:	60c4      	str	r4, [r0, #12]
 800d228:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d22c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d230:	b94c      	cbnz	r4, 800d246 <__pow5mult+0x56>
 800d232:	f240 2171 	movw	r1, #625	; 0x271
 800d236:	4630      	mov	r0, r6
 800d238:	f7ff ff3b 	bl	800d0b2 <__i2b>
 800d23c:	2300      	movs	r3, #0
 800d23e:	f8c8 0008 	str.w	r0, [r8, #8]
 800d242:	4604      	mov	r4, r0
 800d244:	6003      	str	r3, [r0, #0]
 800d246:	f04f 0800 	mov.w	r8, #0
 800d24a:	07eb      	lsls	r3, r5, #31
 800d24c:	d50a      	bpl.n	800d264 <__pow5mult+0x74>
 800d24e:	4639      	mov	r1, r7
 800d250:	4622      	mov	r2, r4
 800d252:	4630      	mov	r0, r6
 800d254:	f7ff ff36 	bl	800d0c4 <__multiply>
 800d258:	4639      	mov	r1, r7
 800d25a:	4681      	mov	r9, r0
 800d25c:	4630      	mov	r0, r6
 800d25e:	f7ff fe88 	bl	800cf72 <_Bfree>
 800d262:	464f      	mov	r7, r9
 800d264:	106d      	asrs	r5, r5, #1
 800d266:	d00b      	beq.n	800d280 <__pow5mult+0x90>
 800d268:	6820      	ldr	r0, [r4, #0]
 800d26a:	b938      	cbnz	r0, 800d27c <__pow5mult+0x8c>
 800d26c:	4622      	mov	r2, r4
 800d26e:	4621      	mov	r1, r4
 800d270:	4630      	mov	r0, r6
 800d272:	f7ff ff27 	bl	800d0c4 <__multiply>
 800d276:	6020      	str	r0, [r4, #0]
 800d278:	f8c0 8000 	str.w	r8, [r0]
 800d27c:	4604      	mov	r4, r0
 800d27e:	e7e4      	b.n	800d24a <__pow5mult+0x5a>
 800d280:	4638      	mov	r0, r7
 800d282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d286:	bf00      	nop
 800d288:	08013fa8 	.word	0x08013fa8

0800d28c <__lshift>:
 800d28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d290:	460c      	mov	r4, r1
 800d292:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d296:	6923      	ldr	r3, [r4, #16]
 800d298:	6849      	ldr	r1, [r1, #4]
 800d29a:	eb0a 0903 	add.w	r9, sl, r3
 800d29e:	68a3      	ldr	r3, [r4, #8]
 800d2a0:	4607      	mov	r7, r0
 800d2a2:	4616      	mov	r6, r2
 800d2a4:	f109 0501 	add.w	r5, r9, #1
 800d2a8:	42ab      	cmp	r3, r5
 800d2aa:	db32      	blt.n	800d312 <__lshift+0x86>
 800d2ac:	4638      	mov	r0, r7
 800d2ae:	f7ff fe2c 	bl	800cf0a <_Balloc>
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	4680      	mov	r8, r0
 800d2b6:	f100 0114 	add.w	r1, r0, #20
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	4553      	cmp	r3, sl
 800d2be:	db2b      	blt.n	800d318 <__lshift+0x8c>
 800d2c0:	6920      	ldr	r0, [r4, #16]
 800d2c2:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d2c6:	f104 0314 	add.w	r3, r4, #20
 800d2ca:	f016 021f 	ands.w	r2, r6, #31
 800d2ce:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d2d2:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d2d6:	d025      	beq.n	800d324 <__lshift+0x98>
 800d2d8:	f1c2 0e20 	rsb	lr, r2, #32
 800d2dc:	2000      	movs	r0, #0
 800d2de:	681e      	ldr	r6, [r3, #0]
 800d2e0:	468a      	mov	sl, r1
 800d2e2:	4096      	lsls	r6, r2
 800d2e4:	4330      	orrs	r0, r6
 800d2e6:	f84a 0b04 	str.w	r0, [sl], #4
 800d2ea:	f853 0b04 	ldr.w	r0, [r3], #4
 800d2ee:	459c      	cmp	ip, r3
 800d2f0:	fa20 f00e 	lsr.w	r0, r0, lr
 800d2f4:	d814      	bhi.n	800d320 <__lshift+0x94>
 800d2f6:	6048      	str	r0, [r1, #4]
 800d2f8:	b108      	cbz	r0, 800d2fe <__lshift+0x72>
 800d2fa:	f109 0502 	add.w	r5, r9, #2
 800d2fe:	3d01      	subs	r5, #1
 800d300:	4638      	mov	r0, r7
 800d302:	f8c8 5010 	str.w	r5, [r8, #16]
 800d306:	4621      	mov	r1, r4
 800d308:	f7ff fe33 	bl	800cf72 <_Bfree>
 800d30c:	4640      	mov	r0, r8
 800d30e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d312:	3101      	adds	r1, #1
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	e7c7      	b.n	800d2a8 <__lshift+0x1c>
 800d318:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d31c:	3301      	adds	r3, #1
 800d31e:	e7cd      	b.n	800d2bc <__lshift+0x30>
 800d320:	4651      	mov	r1, sl
 800d322:	e7dc      	b.n	800d2de <__lshift+0x52>
 800d324:	3904      	subs	r1, #4
 800d326:	f853 2b04 	ldr.w	r2, [r3], #4
 800d32a:	f841 2f04 	str.w	r2, [r1, #4]!
 800d32e:	459c      	cmp	ip, r3
 800d330:	d8f9      	bhi.n	800d326 <__lshift+0x9a>
 800d332:	e7e4      	b.n	800d2fe <__lshift+0x72>

0800d334 <__mcmp>:
 800d334:	6903      	ldr	r3, [r0, #16]
 800d336:	690a      	ldr	r2, [r1, #16]
 800d338:	1a9b      	subs	r3, r3, r2
 800d33a:	b530      	push	{r4, r5, lr}
 800d33c:	d10c      	bne.n	800d358 <__mcmp+0x24>
 800d33e:	0092      	lsls	r2, r2, #2
 800d340:	3014      	adds	r0, #20
 800d342:	3114      	adds	r1, #20
 800d344:	1884      	adds	r4, r0, r2
 800d346:	4411      	add	r1, r2
 800d348:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d34c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d350:	4295      	cmp	r5, r2
 800d352:	d003      	beq.n	800d35c <__mcmp+0x28>
 800d354:	d305      	bcc.n	800d362 <__mcmp+0x2e>
 800d356:	2301      	movs	r3, #1
 800d358:	4618      	mov	r0, r3
 800d35a:	bd30      	pop	{r4, r5, pc}
 800d35c:	42a0      	cmp	r0, r4
 800d35e:	d3f3      	bcc.n	800d348 <__mcmp+0x14>
 800d360:	e7fa      	b.n	800d358 <__mcmp+0x24>
 800d362:	f04f 33ff 	mov.w	r3, #4294967295
 800d366:	e7f7      	b.n	800d358 <__mcmp+0x24>

0800d368 <__mdiff>:
 800d368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d36c:	460d      	mov	r5, r1
 800d36e:	4607      	mov	r7, r0
 800d370:	4611      	mov	r1, r2
 800d372:	4628      	mov	r0, r5
 800d374:	4614      	mov	r4, r2
 800d376:	f7ff ffdd 	bl	800d334 <__mcmp>
 800d37a:	1e06      	subs	r6, r0, #0
 800d37c:	d108      	bne.n	800d390 <__mdiff+0x28>
 800d37e:	4631      	mov	r1, r6
 800d380:	4638      	mov	r0, r7
 800d382:	f7ff fdc2 	bl	800cf0a <_Balloc>
 800d386:	2301      	movs	r3, #1
 800d388:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d38c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d390:	bfa4      	itt	ge
 800d392:	4623      	movge	r3, r4
 800d394:	462c      	movge	r4, r5
 800d396:	4638      	mov	r0, r7
 800d398:	6861      	ldr	r1, [r4, #4]
 800d39a:	bfa6      	itte	ge
 800d39c:	461d      	movge	r5, r3
 800d39e:	2600      	movge	r6, #0
 800d3a0:	2601      	movlt	r6, #1
 800d3a2:	f7ff fdb2 	bl	800cf0a <_Balloc>
 800d3a6:	692b      	ldr	r3, [r5, #16]
 800d3a8:	60c6      	str	r6, [r0, #12]
 800d3aa:	6926      	ldr	r6, [r4, #16]
 800d3ac:	f105 0914 	add.w	r9, r5, #20
 800d3b0:	f104 0214 	add.w	r2, r4, #20
 800d3b4:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800d3b8:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800d3bc:	f100 0514 	add.w	r5, r0, #20
 800d3c0:	f04f 0e00 	mov.w	lr, #0
 800d3c4:	f852 ab04 	ldr.w	sl, [r2], #4
 800d3c8:	f859 4b04 	ldr.w	r4, [r9], #4
 800d3cc:	fa1e f18a 	uxtah	r1, lr, sl
 800d3d0:	b2a3      	uxth	r3, r4
 800d3d2:	1ac9      	subs	r1, r1, r3
 800d3d4:	0c23      	lsrs	r3, r4, #16
 800d3d6:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800d3da:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d3de:	b289      	uxth	r1, r1
 800d3e0:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800d3e4:	45c8      	cmp	r8, r9
 800d3e6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d3ea:	4694      	mov	ip, r2
 800d3ec:	f845 3b04 	str.w	r3, [r5], #4
 800d3f0:	d8e8      	bhi.n	800d3c4 <__mdiff+0x5c>
 800d3f2:	45bc      	cmp	ip, r7
 800d3f4:	d304      	bcc.n	800d400 <__mdiff+0x98>
 800d3f6:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800d3fa:	b183      	cbz	r3, 800d41e <__mdiff+0xb6>
 800d3fc:	6106      	str	r6, [r0, #16]
 800d3fe:	e7c5      	b.n	800d38c <__mdiff+0x24>
 800d400:	f85c 1b04 	ldr.w	r1, [ip], #4
 800d404:	fa1e f381 	uxtah	r3, lr, r1
 800d408:	141a      	asrs	r2, r3, #16
 800d40a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d40e:	b29b      	uxth	r3, r3
 800d410:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d414:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800d418:	f845 3b04 	str.w	r3, [r5], #4
 800d41c:	e7e9      	b.n	800d3f2 <__mdiff+0x8a>
 800d41e:	3e01      	subs	r6, #1
 800d420:	e7e9      	b.n	800d3f6 <__mdiff+0x8e>

0800d422 <__d2b>:
 800d422:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d426:	460e      	mov	r6, r1
 800d428:	2101      	movs	r1, #1
 800d42a:	ec59 8b10 	vmov	r8, r9, d0
 800d42e:	4615      	mov	r5, r2
 800d430:	f7ff fd6b 	bl	800cf0a <_Balloc>
 800d434:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800d438:	4607      	mov	r7, r0
 800d43a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d43e:	bb34      	cbnz	r4, 800d48e <__d2b+0x6c>
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	f1b8 0300 	subs.w	r3, r8, #0
 800d446:	d027      	beq.n	800d498 <__d2b+0x76>
 800d448:	a802      	add	r0, sp, #8
 800d44a:	f840 3d08 	str.w	r3, [r0, #-8]!
 800d44e:	f7ff fe01 	bl	800d054 <__lo0bits>
 800d452:	9900      	ldr	r1, [sp, #0]
 800d454:	b1f0      	cbz	r0, 800d494 <__d2b+0x72>
 800d456:	9a01      	ldr	r2, [sp, #4]
 800d458:	f1c0 0320 	rsb	r3, r0, #32
 800d45c:	fa02 f303 	lsl.w	r3, r2, r3
 800d460:	430b      	orrs	r3, r1
 800d462:	40c2      	lsrs	r2, r0
 800d464:	617b      	str	r3, [r7, #20]
 800d466:	9201      	str	r2, [sp, #4]
 800d468:	9b01      	ldr	r3, [sp, #4]
 800d46a:	61bb      	str	r3, [r7, #24]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	bf14      	ite	ne
 800d470:	2102      	movne	r1, #2
 800d472:	2101      	moveq	r1, #1
 800d474:	6139      	str	r1, [r7, #16]
 800d476:	b1c4      	cbz	r4, 800d4aa <__d2b+0x88>
 800d478:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800d47c:	4404      	add	r4, r0
 800d47e:	6034      	str	r4, [r6, #0]
 800d480:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d484:	6028      	str	r0, [r5, #0]
 800d486:	4638      	mov	r0, r7
 800d488:	b003      	add	sp, #12
 800d48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d48e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d492:	e7d5      	b.n	800d440 <__d2b+0x1e>
 800d494:	6179      	str	r1, [r7, #20]
 800d496:	e7e7      	b.n	800d468 <__d2b+0x46>
 800d498:	a801      	add	r0, sp, #4
 800d49a:	f7ff fddb 	bl	800d054 <__lo0bits>
 800d49e:	9b01      	ldr	r3, [sp, #4]
 800d4a0:	617b      	str	r3, [r7, #20]
 800d4a2:	2101      	movs	r1, #1
 800d4a4:	6139      	str	r1, [r7, #16]
 800d4a6:	3020      	adds	r0, #32
 800d4a8:	e7e5      	b.n	800d476 <__d2b+0x54>
 800d4aa:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800d4ae:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d4b2:	6030      	str	r0, [r6, #0]
 800d4b4:	6918      	ldr	r0, [r3, #16]
 800d4b6:	f7ff fdae 	bl	800d016 <__hi0bits>
 800d4ba:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800d4be:	e7e1      	b.n	800d484 <__d2b+0x62>

0800d4c0 <_calloc_r>:
 800d4c0:	b538      	push	{r3, r4, r5, lr}
 800d4c2:	fb02 f401 	mul.w	r4, r2, r1
 800d4c6:	4621      	mov	r1, r4
 800d4c8:	f000 f856 	bl	800d578 <_malloc_r>
 800d4cc:	4605      	mov	r5, r0
 800d4ce:	b118      	cbz	r0, 800d4d8 <_calloc_r+0x18>
 800d4d0:	4622      	mov	r2, r4
 800d4d2:	2100      	movs	r1, #0
 800d4d4:	f7fe fa2e 	bl	800b934 <memset>
 800d4d8:	4628      	mov	r0, r5
 800d4da:	bd38      	pop	{r3, r4, r5, pc}

0800d4dc <_free_r>:
 800d4dc:	b538      	push	{r3, r4, r5, lr}
 800d4de:	4605      	mov	r5, r0
 800d4e0:	2900      	cmp	r1, #0
 800d4e2:	d045      	beq.n	800d570 <_free_r+0x94>
 800d4e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4e8:	1f0c      	subs	r4, r1, #4
 800d4ea:	2b00      	cmp	r3, #0
 800d4ec:	bfb8      	it	lt
 800d4ee:	18e4      	addlt	r4, r4, r3
 800d4f0:	f000 fa29 	bl	800d946 <__malloc_lock>
 800d4f4:	4a1f      	ldr	r2, [pc, #124]	; (800d574 <_free_r+0x98>)
 800d4f6:	6813      	ldr	r3, [r2, #0]
 800d4f8:	4610      	mov	r0, r2
 800d4fa:	b933      	cbnz	r3, 800d50a <_free_r+0x2e>
 800d4fc:	6063      	str	r3, [r4, #4]
 800d4fe:	6014      	str	r4, [r2, #0]
 800d500:	4628      	mov	r0, r5
 800d502:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d506:	f000 ba1f 	b.w	800d948 <__malloc_unlock>
 800d50a:	42a3      	cmp	r3, r4
 800d50c:	d90c      	bls.n	800d528 <_free_r+0x4c>
 800d50e:	6821      	ldr	r1, [r4, #0]
 800d510:	1862      	adds	r2, r4, r1
 800d512:	4293      	cmp	r3, r2
 800d514:	bf04      	itt	eq
 800d516:	681a      	ldreq	r2, [r3, #0]
 800d518:	685b      	ldreq	r3, [r3, #4]
 800d51a:	6063      	str	r3, [r4, #4]
 800d51c:	bf04      	itt	eq
 800d51e:	1852      	addeq	r2, r2, r1
 800d520:	6022      	streq	r2, [r4, #0]
 800d522:	6004      	str	r4, [r0, #0]
 800d524:	e7ec      	b.n	800d500 <_free_r+0x24>
 800d526:	4613      	mov	r3, r2
 800d528:	685a      	ldr	r2, [r3, #4]
 800d52a:	b10a      	cbz	r2, 800d530 <_free_r+0x54>
 800d52c:	42a2      	cmp	r2, r4
 800d52e:	d9fa      	bls.n	800d526 <_free_r+0x4a>
 800d530:	6819      	ldr	r1, [r3, #0]
 800d532:	1858      	adds	r0, r3, r1
 800d534:	42a0      	cmp	r0, r4
 800d536:	d10b      	bne.n	800d550 <_free_r+0x74>
 800d538:	6820      	ldr	r0, [r4, #0]
 800d53a:	4401      	add	r1, r0
 800d53c:	1858      	adds	r0, r3, r1
 800d53e:	4282      	cmp	r2, r0
 800d540:	6019      	str	r1, [r3, #0]
 800d542:	d1dd      	bne.n	800d500 <_free_r+0x24>
 800d544:	6810      	ldr	r0, [r2, #0]
 800d546:	6852      	ldr	r2, [r2, #4]
 800d548:	605a      	str	r2, [r3, #4]
 800d54a:	4401      	add	r1, r0
 800d54c:	6019      	str	r1, [r3, #0]
 800d54e:	e7d7      	b.n	800d500 <_free_r+0x24>
 800d550:	d902      	bls.n	800d558 <_free_r+0x7c>
 800d552:	230c      	movs	r3, #12
 800d554:	602b      	str	r3, [r5, #0]
 800d556:	e7d3      	b.n	800d500 <_free_r+0x24>
 800d558:	6820      	ldr	r0, [r4, #0]
 800d55a:	1821      	adds	r1, r4, r0
 800d55c:	428a      	cmp	r2, r1
 800d55e:	bf04      	itt	eq
 800d560:	6811      	ldreq	r1, [r2, #0]
 800d562:	6852      	ldreq	r2, [r2, #4]
 800d564:	6062      	str	r2, [r4, #4]
 800d566:	bf04      	itt	eq
 800d568:	1809      	addeq	r1, r1, r0
 800d56a:	6021      	streq	r1, [r4, #0]
 800d56c:	605c      	str	r4, [r3, #4]
 800d56e:	e7c7      	b.n	800d500 <_free_r+0x24>
 800d570:	bd38      	pop	{r3, r4, r5, pc}
 800d572:	bf00      	nop
 800d574:	2000025c 	.word	0x2000025c

0800d578 <_malloc_r>:
 800d578:	b570      	push	{r4, r5, r6, lr}
 800d57a:	1ccd      	adds	r5, r1, #3
 800d57c:	f025 0503 	bic.w	r5, r5, #3
 800d580:	3508      	adds	r5, #8
 800d582:	2d0c      	cmp	r5, #12
 800d584:	bf38      	it	cc
 800d586:	250c      	movcc	r5, #12
 800d588:	2d00      	cmp	r5, #0
 800d58a:	4606      	mov	r6, r0
 800d58c:	db01      	blt.n	800d592 <_malloc_r+0x1a>
 800d58e:	42a9      	cmp	r1, r5
 800d590:	d903      	bls.n	800d59a <_malloc_r+0x22>
 800d592:	230c      	movs	r3, #12
 800d594:	6033      	str	r3, [r6, #0]
 800d596:	2000      	movs	r0, #0
 800d598:	bd70      	pop	{r4, r5, r6, pc}
 800d59a:	f000 f9d4 	bl	800d946 <__malloc_lock>
 800d59e:	4a21      	ldr	r2, [pc, #132]	; (800d624 <_malloc_r+0xac>)
 800d5a0:	6814      	ldr	r4, [r2, #0]
 800d5a2:	4621      	mov	r1, r4
 800d5a4:	b991      	cbnz	r1, 800d5cc <_malloc_r+0x54>
 800d5a6:	4c20      	ldr	r4, [pc, #128]	; (800d628 <_malloc_r+0xb0>)
 800d5a8:	6823      	ldr	r3, [r4, #0]
 800d5aa:	b91b      	cbnz	r3, 800d5b4 <_malloc_r+0x3c>
 800d5ac:	4630      	mov	r0, r6
 800d5ae:	f000 f98f 	bl	800d8d0 <_sbrk_r>
 800d5b2:	6020      	str	r0, [r4, #0]
 800d5b4:	4629      	mov	r1, r5
 800d5b6:	4630      	mov	r0, r6
 800d5b8:	f000 f98a 	bl	800d8d0 <_sbrk_r>
 800d5bc:	1c43      	adds	r3, r0, #1
 800d5be:	d124      	bne.n	800d60a <_malloc_r+0x92>
 800d5c0:	230c      	movs	r3, #12
 800d5c2:	6033      	str	r3, [r6, #0]
 800d5c4:	4630      	mov	r0, r6
 800d5c6:	f000 f9bf 	bl	800d948 <__malloc_unlock>
 800d5ca:	e7e4      	b.n	800d596 <_malloc_r+0x1e>
 800d5cc:	680b      	ldr	r3, [r1, #0]
 800d5ce:	1b5b      	subs	r3, r3, r5
 800d5d0:	d418      	bmi.n	800d604 <_malloc_r+0x8c>
 800d5d2:	2b0b      	cmp	r3, #11
 800d5d4:	d90f      	bls.n	800d5f6 <_malloc_r+0x7e>
 800d5d6:	600b      	str	r3, [r1, #0]
 800d5d8:	50cd      	str	r5, [r1, r3]
 800d5da:	18cc      	adds	r4, r1, r3
 800d5dc:	4630      	mov	r0, r6
 800d5de:	f000 f9b3 	bl	800d948 <__malloc_unlock>
 800d5e2:	f104 000b 	add.w	r0, r4, #11
 800d5e6:	1d23      	adds	r3, r4, #4
 800d5e8:	f020 0007 	bic.w	r0, r0, #7
 800d5ec:	1ac3      	subs	r3, r0, r3
 800d5ee:	d0d3      	beq.n	800d598 <_malloc_r+0x20>
 800d5f0:	425a      	negs	r2, r3
 800d5f2:	50e2      	str	r2, [r4, r3]
 800d5f4:	e7d0      	b.n	800d598 <_malloc_r+0x20>
 800d5f6:	428c      	cmp	r4, r1
 800d5f8:	684b      	ldr	r3, [r1, #4]
 800d5fa:	bf16      	itet	ne
 800d5fc:	6063      	strne	r3, [r4, #4]
 800d5fe:	6013      	streq	r3, [r2, #0]
 800d600:	460c      	movne	r4, r1
 800d602:	e7eb      	b.n	800d5dc <_malloc_r+0x64>
 800d604:	460c      	mov	r4, r1
 800d606:	6849      	ldr	r1, [r1, #4]
 800d608:	e7cc      	b.n	800d5a4 <_malloc_r+0x2c>
 800d60a:	1cc4      	adds	r4, r0, #3
 800d60c:	f024 0403 	bic.w	r4, r4, #3
 800d610:	42a0      	cmp	r0, r4
 800d612:	d005      	beq.n	800d620 <_malloc_r+0xa8>
 800d614:	1a21      	subs	r1, r4, r0
 800d616:	4630      	mov	r0, r6
 800d618:	f000 f95a 	bl	800d8d0 <_sbrk_r>
 800d61c:	3001      	adds	r0, #1
 800d61e:	d0cf      	beq.n	800d5c0 <_malloc_r+0x48>
 800d620:	6025      	str	r5, [r4, #0]
 800d622:	e7db      	b.n	800d5dc <_malloc_r+0x64>
 800d624:	2000025c 	.word	0x2000025c
 800d628:	20000260 	.word	0x20000260

0800d62c <__ssputs_r>:
 800d62c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d630:	688e      	ldr	r6, [r1, #8]
 800d632:	429e      	cmp	r6, r3
 800d634:	4682      	mov	sl, r0
 800d636:	460c      	mov	r4, r1
 800d638:	4690      	mov	r8, r2
 800d63a:	4699      	mov	r9, r3
 800d63c:	d837      	bhi.n	800d6ae <__ssputs_r+0x82>
 800d63e:	898a      	ldrh	r2, [r1, #12]
 800d640:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d644:	d031      	beq.n	800d6aa <__ssputs_r+0x7e>
 800d646:	6825      	ldr	r5, [r4, #0]
 800d648:	6909      	ldr	r1, [r1, #16]
 800d64a:	1a6f      	subs	r7, r5, r1
 800d64c:	6965      	ldr	r5, [r4, #20]
 800d64e:	2302      	movs	r3, #2
 800d650:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d654:	fb95 f5f3 	sdiv	r5, r5, r3
 800d658:	f109 0301 	add.w	r3, r9, #1
 800d65c:	443b      	add	r3, r7
 800d65e:	429d      	cmp	r5, r3
 800d660:	bf38      	it	cc
 800d662:	461d      	movcc	r5, r3
 800d664:	0553      	lsls	r3, r2, #21
 800d666:	d530      	bpl.n	800d6ca <__ssputs_r+0x9e>
 800d668:	4629      	mov	r1, r5
 800d66a:	f7ff ff85 	bl	800d578 <_malloc_r>
 800d66e:	4606      	mov	r6, r0
 800d670:	b950      	cbnz	r0, 800d688 <__ssputs_r+0x5c>
 800d672:	230c      	movs	r3, #12
 800d674:	f8ca 3000 	str.w	r3, [sl]
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d67e:	81a3      	strh	r3, [r4, #12]
 800d680:	f04f 30ff 	mov.w	r0, #4294967295
 800d684:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d688:	463a      	mov	r2, r7
 800d68a:	6921      	ldr	r1, [r4, #16]
 800d68c:	f7ff fc32 	bl	800cef4 <memcpy>
 800d690:	89a3      	ldrh	r3, [r4, #12]
 800d692:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d696:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d69a:	81a3      	strh	r3, [r4, #12]
 800d69c:	6126      	str	r6, [r4, #16]
 800d69e:	6165      	str	r5, [r4, #20]
 800d6a0:	443e      	add	r6, r7
 800d6a2:	1bed      	subs	r5, r5, r7
 800d6a4:	6026      	str	r6, [r4, #0]
 800d6a6:	60a5      	str	r5, [r4, #8]
 800d6a8:	464e      	mov	r6, r9
 800d6aa:	454e      	cmp	r6, r9
 800d6ac:	d900      	bls.n	800d6b0 <__ssputs_r+0x84>
 800d6ae:	464e      	mov	r6, r9
 800d6b0:	4632      	mov	r2, r6
 800d6b2:	4641      	mov	r1, r8
 800d6b4:	6820      	ldr	r0, [r4, #0]
 800d6b6:	f000 f92d 	bl	800d914 <memmove>
 800d6ba:	68a3      	ldr	r3, [r4, #8]
 800d6bc:	1b9b      	subs	r3, r3, r6
 800d6be:	60a3      	str	r3, [r4, #8]
 800d6c0:	6823      	ldr	r3, [r4, #0]
 800d6c2:	441e      	add	r6, r3
 800d6c4:	6026      	str	r6, [r4, #0]
 800d6c6:	2000      	movs	r0, #0
 800d6c8:	e7dc      	b.n	800d684 <__ssputs_r+0x58>
 800d6ca:	462a      	mov	r2, r5
 800d6cc:	f000 f93d 	bl	800d94a <_realloc_r>
 800d6d0:	4606      	mov	r6, r0
 800d6d2:	2800      	cmp	r0, #0
 800d6d4:	d1e2      	bne.n	800d69c <__ssputs_r+0x70>
 800d6d6:	6921      	ldr	r1, [r4, #16]
 800d6d8:	4650      	mov	r0, sl
 800d6da:	f7ff feff 	bl	800d4dc <_free_r>
 800d6de:	e7c8      	b.n	800d672 <__ssputs_r+0x46>

0800d6e0 <_svfiprintf_r>:
 800d6e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6e4:	461d      	mov	r5, r3
 800d6e6:	898b      	ldrh	r3, [r1, #12]
 800d6e8:	061f      	lsls	r7, r3, #24
 800d6ea:	b09d      	sub	sp, #116	; 0x74
 800d6ec:	4680      	mov	r8, r0
 800d6ee:	460c      	mov	r4, r1
 800d6f0:	4616      	mov	r6, r2
 800d6f2:	d50f      	bpl.n	800d714 <_svfiprintf_r+0x34>
 800d6f4:	690b      	ldr	r3, [r1, #16]
 800d6f6:	b96b      	cbnz	r3, 800d714 <_svfiprintf_r+0x34>
 800d6f8:	2140      	movs	r1, #64	; 0x40
 800d6fa:	f7ff ff3d 	bl	800d578 <_malloc_r>
 800d6fe:	6020      	str	r0, [r4, #0]
 800d700:	6120      	str	r0, [r4, #16]
 800d702:	b928      	cbnz	r0, 800d710 <_svfiprintf_r+0x30>
 800d704:	230c      	movs	r3, #12
 800d706:	f8c8 3000 	str.w	r3, [r8]
 800d70a:	f04f 30ff 	mov.w	r0, #4294967295
 800d70e:	e0c8      	b.n	800d8a2 <_svfiprintf_r+0x1c2>
 800d710:	2340      	movs	r3, #64	; 0x40
 800d712:	6163      	str	r3, [r4, #20]
 800d714:	2300      	movs	r3, #0
 800d716:	9309      	str	r3, [sp, #36]	; 0x24
 800d718:	2320      	movs	r3, #32
 800d71a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d71e:	2330      	movs	r3, #48	; 0x30
 800d720:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d724:	9503      	str	r5, [sp, #12]
 800d726:	f04f 0b01 	mov.w	fp, #1
 800d72a:	4637      	mov	r7, r6
 800d72c:	463d      	mov	r5, r7
 800d72e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d732:	b10b      	cbz	r3, 800d738 <_svfiprintf_r+0x58>
 800d734:	2b25      	cmp	r3, #37	; 0x25
 800d736:	d13e      	bne.n	800d7b6 <_svfiprintf_r+0xd6>
 800d738:	ebb7 0a06 	subs.w	sl, r7, r6
 800d73c:	d00b      	beq.n	800d756 <_svfiprintf_r+0x76>
 800d73e:	4653      	mov	r3, sl
 800d740:	4632      	mov	r2, r6
 800d742:	4621      	mov	r1, r4
 800d744:	4640      	mov	r0, r8
 800d746:	f7ff ff71 	bl	800d62c <__ssputs_r>
 800d74a:	3001      	adds	r0, #1
 800d74c:	f000 80a4 	beq.w	800d898 <_svfiprintf_r+0x1b8>
 800d750:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d752:	4453      	add	r3, sl
 800d754:	9309      	str	r3, [sp, #36]	; 0x24
 800d756:	783b      	ldrb	r3, [r7, #0]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f000 809d 	beq.w	800d898 <_svfiprintf_r+0x1b8>
 800d75e:	2300      	movs	r3, #0
 800d760:	f04f 32ff 	mov.w	r2, #4294967295
 800d764:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d768:	9304      	str	r3, [sp, #16]
 800d76a:	9307      	str	r3, [sp, #28]
 800d76c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d770:	931a      	str	r3, [sp, #104]	; 0x68
 800d772:	462f      	mov	r7, r5
 800d774:	2205      	movs	r2, #5
 800d776:	f817 1b01 	ldrb.w	r1, [r7], #1
 800d77a:	4850      	ldr	r0, [pc, #320]	; (800d8bc <_svfiprintf_r+0x1dc>)
 800d77c:	f7f2 fdb0 	bl	80002e0 <memchr>
 800d780:	9b04      	ldr	r3, [sp, #16]
 800d782:	b9d0      	cbnz	r0, 800d7ba <_svfiprintf_r+0xda>
 800d784:	06d9      	lsls	r1, r3, #27
 800d786:	bf44      	itt	mi
 800d788:	2220      	movmi	r2, #32
 800d78a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d78e:	071a      	lsls	r2, r3, #28
 800d790:	bf44      	itt	mi
 800d792:	222b      	movmi	r2, #43	; 0x2b
 800d794:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800d798:	782a      	ldrb	r2, [r5, #0]
 800d79a:	2a2a      	cmp	r2, #42	; 0x2a
 800d79c:	d015      	beq.n	800d7ca <_svfiprintf_r+0xea>
 800d79e:	9a07      	ldr	r2, [sp, #28]
 800d7a0:	462f      	mov	r7, r5
 800d7a2:	2000      	movs	r0, #0
 800d7a4:	250a      	movs	r5, #10
 800d7a6:	4639      	mov	r1, r7
 800d7a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d7ac:	3b30      	subs	r3, #48	; 0x30
 800d7ae:	2b09      	cmp	r3, #9
 800d7b0:	d94d      	bls.n	800d84e <_svfiprintf_r+0x16e>
 800d7b2:	b1b8      	cbz	r0, 800d7e4 <_svfiprintf_r+0x104>
 800d7b4:	e00f      	b.n	800d7d6 <_svfiprintf_r+0xf6>
 800d7b6:	462f      	mov	r7, r5
 800d7b8:	e7b8      	b.n	800d72c <_svfiprintf_r+0x4c>
 800d7ba:	4a40      	ldr	r2, [pc, #256]	; (800d8bc <_svfiprintf_r+0x1dc>)
 800d7bc:	1a80      	subs	r0, r0, r2
 800d7be:	fa0b f000 	lsl.w	r0, fp, r0
 800d7c2:	4318      	orrs	r0, r3
 800d7c4:	9004      	str	r0, [sp, #16]
 800d7c6:	463d      	mov	r5, r7
 800d7c8:	e7d3      	b.n	800d772 <_svfiprintf_r+0x92>
 800d7ca:	9a03      	ldr	r2, [sp, #12]
 800d7cc:	1d11      	adds	r1, r2, #4
 800d7ce:	6812      	ldr	r2, [r2, #0]
 800d7d0:	9103      	str	r1, [sp, #12]
 800d7d2:	2a00      	cmp	r2, #0
 800d7d4:	db01      	blt.n	800d7da <_svfiprintf_r+0xfa>
 800d7d6:	9207      	str	r2, [sp, #28]
 800d7d8:	e004      	b.n	800d7e4 <_svfiprintf_r+0x104>
 800d7da:	4252      	negs	r2, r2
 800d7dc:	f043 0302 	orr.w	r3, r3, #2
 800d7e0:	9207      	str	r2, [sp, #28]
 800d7e2:	9304      	str	r3, [sp, #16]
 800d7e4:	783b      	ldrb	r3, [r7, #0]
 800d7e6:	2b2e      	cmp	r3, #46	; 0x2e
 800d7e8:	d10c      	bne.n	800d804 <_svfiprintf_r+0x124>
 800d7ea:	787b      	ldrb	r3, [r7, #1]
 800d7ec:	2b2a      	cmp	r3, #42	; 0x2a
 800d7ee:	d133      	bne.n	800d858 <_svfiprintf_r+0x178>
 800d7f0:	9b03      	ldr	r3, [sp, #12]
 800d7f2:	1d1a      	adds	r2, r3, #4
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	9203      	str	r2, [sp, #12]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	bfb8      	it	lt
 800d7fc:	f04f 33ff 	movlt.w	r3, #4294967295
 800d800:	3702      	adds	r7, #2
 800d802:	9305      	str	r3, [sp, #20]
 800d804:	4d2e      	ldr	r5, [pc, #184]	; (800d8c0 <_svfiprintf_r+0x1e0>)
 800d806:	7839      	ldrb	r1, [r7, #0]
 800d808:	2203      	movs	r2, #3
 800d80a:	4628      	mov	r0, r5
 800d80c:	f7f2 fd68 	bl	80002e0 <memchr>
 800d810:	b138      	cbz	r0, 800d822 <_svfiprintf_r+0x142>
 800d812:	2340      	movs	r3, #64	; 0x40
 800d814:	1b40      	subs	r0, r0, r5
 800d816:	fa03 f000 	lsl.w	r0, r3, r0
 800d81a:	9b04      	ldr	r3, [sp, #16]
 800d81c:	4303      	orrs	r3, r0
 800d81e:	3701      	adds	r7, #1
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	7839      	ldrb	r1, [r7, #0]
 800d824:	4827      	ldr	r0, [pc, #156]	; (800d8c4 <_svfiprintf_r+0x1e4>)
 800d826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d82a:	2206      	movs	r2, #6
 800d82c:	1c7e      	adds	r6, r7, #1
 800d82e:	f7f2 fd57 	bl	80002e0 <memchr>
 800d832:	2800      	cmp	r0, #0
 800d834:	d038      	beq.n	800d8a8 <_svfiprintf_r+0x1c8>
 800d836:	4b24      	ldr	r3, [pc, #144]	; (800d8c8 <_svfiprintf_r+0x1e8>)
 800d838:	bb13      	cbnz	r3, 800d880 <_svfiprintf_r+0x1a0>
 800d83a:	9b03      	ldr	r3, [sp, #12]
 800d83c:	3307      	adds	r3, #7
 800d83e:	f023 0307 	bic.w	r3, r3, #7
 800d842:	3308      	adds	r3, #8
 800d844:	9303      	str	r3, [sp, #12]
 800d846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d848:	444b      	add	r3, r9
 800d84a:	9309      	str	r3, [sp, #36]	; 0x24
 800d84c:	e76d      	b.n	800d72a <_svfiprintf_r+0x4a>
 800d84e:	fb05 3202 	mla	r2, r5, r2, r3
 800d852:	2001      	movs	r0, #1
 800d854:	460f      	mov	r7, r1
 800d856:	e7a6      	b.n	800d7a6 <_svfiprintf_r+0xc6>
 800d858:	2300      	movs	r3, #0
 800d85a:	3701      	adds	r7, #1
 800d85c:	9305      	str	r3, [sp, #20]
 800d85e:	4619      	mov	r1, r3
 800d860:	250a      	movs	r5, #10
 800d862:	4638      	mov	r0, r7
 800d864:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d868:	3a30      	subs	r2, #48	; 0x30
 800d86a:	2a09      	cmp	r2, #9
 800d86c:	d903      	bls.n	800d876 <_svfiprintf_r+0x196>
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d0c8      	beq.n	800d804 <_svfiprintf_r+0x124>
 800d872:	9105      	str	r1, [sp, #20]
 800d874:	e7c6      	b.n	800d804 <_svfiprintf_r+0x124>
 800d876:	fb05 2101 	mla	r1, r5, r1, r2
 800d87a:	2301      	movs	r3, #1
 800d87c:	4607      	mov	r7, r0
 800d87e:	e7f0      	b.n	800d862 <_svfiprintf_r+0x182>
 800d880:	ab03      	add	r3, sp, #12
 800d882:	9300      	str	r3, [sp, #0]
 800d884:	4622      	mov	r2, r4
 800d886:	4b11      	ldr	r3, [pc, #68]	; (800d8cc <_svfiprintf_r+0x1ec>)
 800d888:	a904      	add	r1, sp, #16
 800d88a:	4640      	mov	r0, r8
 800d88c:	f7fe f8ee 	bl	800ba6c <_printf_float>
 800d890:	f1b0 3fff 	cmp.w	r0, #4294967295
 800d894:	4681      	mov	r9, r0
 800d896:	d1d6      	bne.n	800d846 <_svfiprintf_r+0x166>
 800d898:	89a3      	ldrh	r3, [r4, #12]
 800d89a:	065b      	lsls	r3, r3, #25
 800d89c:	f53f af35 	bmi.w	800d70a <_svfiprintf_r+0x2a>
 800d8a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d8a2:	b01d      	add	sp, #116	; 0x74
 800d8a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8a8:	ab03      	add	r3, sp, #12
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	4622      	mov	r2, r4
 800d8ae:	4b07      	ldr	r3, [pc, #28]	; (800d8cc <_svfiprintf_r+0x1ec>)
 800d8b0:	a904      	add	r1, sp, #16
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	f7fe fb90 	bl	800bfd8 <_printf_i>
 800d8b8:	e7ea      	b.n	800d890 <_svfiprintf_r+0x1b0>
 800d8ba:	bf00      	nop
 800d8bc:	08013fb4 	.word	0x08013fb4
 800d8c0:	08013fba 	.word	0x08013fba
 800d8c4:	08013fbe 	.word	0x08013fbe
 800d8c8:	0800ba6d 	.word	0x0800ba6d
 800d8cc:	0800d62d 	.word	0x0800d62d

0800d8d0 <_sbrk_r>:
 800d8d0:	b538      	push	{r3, r4, r5, lr}
 800d8d2:	4c06      	ldr	r4, [pc, #24]	; (800d8ec <_sbrk_r+0x1c>)
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	4605      	mov	r5, r0
 800d8d8:	4608      	mov	r0, r1
 800d8da:	6023      	str	r3, [r4, #0]
 800d8dc:	f7f8 fd7c 	bl	80063d8 <_sbrk>
 800d8e0:	1c43      	adds	r3, r0, #1
 800d8e2:	d102      	bne.n	800d8ea <_sbrk_r+0x1a>
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	b103      	cbz	r3, 800d8ea <_sbrk_r+0x1a>
 800d8e8:	602b      	str	r3, [r5, #0]
 800d8ea:	bd38      	pop	{r3, r4, r5, pc}
 800d8ec:	2001a994 	.word	0x2001a994

0800d8f0 <__ascii_mbtowc>:
 800d8f0:	b082      	sub	sp, #8
 800d8f2:	b901      	cbnz	r1, 800d8f6 <__ascii_mbtowc+0x6>
 800d8f4:	a901      	add	r1, sp, #4
 800d8f6:	b142      	cbz	r2, 800d90a <__ascii_mbtowc+0x1a>
 800d8f8:	b14b      	cbz	r3, 800d90e <__ascii_mbtowc+0x1e>
 800d8fa:	7813      	ldrb	r3, [r2, #0]
 800d8fc:	600b      	str	r3, [r1, #0]
 800d8fe:	7812      	ldrb	r2, [r2, #0]
 800d900:	1c10      	adds	r0, r2, #0
 800d902:	bf18      	it	ne
 800d904:	2001      	movne	r0, #1
 800d906:	b002      	add	sp, #8
 800d908:	4770      	bx	lr
 800d90a:	4610      	mov	r0, r2
 800d90c:	e7fb      	b.n	800d906 <__ascii_mbtowc+0x16>
 800d90e:	f06f 0001 	mvn.w	r0, #1
 800d912:	e7f8      	b.n	800d906 <__ascii_mbtowc+0x16>

0800d914 <memmove>:
 800d914:	4288      	cmp	r0, r1
 800d916:	b510      	push	{r4, lr}
 800d918:	eb01 0302 	add.w	r3, r1, r2
 800d91c:	d807      	bhi.n	800d92e <memmove+0x1a>
 800d91e:	1e42      	subs	r2, r0, #1
 800d920:	4299      	cmp	r1, r3
 800d922:	d00a      	beq.n	800d93a <memmove+0x26>
 800d924:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d928:	f802 4f01 	strb.w	r4, [r2, #1]!
 800d92c:	e7f8      	b.n	800d920 <memmove+0xc>
 800d92e:	4283      	cmp	r3, r0
 800d930:	d9f5      	bls.n	800d91e <memmove+0xa>
 800d932:	1881      	adds	r1, r0, r2
 800d934:	1ad2      	subs	r2, r2, r3
 800d936:	42d3      	cmn	r3, r2
 800d938:	d100      	bne.n	800d93c <memmove+0x28>
 800d93a:	bd10      	pop	{r4, pc}
 800d93c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d940:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800d944:	e7f7      	b.n	800d936 <memmove+0x22>

0800d946 <__malloc_lock>:
 800d946:	4770      	bx	lr

0800d948 <__malloc_unlock>:
 800d948:	4770      	bx	lr

0800d94a <_realloc_r>:
 800d94a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d94c:	4607      	mov	r7, r0
 800d94e:	4614      	mov	r4, r2
 800d950:	460e      	mov	r6, r1
 800d952:	b921      	cbnz	r1, 800d95e <_realloc_r+0x14>
 800d954:	4611      	mov	r1, r2
 800d956:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800d95a:	f7ff be0d 	b.w	800d578 <_malloc_r>
 800d95e:	b922      	cbnz	r2, 800d96a <_realloc_r+0x20>
 800d960:	f7ff fdbc 	bl	800d4dc <_free_r>
 800d964:	4625      	mov	r5, r4
 800d966:	4628      	mov	r0, r5
 800d968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d96a:	f000 f821 	bl	800d9b0 <_malloc_usable_size_r>
 800d96e:	42a0      	cmp	r0, r4
 800d970:	d20f      	bcs.n	800d992 <_realloc_r+0x48>
 800d972:	4621      	mov	r1, r4
 800d974:	4638      	mov	r0, r7
 800d976:	f7ff fdff 	bl	800d578 <_malloc_r>
 800d97a:	4605      	mov	r5, r0
 800d97c:	2800      	cmp	r0, #0
 800d97e:	d0f2      	beq.n	800d966 <_realloc_r+0x1c>
 800d980:	4631      	mov	r1, r6
 800d982:	4622      	mov	r2, r4
 800d984:	f7ff fab6 	bl	800cef4 <memcpy>
 800d988:	4631      	mov	r1, r6
 800d98a:	4638      	mov	r0, r7
 800d98c:	f7ff fda6 	bl	800d4dc <_free_r>
 800d990:	e7e9      	b.n	800d966 <_realloc_r+0x1c>
 800d992:	4635      	mov	r5, r6
 800d994:	e7e7      	b.n	800d966 <_realloc_r+0x1c>

0800d996 <__ascii_wctomb>:
 800d996:	b149      	cbz	r1, 800d9ac <__ascii_wctomb+0x16>
 800d998:	2aff      	cmp	r2, #255	; 0xff
 800d99a:	bf85      	ittet	hi
 800d99c:	238a      	movhi	r3, #138	; 0x8a
 800d99e:	6003      	strhi	r3, [r0, #0]
 800d9a0:	700a      	strbls	r2, [r1, #0]
 800d9a2:	f04f 30ff 	movhi.w	r0, #4294967295
 800d9a6:	bf98      	it	ls
 800d9a8:	2001      	movls	r0, #1
 800d9aa:	4770      	bx	lr
 800d9ac:	4608      	mov	r0, r1
 800d9ae:	4770      	bx	lr

0800d9b0 <_malloc_usable_size_r>:
 800d9b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9b4:	1f18      	subs	r0, r3, #4
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	bfbc      	itt	lt
 800d9ba:	580b      	ldrlt	r3, [r1, r0]
 800d9bc:	18c0      	addlt	r0, r0, r3
 800d9be:	4770      	bx	lr

0800d9c0 <sqrt>:
 800d9c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d9c4:	ed2d 8b02 	vpush	{d8}
 800d9c8:	b08b      	sub	sp, #44	; 0x2c
 800d9ca:	ec55 4b10 	vmov	r4, r5, d0
 800d9ce:	f000 f8a1 	bl	800db14 <__ieee754_sqrt>
 800d9d2:	4b26      	ldr	r3, [pc, #152]	; (800da6c <sqrt+0xac>)
 800d9d4:	eeb0 8a40 	vmov.f32	s16, s0
 800d9d8:	eef0 8a60 	vmov.f32	s17, s1
 800d9dc:	f993 6000 	ldrsb.w	r6, [r3]
 800d9e0:	1c73      	adds	r3, r6, #1
 800d9e2:	d02a      	beq.n	800da3a <sqrt+0x7a>
 800d9e4:	4622      	mov	r2, r4
 800d9e6:	462b      	mov	r3, r5
 800d9e8:	4620      	mov	r0, r4
 800d9ea:	4629      	mov	r1, r5
 800d9ec:	f7f3 f91e 	bl	8000c2c <__aeabi_dcmpun>
 800d9f0:	4607      	mov	r7, r0
 800d9f2:	bb10      	cbnz	r0, 800da3a <sqrt+0x7a>
 800d9f4:	f04f 0800 	mov.w	r8, #0
 800d9f8:	f04f 0900 	mov.w	r9, #0
 800d9fc:	4642      	mov	r2, r8
 800d9fe:	464b      	mov	r3, r9
 800da00:	4620      	mov	r0, r4
 800da02:	4629      	mov	r1, r5
 800da04:	f7f3 f8ea 	bl	8000bdc <__aeabi_dcmplt>
 800da08:	b1b8      	cbz	r0, 800da3a <sqrt+0x7a>
 800da0a:	2301      	movs	r3, #1
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	4b18      	ldr	r3, [pc, #96]	; (800da70 <sqrt+0xb0>)
 800da10:	9301      	str	r3, [sp, #4]
 800da12:	9708      	str	r7, [sp, #32]
 800da14:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800da18:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800da1c:	b9b6      	cbnz	r6, 800da4c <sqrt+0x8c>
 800da1e:	e9cd 8906 	strd	r8, r9, [sp, #24]
 800da22:	4668      	mov	r0, sp
 800da24:	f000 f929 	bl	800dc7a <matherr>
 800da28:	b1d0      	cbz	r0, 800da60 <sqrt+0xa0>
 800da2a:	9b08      	ldr	r3, [sp, #32]
 800da2c:	b11b      	cbz	r3, 800da36 <sqrt+0x76>
 800da2e:	f7fd ff57 	bl	800b8e0 <__errno>
 800da32:	9b08      	ldr	r3, [sp, #32]
 800da34:	6003      	str	r3, [r0, #0]
 800da36:	ed9d 8b06 	vldr	d8, [sp, #24]
 800da3a:	eeb0 0a48 	vmov.f32	s0, s16
 800da3e:	eef0 0a68 	vmov.f32	s1, s17
 800da42:	b00b      	add	sp, #44	; 0x2c
 800da44:	ecbd 8b02 	vpop	{d8}
 800da48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da4c:	4642      	mov	r2, r8
 800da4e:	464b      	mov	r3, r9
 800da50:	4640      	mov	r0, r8
 800da52:	4649      	mov	r1, r9
 800da54:	f7f2 ff7a 	bl	800094c <__aeabi_ddiv>
 800da58:	2e02      	cmp	r6, #2
 800da5a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800da5e:	d1e0      	bne.n	800da22 <sqrt+0x62>
 800da60:	f7fd ff3e 	bl	800b8e0 <__errno>
 800da64:	2321      	movs	r3, #33	; 0x21
 800da66:	6003      	str	r3, [r0, #0]
 800da68:	e7df      	b.n	800da2a <sqrt+0x6a>
 800da6a:	bf00      	nop
 800da6c:	20000204 	.word	0x20000204
 800da70:	080140d0 	.word	0x080140d0

0800da74 <sqrtf>:
 800da74:	b510      	push	{r4, lr}
 800da76:	ed2d 8b02 	vpush	{d8}
 800da7a:	b08a      	sub	sp, #40	; 0x28
 800da7c:	eeb0 8a40 	vmov.f32	s16, s0
 800da80:	f000 f8f8 	bl	800dc74 <__ieee754_sqrtf>
 800da84:	4b21      	ldr	r3, [pc, #132]	; (800db0c <sqrtf+0x98>)
 800da86:	f993 4000 	ldrsb.w	r4, [r3]
 800da8a:	1c63      	adds	r3, r4, #1
 800da8c:	d02c      	beq.n	800dae8 <sqrtf+0x74>
 800da8e:	eeb4 8a48 	vcmp.f32	s16, s16
 800da92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da96:	d627      	bvs.n	800dae8 <sqrtf+0x74>
 800da98:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800da9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800daa0:	d522      	bpl.n	800dae8 <sqrtf+0x74>
 800daa2:	2301      	movs	r3, #1
 800daa4:	9300      	str	r3, [sp, #0]
 800daa6:	4b1a      	ldr	r3, [pc, #104]	; (800db10 <sqrtf+0x9c>)
 800daa8:	9301      	str	r3, [sp, #4]
 800daaa:	ee18 0a10 	vmov	r0, s16
 800daae:	2300      	movs	r3, #0
 800dab0:	9308      	str	r3, [sp, #32]
 800dab2:	f7f2 fdc9 	bl	8000648 <__aeabi_f2d>
 800dab6:	2200      	movs	r2, #0
 800dab8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800dabc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dac0:	2300      	movs	r3, #0
 800dac2:	b9ac      	cbnz	r4, 800daf0 <sqrtf+0x7c>
 800dac4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800dac8:	4668      	mov	r0, sp
 800daca:	f000 f8d6 	bl	800dc7a <matherr>
 800dace:	b1b8      	cbz	r0, 800db00 <sqrtf+0x8c>
 800dad0:	9b08      	ldr	r3, [sp, #32]
 800dad2:	b11b      	cbz	r3, 800dadc <sqrtf+0x68>
 800dad4:	f7fd ff04 	bl	800b8e0 <__errno>
 800dad8:	9b08      	ldr	r3, [sp, #32]
 800dada:	6003      	str	r3, [r0, #0]
 800dadc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dae0:	f7f3 f8e2 	bl	8000ca8 <__aeabi_d2f>
 800dae4:	ee00 0a10 	vmov	s0, r0
 800dae8:	b00a      	add	sp, #40	; 0x28
 800daea:	ecbd 8b02 	vpop	{d8}
 800daee:	bd10      	pop	{r4, pc}
 800daf0:	4610      	mov	r0, r2
 800daf2:	4619      	mov	r1, r3
 800daf4:	f7f2 ff2a 	bl	800094c <__aeabi_ddiv>
 800daf8:	2c02      	cmp	r4, #2
 800dafa:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dafe:	d1e3      	bne.n	800dac8 <sqrtf+0x54>
 800db00:	f7fd feee 	bl	800b8e0 <__errno>
 800db04:	2321      	movs	r3, #33	; 0x21
 800db06:	6003      	str	r3, [r0, #0]
 800db08:	e7e2      	b.n	800dad0 <sqrtf+0x5c>
 800db0a:	bf00      	nop
 800db0c:	20000204 	.word	0x20000204
 800db10:	080140d5 	.word	0x080140d5

0800db14 <__ieee754_sqrt>:
 800db14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db18:	4955      	ldr	r1, [pc, #340]	; (800dc70 <__ieee754_sqrt+0x15c>)
 800db1a:	ec55 4b10 	vmov	r4, r5, d0
 800db1e:	43a9      	bics	r1, r5
 800db20:	462b      	mov	r3, r5
 800db22:	462a      	mov	r2, r5
 800db24:	d112      	bne.n	800db4c <__ieee754_sqrt+0x38>
 800db26:	ee10 2a10 	vmov	r2, s0
 800db2a:	ee10 0a10 	vmov	r0, s0
 800db2e:	4629      	mov	r1, r5
 800db30:	f7f2 fde2 	bl	80006f8 <__aeabi_dmul>
 800db34:	4602      	mov	r2, r0
 800db36:	460b      	mov	r3, r1
 800db38:	4620      	mov	r0, r4
 800db3a:	4629      	mov	r1, r5
 800db3c:	f7f2 fc26 	bl	800038c <__adddf3>
 800db40:	4604      	mov	r4, r0
 800db42:	460d      	mov	r5, r1
 800db44:	ec45 4b10 	vmov	d0, r4, r5
 800db48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800db4c:	2d00      	cmp	r5, #0
 800db4e:	ee10 0a10 	vmov	r0, s0
 800db52:	4621      	mov	r1, r4
 800db54:	dc0f      	bgt.n	800db76 <__ieee754_sqrt+0x62>
 800db56:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800db5a:	4330      	orrs	r0, r6
 800db5c:	d0f2      	beq.n	800db44 <__ieee754_sqrt+0x30>
 800db5e:	b155      	cbz	r5, 800db76 <__ieee754_sqrt+0x62>
 800db60:	ee10 2a10 	vmov	r2, s0
 800db64:	4620      	mov	r0, r4
 800db66:	4629      	mov	r1, r5
 800db68:	f7f2 fc0e 	bl	8000388 <__aeabi_dsub>
 800db6c:	4602      	mov	r2, r0
 800db6e:	460b      	mov	r3, r1
 800db70:	f7f2 feec 	bl	800094c <__aeabi_ddiv>
 800db74:	e7e4      	b.n	800db40 <__ieee754_sqrt+0x2c>
 800db76:	151b      	asrs	r3, r3, #20
 800db78:	d073      	beq.n	800dc62 <__ieee754_sqrt+0x14e>
 800db7a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800db7e:	07dd      	lsls	r5, r3, #31
 800db80:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800db84:	bf48      	it	mi
 800db86:	0fc8      	lsrmi	r0, r1, #31
 800db88:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800db8c:	bf44      	itt	mi
 800db8e:	0049      	lslmi	r1, r1, #1
 800db90:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800db94:	2500      	movs	r5, #0
 800db96:	1058      	asrs	r0, r3, #1
 800db98:	0fcb      	lsrs	r3, r1, #31
 800db9a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800db9e:	0049      	lsls	r1, r1, #1
 800dba0:	2316      	movs	r3, #22
 800dba2:	462c      	mov	r4, r5
 800dba4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 800dba8:	19a7      	adds	r7, r4, r6
 800dbaa:	4297      	cmp	r7, r2
 800dbac:	bfde      	ittt	le
 800dbae:	19bc      	addle	r4, r7, r6
 800dbb0:	1bd2      	suble	r2, r2, r7
 800dbb2:	19ad      	addle	r5, r5, r6
 800dbb4:	0fcf      	lsrs	r7, r1, #31
 800dbb6:	3b01      	subs	r3, #1
 800dbb8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800dbbc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dbc0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dbc4:	d1f0      	bne.n	800dba8 <__ieee754_sqrt+0x94>
 800dbc6:	f04f 0c20 	mov.w	ip, #32
 800dbca:	469e      	mov	lr, r3
 800dbcc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dbd0:	42a2      	cmp	r2, r4
 800dbd2:	eb06 070e 	add.w	r7, r6, lr
 800dbd6:	dc02      	bgt.n	800dbde <__ieee754_sqrt+0xca>
 800dbd8:	d112      	bne.n	800dc00 <__ieee754_sqrt+0xec>
 800dbda:	428f      	cmp	r7, r1
 800dbdc:	d810      	bhi.n	800dc00 <__ieee754_sqrt+0xec>
 800dbde:	2f00      	cmp	r7, #0
 800dbe0:	eb07 0e06 	add.w	lr, r7, r6
 800dbe4:	da42      	bge.n	800dc6c <__ieee754_sqrt+0x158>
 800dbe6:	f1be 0f00 	cmp.w	lr, #0
 800dbea:	db3f      	blt.n	800dc6c <__ieee754_sqrt+0x158>
 800dbec:	f104 0801 	add.w	r8, r4, #1
 800dbf0:	1b12      	subs	r2, r2, r4
 800dbf2:	428f      	cmp	r7, r1
 800dbf4:	bf88      	it	hi
 800dbf6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800dbfa:	1bc9      	subs	r1, r1, r7
 800dbfc:	4433      	add	r3, r6
 800dbfe:	4644      	mov	r4, r8
 800dc00:	0052      	lsls	r2, r2, #1
 800dc02:	f1bc 0c01 	subs.w	ip, ip, #1
 800dc06:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800dc0a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dc0e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800dc12:	d1dd      	bne.n	800dbd0 <__ieee754_sqrt+0xbc>
 800dc14:	430a      	orrs	r2, r1
 800dc16:	d006      	beq.n	800dc26 <__ieee754_sqrt+0x112>
 800dc18:	1c5c      	adds	r4, r3, #1
 800dc1a:	bf13      	iteet	ne
 800dc1c:	3301      	addne	r3, #1
 800dc1e:	3501      	addeq	r5, #1
 800dc20:	4663      	moveq	r3, ip
 800dc22:	f023 0301 	bicne.w	r3, r3, #1
 800dc26:	106a      	asrs	r2, r5, #1
 800dc28:	085b      	lsrs	r3, r3, #1
 800dc2a:	07e9      	lsls	r1, r5, #31
 800dc2c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800dc30:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800dc34:	bf48      	it	mi
 800dc36:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800dc3a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800dc3e:	461c      	mov	r4, r3
 800dc40:	e780      	b.n	800db44 <__ieee754_sqrt+0x30>
 800dc42:	0aca      	lsrs	r2, r1, #11
 800dc44:	3815      	subs	r0, #21
 800dc46:	0549      	lsls	r1, r1, #21
 800dc48:	2a00      	cmp	r2, #0
 800dc4a:	d0fa      	beq.n	800dc42 <__ieee754_sqrt+0x12e>
 800dc4c:	02d6      	lsls	r6, r2, #11
 800dc4e:	d50a      	bpl.n	800dc66 <__ieee754_sqrt+0x152>
 800dc50:	f1c3 0420 	rsb	r4, r3, #32
 800dc54:	fa21 f404 	lsr.w	r4, r1, r4
 800dc58:	1e5d      	subs	r5, r3, #1
 800dc5a:	4099      	lsls	r1, r3
 800dc5c:	4322      	orrs	r2, r4
 800dc5e:	1b43      	subs	r3, r0, r5
 800dc60:	e78b      	b.n	800db7a <__ieee754_sqrt+0x66>
 800dc62:	4618      	mov	r0, r3
 800dc64:	e7f0      	b.n	800dc48 <__ieee754_sqrt+0x134>
 800dc66:	0052      	lsls	r2, r2, #1
 800dc68:	3301      	adds	r3, #1
 800dc6a:	e7ef      	b.n	800dc4c <__ieee754_sqrt+0x138>
 800dc6c:	46a0      	mov	r8, r4
 800dc6e:	e7bf      	b.n	800dbf0 <__ieee754_sqrt+0xdc>
 800dc70:	7ff00000 	.word	0x7ff00000

0800dc74 <__ieee754_sqrtf>:
 800dc74:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800dc78:	4770      	bx	lr

0800dc7a <matherr>:
 800dc7a:	2000      	movs	r0, #0
 800dc7c:	4770      	bx	lr
	...

0800dc80 <_init>:
 800dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc82:	bf00      	nop
 800dc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc86:	bc08      	pop	{r3}
 800dc88:	469e      	mov	lr, r3
 800dc8a:	4770      	bx	lr

0800dc8c <_fini>:
 800dc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc8e:	bf00      	nop
 800dc90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc92:	bc08      	pop	{r3}
 800dc94:	469e      	mov	lr, r3
 800dc96:	4770      	bx	lr
